ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"swc_gaspedal.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.GASPEDAL_readJoystick_run,"ax",%progbits
  20              		.align	2
  21              		.global	GASPEDAL_readJoystick_run
  22              		.thumb
  23              		.thumb_func
  24              		.type	GASPEDAL_readJoystick_run, %function
  25              	GASPEDAL_readJoystick_run:
  26              	.LFB180:
  27              		.file 1 "asw\\swc_gaspedal.c"
   1:asw/swc_gaspedal.c **** /*
   2:asw/swc_gaspedal.c ****  * Filename: swc_gaspedal.c
   3:asw/swc_gaspedal.c ****  *
   4:asw/swc_gaspedal.c ****  * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
   5:asw/swc_gaspedal.c ****  *
   6:asw/swc_gaspedal.c ****  * description: Gas Pedal Software Component
   7:asw/swc_gaspedal.c ****  * name: swc_GasPedal
   8:asw/swc_gaspedal.c ****  * shortname: GasPedal
   9:asw/swc_gaspedal.c ****  *
  10:asw/swc_gaspedal.c ****  */
  11:asw/swc_gaspedal.c **** 
  12:asw/swc_gaspedal.c **** #include "project.h"
  13:asw/swc_gaspedal.c **** #include "global.h"
  14:asw/swc_gaspedal.c **** #include "rte.h"
  15:asw/swc_gaspedal.c **** #include "rte_types.h"
  16:asw/swc_gaspedal.c **** #include "swc_gaspedal.h"
  17:asw/swc_gaspedal.c **** 
  18:asw/swc_gaspedal.c **** 
  19:asw/swc_gaspedal.c **** 
  20:asw/swc_gaspedal.c **** /* USER CODE START SWC_GASPEDAL_INCLUDE */
  21:asw/swc_gaspedal.c **** #include "watchdog.h"
  22:asw/swc_gaspedal.c **** /* USER CODE END SWC_GASPEDAL_INCLUDE */
  23:asw/swc_gaspedal.c **** 
  24:asw/swc_gaspedal.c **** 
  25:asw/swc_gaspedal.c **** #include "sp_common.h"
  26:asw/swc_gaspedal.c **** 
  27:asw/swc_gaspedal.c **** /* USER CODE START SWC_GASPEDAL_USERDEFINITIONS */
  28:asw/swc_gaspedal.c **** 
  29:asw/swc_gaspedal.c **** /* USER CODE END SWC_GASPEDAL_USERDEFINITIONS */
  30:asw/swc_gaspedal.c **** 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 2


  31:asw/swc_gaspedal.c **** 
  32:asw/swc_gaspedal.c **** 
  33:asw/swc_gaspedal.c **** /*
  34:asw/swc_gaspedal.c ****  * component: swc_GasPedal
  35:asw/swc_gaspedal.c ****  * cycletime: 10
  36:asw/swc_gaspedal.c ****  * description: Runnable that reads joystick data value x and y every 10ms and update joystick sign
  37:asw/swc_gaspedal.c ****  * events: 
  38:asw/swc_gaspedal.c ****  * name: GASPEDAL_readJoystick_run
  39:asw/swc_gaspedal.c ****  * shortname: readJoystick
  40:asw/swc_gaspedal.c ****  * signalIN: 
  41:asw/swc_gaspedal.c ****  * signalOUT: so_joystick
  42:asw/swc_gaspedal.c ****  * task: tsk_io
  43:asw/swc_gaspedal.c ****  */
  44:asw/swc_gaspedal.c **** void GASPEDAL_readJoystick_run(RTE_event ev){
  28              		.loc 1 44 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 30B5     		push	{r4, r5, lr}
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              		.cfi_def_cfa_offset 24
  40              	.LVL1:
  41              	.LBB49:
  42              	.LBB50:
  43              		.file 2 ".\\bsw\\rte/sc_joystick.h"
   1:.\bsw\rte/sc_joystick.h **** 
   2:.\bsw\rte/sc_joystick.h **** 
   3:.\bsw\rte/sc_joystick.h **** /**
   4:.\bsw\rte/sc_joystick.h ****  *  file    SC_JOYSTICK_signal.h
   5:.\bsw\rte/sc_joystick.h ****  *
   6:.\bsw\rte/sc_joystick.h ****  *  brief   signal base class for signal sc_joystick
   7:.\bsw\rte/sc_joystick.h ****  *
   8:.\bsw\rte/sc_joystick.h ****  *  author  Autogenerated, Peter Fromm       <peter.fromm@h-da.de>
   9:.\bsw\rte/sc_joystick.h ****  *
  10:.\bsw\rte/sc_joystick.h ****  * description: Joystick signal class
  11:.\bsw\rte/sc_joystick.h ****  * name: sc_joystick
  12:.\bsw\rte/sc_joystick.h ****  * shortname: joystick
  13:.\bsw\rte/sc_joystick.h ****  *
  14:.\bsw\rte/sc_joystick.h ****  */
  15:.\bsw\rte/sc_joystick.h **** 
  16:.\bsw\rte/sc_joystick.h **** 
  17:.\bsw\rte/sc_joystick.h **** 
  18:.\bsw\rte/sc_joystick.h **** #ifndef SC_JOYSTICK_SIGNAL_H_INCLUDED
  19:.\bsw\rte/sc_joystick.h **** #define SC_JOYSTICK_SIGNAL_H_INCLUDED
  20:.\bsw\rte/sc_joystick.h **** 
  21:.\bsw\rte/sc_joystick.h **** /*================================================[ public includes  ]=============================
  22:.\bsw\rte/sc_joystick.h **** #include "global.h"
  23:.\bsw\rte/sc_joystick.h **** #include "project.h"
  24:.\bsw\rte/sc_joystick.h **** #include "rte.h"
  25:.\bsw\rte/sc_joystick.h **** #include "rte_types.h"
  26:.\bsw\rte/sc_joystick.h **** 
  27:.\bsw\rte/sc_joystick.h **** #include "sc_joystick_type.h"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 3


  28:.\bsw\rte/sc_joystick.h **** 
  29:.\bsw\rte/sc_joystick.h **** 
  30:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
  31:.\bsw\rte/sc_joystick.h **** /* The driver API block																						*/
  32:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
  33:.\bsw\rte/sc_joystick.h ****                                                                                                    
  34:.\bsw\rte/sc_joystick.h **** /**
  35:.\bsw\rte/sc_joystick.h ****  *  Definition of function types for driver interfaces.
  36:.\bsw\rte/sc_joystick.h ****  *  I-Port
  37:.\bsw\rte/sc_joystick.h ****  */
  38:.\bsw\rte/sc_joystick.h **** typedef RC_t (*SC_JOYSTICK_driverIn_t)(SC_JOYSTICK_data_t * const);
  39:.\bsw\rte/sc_joystick.h **** 
  40:.\bsw\rte/sc_joystick.h **** /**
  41:.\bsw\rte/sc_joystick.h ****  *  Definition of function types for driver interfaces.
  42:.\bsw\rte/sc_joystick.h ****  *  O-Port
  43:.\bsw\rte/sc_joystick.h ****  */
  44:.\bsw\rte/sc_joystick.h **** typedef RC_t (*SC_JOYSTICK_driverOut_t)( const SC_JOYSTICK_data_t * const);
  45:.\bsw\rte/sc_joystick.h **** 
  46:.\bsw\rte/sc_joystick.h **** 
  47:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
  48:.\bsw\rte/sc_joystick.h **** /* The signal configuration API block																				*/
  49:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
  50:.\bsw\rte/sc_joystick.h **** 
  51:.\bsw\rte/sc_joystick.h **** /**
  52:.\bsw\rte/sc_joystick.h ****  * Instances of the struct SC_JOYSTICK_cfg_t represent the signal object configuration.
  53:.\bsw\rte/sc_joystick.h ****  */
  54:.\bsw\rte/sc_joystick.h **** struct SC_JOYSTICK_cfg_s
  55:.\bsw\rte/sc_joystick.h **** {
  56:.\bsw\rte/sc_joystick.h ****     /**
  57:.\bsw\rte/sc_joystick.h ****      * Function pointer to the input driver
  58:.\bsw\rte/sc_joystick.h ****      */
  59:.\bsw\rte/sc_joystick.h ****     SC_JOYSTICK_driverIn_t const inDriver;
  60:.\bsw\rte/sc_joystick.h **** 
  61:.\bsw\rte/sc_joystick.h ****     /**
  62:.\bsw\rte/sc_joystick.h ****      * Function pointer to the output driver table
  63:.\bsw\rte/sc_joystick.h ****      */
  64:.\bsw\rte/sc_joystick.h ****    SC_JOYSTICK_driverOut_t const outDriver;
  65:.\bsw\rte/sc_joystick.h ****    
  66:.\bsw\rte/sc_joystick.h ****     /**
  67:.\bsw\rte/sc_joystick.h ****      * Event onUpdate
  68:.\bsw\rte/sc_joystick.h ****      */
  69:.\bsw\rte/sc_joystick.h ****     EventMaskType const evOnUpdate;
  70:.\bsw\rte/sc_joystick.h ****     
  71:.\bsw\rte/sc_joystick.h ****     
  72:.\bsw\rte/sc_joystick.h ****     /**
  73:.\bsw\rte/sc_joystick.h ****      * Event onError
  74:.\bsw\rte/sc_joystick.h ****      */
  75:.\bsw\rte/sc_joystick.h ****     EventMaskType const evOnError;
  76:.\bsw\rte/sc_joystick.h ****     
  77:.\bsw\rte/sc_joystick.h ****     /**
  78:.\bsw\rte/sc_joystick.h ****      * Task Count onUpdate
  79:.\bsw\rte/sc_joystick.h ****      */
  80:.\bsw\rte/sc_joystick.h ****     size_t const onUpdateTaskCount;
  81:.\bsw\rte/sc_joystick.h **** 
  82:.\bsw\rte/sc_joystick.h ****     /**
  83:.\bsw\rte/sc_joystick.h ****      * Task List onUpdate
  84:.\bsw\rte/sc_joystick.h ****      */
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 4


  85:.\bsw\rte/sc_joystick.h ****     TaskTypeArray* const onUpdateTasks;
  86:.\bsw\rte/sc_joystick.h ****     
  87:.\bsw\rte/sc_joystick.h ****     /**
  88:.\bsw\rte/sc_joystick.h ****      * Task Count onError
  89:.\bsw\rte/sc_joystick.h ****      */
  90:.\bsw\rte/sc_joystick.h ****     size_t const onErrorTaskCount;
  91:.\bsw\rte/sc_joystick.h **** 
  92:.\bsw\rte/sc_joystick.h ****     /**
  93:.\bsw\rte/sc_joystick.h ****      * Task List onError
  94:.\bsw\rte/sc_joystick.h ****      */
  95:.\bsw\rte/sc_joystick.h ****     TaskTypeArray* const onErrorTasks;
  96:.\bsw\rte/sc_joystick.h **** 	
  97:.\bsw\rte/sc_joystick.h **** 	
  98:.\bsw\rte/sc_joystick.h **** 	/**
  99:.\bsw\rte/sc_joystick.h **** 	 * Ressourse is active? We need an additional boolean as a ressource value 0 is valid.
 100:.\bsw\rte/sc_joystick.h **** 	 */
 101:.\bsw\rte/sc_joystick.h **** 	 boolean_t const resourceActive;
 102:.\bsw\rte/sc_joystick.h **** 	 
 103:.\bsw\rte/sc_joystick.h **** 	/**
 104:.\bsw\rte/sc_joystick.h **** 	 * Ressourse 
 105:.\bsw\rte/sc_joystick.h **** 	 */
 106:.\bsw\rte/sc_joystick.h **** 	 ResourceType const resource;
 107:.\bsw\rte/sc_joystick.h **** 
 108:.\bsw\rte/sc_joystick.h **** };                                                                                                 
 109:.\bsw\rte/sc_joystick.h **** typedef const struct SC_JOYSTICK_cfg_s SC_JOYSTICK_cfg_t;
 110:.\bsw\rte/sc_joystick.h ****                               
 111:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
 112:.\bsw\rte/sc_joystick.h **** /* The data interface block																							*/
 113:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
 114:.\bsw\rte/sc_joystick.h **** 
 115:.\bsw\rte/sc_joystick.h ****                                                                                                    
 116:.\bsw\rte/sc_joystick.h **** 							  
 117:.\bsw\rte/sc_joystick.h **** /**
 118:.\bsw\rte/sc_joystick.h ****  * Instances of the struct SC_JOYSTICK_t represent the signal objects.
 119:.\bsw\rte/sc_joystick.h ****  * A signal object contains the current application value 'value' as well as relevant meta data.
 120:.\bsw\rte/sc_joystick.h ****  */
 121:.\bsw\rte/sc_joystick.h **** struct SC_JOYSTICK_s
 122:.\bsw\rte/sc_joystick.h **** {                                                                                                  
 123:.\bsw\rte/sc_joystick.h **** 
 124:.\bsw\rte/sc_joystick.h **** 	/**
 125:.\bsw\rte/sc_joystick.h **** 	 * Data buffer for the application value
 126:.\bsw\rte/sc_joystick.h **** 	 */
 127:.\bsw\rte/sc_joystick.h ****     SC_JOYSTICK_data_t value;
 128:.\bsw\rte/sc_joystick.h **** 
 129:.\bsw\rte/sc_joystick.h ****     /**
 130:.\bsw\rte/sc_joystick.h ****      * Current signal status
 131:.\bsw\rte/sc_joystick.h ****      */
 132:.\bsw\rte/sc_joystick.h ****     RTE_signalStatus_t status;
 133:.\bsw\rte/sc_joystick.h **** 
 134:.\bsw\rte/sc_joystick.h ****     /**
 135:.\bsw\rte/sc_joystick.h ****      * Current age of the signal (in calling cycles)
 136:.\bsw\rte/sc_joystick.h ****      */
 137:.\bsw\rte/sc_joystick.h ****     uint32_t age;
 138:.\bsw\rte/sc_joystick.h **** 
 139:.\bsw\rte/sc_joystick.h ****     /**
 140:.\bsw\rte/sc_joystick.h ****      * Pointer to the signal configuration
 141:.\bsw\rte/sc_joystick.h ****      */
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 5


 142:.\bsw\rte/sc_joystick.h **** 	const SC_JOYSTICK_cfg_t * const    pSigCfg;
 143:.\bsw\rte/sc_joystick.h **** 
 144:.\bsw\rte/sc_joystick.h **** };                                                                                                 
 145:.\bsw\rte/sc_joystick.h **** typedef struct SC_JOYSTICK_s SC_JOYSTICK_t;
 146:.\bsw\rte/sc_joystick.h **** 
 147:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
 148:.\bsw\rte/sc_joystick.h **** /* Signal initialisation   																							*/
 149:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
 150:.\bsw\rte/sc_joystick.h **** 
 151:.\bsw\rte/sc_joystick.h **** /**
 152:.\bsw\rte/sc_joystick.h ****  * Initializes a signal instance with a passed init value.
 153:.\bsw\rte/sc_joystick.h ****  * Depending on the configured conversion or scaling function the raw_value will be calculated.
 154:.\bsw\rte/sc_joystick.h ****  * Signal status will change from RTE_SIGNALSTATUS_STARTUP to RTE_SIGNALSTATUS_INITIALIZED.
 155:.\bsw\rte/sc_joystick.h ****  *
 156:.\bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object which will be initialised
 157:.\bsw\rte/sc_joystick.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 158:.\bsw\rte/sc_joystick.h ****  *
 159:.\bsw\rte/sc_joystick.h ****  **/
 160:.\bsw\rte/sc_joystick.h **** inline RC_t RTE_SC_JOYSTICK_init( SC_JOYSTICK_t * const signal )
 161:.\bsw\rte/sc_joystick.h **** {                                                                                                  
 162:.\bsw\rte/sc_joystick.h **** 
 163:.\bsw\rte/sc_joystick.h ****    RC_t ret = RC_SUCCESS;
 164:.\bsw\rte/sc_joystick.h **** 
 165:.\bsw\rte/sc_joystick.h ****    //Set value and raw value
 166:.\bsw\rte/sc_joystick.h ****    signal->value  = SC_JOYSTICK_INIT_DATA;
 167:.\bsw\rte/sc_joystick.h ****    signal->age    = 0;
 168:.\bsw\rte/sc_joystick.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 169:.\bsw\rte/sc_joystick.h **** 
 170:.\bsw\rte/sc_joystick.h ****    return ret;
 171:.\bsw\rte/sc_joystick.h **** }
 172:.\bsw\rte/sc_joystick.h **** 
 173:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
 174:.\bsw\rte/sc_joystick.h **** /* Status and timeout control																						*/
 175:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
 176:.\bsw\rte/sc_joystick.h **** 
 177:.\bsw\rte/sc_joystick.h **** /**
 178:.\bsw\rte/sc_joystick.h ****  *  Returns the current signal status of the passed signal instance.
 179:.\bsw\rte/sc_joystick.h ****  *
 180:.\bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 181:.\bsw\rte/sc_joystick.h ****  * @return  sig_status_t: The current signal status
 182:.\bsw\rte/sc_joystick.h ****  *
 183:.\bsw\rte/sc_joystick.h ****  **/
 184:.\bsw\rte/sc_joystick.h **** inline RTE_signalStatus_t RTE_SC_JOYSTICK_getStatus( const SC_JOYSTICK_t * const signal )
 185:.\bsw\rte/sc_joystick.h **** {
 186:.\bsw\rte/sc_joystick.h ****    return signal->status;
 187:.\bsw\rte/sc_joystick.h **** }
 188:.\bsw\rte/sc_joystick.h **** 
 189:.\bsw\rte/sc_joystick.h **** 
 190:.\bsw\rte/sc_joystick.h **** /**
 191:.\bsw\rte/sc_joystick.h ****  *  Sets a new signal status of the passed signal instance by passing the new status.
 192:.\bsw\rte/sc_joystick.h ****  *
 193:.\bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 194:.\bsw\rte/sc_joystick.h ****  * @param  const sig_status_t status: New signal status
 195:.\bsw\rte/sc_joystick.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 196:.\bsw\rte/sc_joystick.h ****  *
 197:.\bsw\rte/sc_joystick.h ****  */
 198:.\bsw\rte/sc_joystick.h **** inline RC_t RTE_SC_JOYSTICK_setStatus( SC_JOYSTICK_t * const signal, const RTE_signalStatus_t statu
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 6


 199:.\bsw\rte/sc_joystick.h **** {
 200:.\bsw\rte/sc_joystick.h ****    signal->status = status;
 201:.\bsw\rte/sc_joystick.h ****    size_t taskNum=0;
 202:.\bsw\rte/sc_joystick.h ****    
 203:.\bsw\rte/sc_joystick.h ****    //Fire error events in case of invalid state
 204:.\bsw\rte/sc_joystick.h ****    if (signal->status == RTE_SIGNALSTATUS_INVALID)
 205:.\bsw\rte/sc_joystick.h ****    {
 206:.\bsw\rte/sc_joystick.h **** 	    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 207:.\bsw\rte/sc_joystick.h **** 		TaskTypeArray* pTaskArray = signal->pSigCfg->onErrorTasks;
 208:.\bsw\rte/sc_joystick.h **** 
 209:.\bsw\rte/sc_joystick.h **** 		if (0 != signal->pSigCfg->evOnError && NULL != pTaskArray){
 210:.\bsw\rte/sc_joystick.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 211:.\bsw\rte/sc_joystick.h **** 				TaskType task = (*pTaskArray)[taskNum];
 212:.\bsw\rte/sc_joystick.h **** 				SetEvent( task, signal->pSigCfg->evOnError);
 213:.\bsw\rte/sc_joystick.h **** 			}
 214:.\bsw\rte/sc_joystick.h **** 		}
 215:.\bsw\rte/sc_joystick.h ****    }
 216:.\bsw\rte/sc_joystick.h ****    
 217:.\bsw\rte/sc_joystick.h ****    return RC_SUCCESS;
 218:.\bsw\rte/sc_joystick.h **** }
 219:.\bsw\rte/sc_joystick.h **** 
 220:.\bsw\rte/sc_joystick.h **** 
 221:.\bsw\rte/sc_joystick.h **** /**
 222:.\bsw\rte/sc_joystick.h ****  * Returns the count of refreshing trials (refresh, set or set_raw) that failed.
 223:.\bsw\rte/sc_joystick.h ****  * Prerquisite: The signal is refreshed cyclically
 224:.\bsw\rte/sc_joystick.h ****  *
 225:.\bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 226:.\bsw\rte/sc_joystick.h ****  * @return uint32_t: Number of cycles since the signal has been updated for the last time
 227:.\bsw\rte/sc_joystick.h ****  */
 228:.\bsw\rte/sc_joystick.h **** inline uint32_t RTE_SC_JOYSTICK_getAge( const SC_JOYSTICK_t * const signal )
 229:.\bsw\rte/sc_joystick.h **** {
 230:.\bsw\rte/sc_joystick.h ****    return signal->age;
 231:.\bsw\rte/sc_joystick.h **** }
 232:.\bsw\rte/sc_joystick.h **** 
 233:.\bsw\rte/sc_joystick.h **** /**
 234:.\bsw\rte/sc_joystick.h ****  * Should be called by application or driver if no new value can be provided.
 235:.\bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 236:.\bsw\rte/sc_joystick.h ****  * @param uint32_t increment: incrementvalue, typically in [ms]
 237:.\bsw\rte/sc_joystick.h ****  * @return void
 238:.\bsw\rte/sc_joystick.h ****  */
 239:.\bsw\rte/sc_joystick.h **** inline void RTE_SC_JOYSTICK_incAge(  SC_JOYSTICK_t * const signal , uint32_t increment)
 240:.\bsw\rte/sc_joystick.h **** {
 241:.\bsw\rte/sc_joystick.h **** 	   //Hack....
 242:.\bsw\rte/sc_joystick.h **** 	   if ( 0xFFFF0000 > (signal->age + increment) )
 243:.\bsw\rte/sc_joystick.h **** 	   {
 244:.\bsw\rte/sc_joystick.h **** 	      signal->age += increment;
 245:.\bsw\rte/sc_joystick.h **** 	   }
 246:.\bsw\rte/sc_joystick.h **** }
 247:.\bsw\rte/sc_joystick.h **** 
 248:.\bsw\rte/sc_joystick.h **** 
 249:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
 250:.\bsw\rte/sc_joystick.h **** /* Application Data read/write Interface																			*/
 251:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
 252:.\bsw\rte/sc_joystick.h **** 
 253:.\bsw\rte/sc_joystick.h **** /**
 254:.\bsw\rte/sc_joystick.h ****  * Returns the current application value as pointer to the signal payload.
 255:.\bsw\rte/sc_joystick.h ****  * Careful: This is not threadsafe!!!
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 7


 256:.\bsw\rte/sc_joystick.h ****  *
 257:.\bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 258:.\bsw\rte/sc_joystick.h ****  * @return sc_joystick_data_t*: pointer to the current value of the application data buffer
 259:.\bsw\rte/sc_joystick.h ****  *
 260:.\bsw\rte/sc_joystick.h ****  **/
 261:.\bsw\rte/sc_joystick.h **** inline SC_JOYSTICK_data_t* RTE_SC_JOYSTICK_getPtr( SC_JOYSTICK_t * const signal )
 262:.\bsw\rte/sc_joystick.h **** {               
 263:.\bsw\rte/sc_joystick.h ****    //Todo: Critical region cannot be protected using return values																						
 264:.\bsw\rte/sc_joystick.h ****    return &(signal->value);                                                                        
 265:.\bsw\rte/sc_joystick.h **** }
 266:.\bsw\rte/sc_joystick.h **** 
 267:.\bsw\rte/sc_joystick.h **** /**
 268:.\bsw\rte/sc_joystick.h ****  * Returns the current application value of the passed signal instance.
 269:.\bsw\rte/sc_joystick.h ****  *
 270:.\bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 271:.\bsw\rte/sc_joystick.h ****  * @return sc_joystick_data_t: current value of the application data buffer
 272:.\bsw\rte/sc_joystick.h ****  *
 273:.\bsw\rte/sc_joystick.h ****  **/
 274:.\bsw\rte/sc_joystick.h **** inline SC_JOYSTICK_data_t RTE_SC_JOYSTICK_get( const SC_JOYSTICK_t * const signal )
 275:.\bsw\rte/sc_joystick.h **** {               
 276:.\bsw\rte/sc_joystick.h ****    //Todo: Critical region cannot be protected using return values																						
 277:.\bsw\rte/sc_joystick.h ****    return signal->value;                                                                           
 278:.\bsw\rte/sc_joystick.h **** }                                                                                                  
 279:.\bsw\rte/sc_joystick.h ****                                                                                                    
 280:.\bsw\rte/sc_joystick.h **** /**
 281:.\bsw\rte/sc_joystick.h ****  * Returns the current application value of the passed signal instance threadsafe.
 282:.\bsw\rte/sc_joystick.h ****  *
 283:.\bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 284:.\bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_data_t* data: Pointer to the return data Pointer to the signal object
 285:.\bsw\rte/sc_joystick.h ****  * @return RC_SUCCESS
 286:.\bsw\rte/sc_joystick.h ****  *
 287:.\bsw\rte/sc_joystick.h ****  **/
 288:.\bsw\rte/sc_joystick.h **** inline RC_t RTE_SC_JOYSTICK_getThreadSafe( const SC_JOYSTICK_t * const signal, SC_JOYSTICK_data_t *
 289:.\bsw\rte/sc_joystick.h **** {    
 290:.\bsw\rte/sc_joystick.h ****    if (TRUE == signal->pSigCfg->resourceActive) GetResource(signal->pSigCfg->resource);
 291:.\bsw\rte/sc_joystick.h ****    *data = signal->value;
 292:.\bsw\rte/sc_joystick.h ****    if (TRUE == signal->pSigCfg->resourceActive) ReleaseResource(signal->pSigCfg->resource);        
 293:.\bsw\rte/sc_joystick.h **** 
 294:.\bsw\rte/sc_joystick.h ****    return RC_SUCCESS;                                                                   
 295:.\bsw\rte/sc_joystick.h ****    
 296:.\bsw\rte/sc_joystick.h **** }                                                                                                  
 297:.\bsw\rte/sc_joystick.h ****                                                                                                    
 298:.\bsw\rte/sc_joystick.h **** /**
 299:.\bsw\rte/sc_joystick.h ****  * Sets a new application value to the passed signal instance by passing the new value.
 300:.\bsw\rte/sc_joystick.h ****  * The corresponding driver raw value will be calculated immediately by using the default conversio
 301:.\bsw\rte/sc_joystick.h ****  * signal specific scaling function.
 302:.\bsw\rte/sc_joystick.h ****  * The signal age will be set to 0 and the new status will be 'RTE_SIGNALSTATUS_VALID'.
 303:.\bsw\rte/sc_joystick.h ****  *
 304:.\bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 305:.\bsw\rte/sc_joystick.h ****  * @param  sc_joystick_data_t const value: value for the application data buffer
 306:.\bsw\rte/sc_joystick.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 307:.\bsw\rte/sc_joystick.h ****  *
 308:.\bsw\rte/sc_joystick.h ****  **/
 309:.\bsw\rte/sc_joystick.h **** inline RC_t RTE_SC_JOYSTICK_set(SC_JOYSTICK_t * const signal, const SC_JOYSTICK_data_t value  )
 310:.\bsw\rte/sc_joystick.h **** {
 311:.\bsw\rte/sc_joystick.h **** 
 312:.\bsw\rte/sc_joystick.h ****    RC_t ret = RC_SUCCESS;
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 8


 313:.\bsw\rte/sc_joystick.h ****    size_t taskNum=0;
 314:.\bsw\rte/sc_joystick.h **** 
 315:.\bsw\rte/sc_joystick.h **** 
 316:.\bsw\rte/sc_joystick.h ****    if (TRUE == signal->pSigCfg->resourceActive) GetResource(signal->pSigCfg->resource);
 317:.\bsw\rte/sc_joystick.h ****    signal->value  = value;
 318:.\bsw\rte/sc_joystick.h ****    signal->age    = 0;
 319:.\bsw\rte/sc_joystick.h ****    signal->status = RTE_SIGNALSTATUS_VALID;
 320:.\bsw\rte/sc_joystick.h ****    if (TRUE == signal->pSigCfg->resourceActive) ReleaseResource(signal->pSigCfg->resource);
 321:.\bsw\rte/sc_joystick.h **** 
 322:.\bsw\rte/sc_joystick.h ****    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 323:.\bsw\rte/sc_joystick.h ****    TaskTypeArray* pTaskArray = signal->pSigCfg->onUpdateTasks;
 324:.\bsw\rte/sc_joystick.h **** 
 325:.\bsw\rte/sc_joystick.h ****    if (0 != signal->pSigCfg->evOnUpdate && NULL != pTaskArray){
 326:.\bsw\rte/sc_joystick.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 327:.\bsw\rte/sc_joystick.h **** 		  
 328:.\bsw\rte/sc_joystick.h ****           TaskType task = (*pTaskArray)[taskNum];
 329:.\bsw\rte/sc_joystick.h **** 	      SetEvent( task, signal->pSigCfg->evOnUpdate);
 330:.\bsw\rte/sc_joystick.h ****       }
 331:.\bsw\rte/sc_joystick.h ****    }
 332:.\bsw\rte/sc_joystick.h **** 
 333:.\bsw\rte/sc_joystick.h ****    return ret;
 334:.\bsw\rte/sc_joystick.h **** }                                                                                                  
 335:.\bsw\rte/sc_joystick.h ****                                                                                                    
 336:.\bsw\rte/sc_joystick.h ****                                                                                                    
 337:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
 338:.\bsw\rte/sc_joystick.h **** /* Call functions to the connected drivers																			*/
 339:.\bsw\rte/sc_joystick.h **** /**************************************************************************************************
 340:.\bsw\rte/sc_joystick.h **** 
 341:.\bsw\rte/sc_joystick.h ****                                                                                                    
 342:.\bsw\rte/sc_joystick.h **** /**
 343:.\bsw\rte/sc_joystick.h ****  *  Calls the connected driver interface to get a new value.
 344:.\bsw\rte/sc_joystick.h ****  *
 345:.\bsw\rte/sc_joystick.h ****  * @param SC_JOYSTICK_t * const signal: Pointer to the signal object
 346:.\bsw\rte/sc_joystick.h ****  * @return  RC_t: Return value of the driver call
 347:.\bsw\rte/sc_joystick.h ****  *
 348:.\bsw\rte/sc_joystick.h ****  */
 349:.\bsw\rte/sc_joystick.h **** inline RC_t RTE_SC_JOYSTICK_pullPort( SC_JOYSTICK_t * const signal )
 350:.\bsw\rte/sc_joystick.h **** {                                                                                                  
 351:.\bsw\rte/sc_joystick.h ****    RC_t ret = RC_SUCCESS;
 352:.\bsw\rte/sc_joystick.h **** 
 353:.\bsw\rte/sc_joystick.h ****                                                                                                    
 354:.\bsw\rte/sc_joystick.h ****    if ( NULL != signal->pSigCfg->inDriver )
  44              		.loc 2 354 0
  45 0004 224B     		ldr	r3, .L12
  46 0006 9B68     		ldr	r3, [r3, #8]
  47 0008 1A68     		ldr	r2, [r3]
  48 000a 002A     		cmp	r2, #0
  49 000c 3BD0     		beq	.L2
  50              	.LBB51:
 355:.\bsw\rte/sc_joystick.h ****    {
 356:.\bsw\rte/sc_joystick.h **** 	  SC_JOYSTICK_data_t value = signal->value;
  51              		.loc 2 356 0
  52 000e 204A     		ldr	r2, .L12
  53 0010 1288     		ldrh	r2, [r2]
  54 0012 02A8     		add	r0, sp, #8
  55 0014 20F8082D 		strh	r2, [r0, #-8]!	@ movhi
 357:.\bsw\rte/sc_joystick.h ****       ret = signal->pSigCfg->inDriver(&value);
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 9


  56              		.loc 2 357 0
  57 0018 1B68     		ldr	r3, [r3]
  58 001a 9847     		blx	r3
  59              	.LVL2:
 358:.\bsw\rte/sc_joystick.h ****                                                                                                    
 359:.\bsw\rte/sc_joystick.h ****       if ( ret == RC_SUCCESS )                                                                     
  60              		.loc 2 359 0
  61 001c E8B9     		cbnz	r0, .L3
  62              	.LVL3:
  63 001e BDF80010 		ldrh	r1, [sp]
  64 0022 ADF80410 		strh	r1, [sp, #4]	@ movhi
  65              	.LVL4:
  66              	.LBB52:
  67              	.LBB53:
 316:.\bsw\rte/sc_joystick.h ****    signal->value  = value;
  68              		.loc 2 316 0
  69 0026 1A4B     		ldr	r3, .L12
  70 0028 9A68     		ldr	r2, [r3, #8]
 317:.\bsw\rte/sc_joystick.h ****    signal->age    = 0;
  71              		.loc 2 317 0
  72 002a 1980     		strh	r1, [r3]	@ movhi
 318:.\bsw\rte/sc_joystick.h ****    signal->status = RTE_SIGNALSTATUS_VALID;
  73              		.loc 2 318 0
  74 002c 0021     		movs	r1, #0
  75 002e 5960     		str	r1, [r3, #4]
 319:.\bsw\rte/sc_joystick.h ****    if (TRUE == signal->pSigCfg->resourceActive) ReleaseResource(signal->pSigCfg->resource);
  76              		.loc 2 319 0
  77 0030 0221     		movs	r1, #2
  78 0032 9970     		strb	r1, [r3, #2]
 323:.\bsw\rte/sc_joystick.h **** 
  79              		.loc 2 323 0
  80 0034 5569     		ldr	r5, [r2, #20]
  81              	.LVL5:
 325:.\bsw\rte/sc_joystick.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
  82              		.loc 2 325 0
  83 0036 9368     		ldr	r3, [r2, #8]
  84 0038 2BB3     		cbz	r3, .L2
  85 003a 3DB9     		cbnz	r5, .L9
  86 003c 23E0     		b	.L2
  87              	.LVL6:
  88              	.L6:
  89              	.LBB54:
 329:.\bsw\rte/sc_joystick.h ****       }
  90              		.loc 2 329 0
  91 003e 9968     		ldr	r1, [r3, #8]
  92 0040 55F82400 		ldr	r0, [r5, r4, lsl #2]
  93 0044 FFF7FEFF 		bl	EE_oo_SetEvent
  94              	.LVL7:
  95              	.LBE54:
 326:.\bsw\rte/sc_joystick.h **** 		  
  96              		.loc 2 326 0
  97 0048 0134     		adds	r4, r4, #1
  98              	.LVL8:
  99 004a 00E0     		b	.L5
 100              	.LVL9:
 101              	.L9:
 325:.\bsw\rte/sc_joystick.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 10


 102              		.loc 2 325 0
 103 004c 0024     		movs	r4, #0
 104              	.LVL10:
 105              	.L5:
 326:.\bsw\rte/sc_joystick.h **** 		  
 106              		.loc 2 326 0
 107 004e 104B     		ldr	r3, .L12
 108 0050 9B68     		ldr	r3, [r3, #8]
 109 0052 1A69     		ldr	r2, [r3, #16]
 110 0054 9442     		cmp	r4, r2
 111 0056 F2D3     		bcc	.L6
 112 0058 15E0     		b	.L2
 113              	.LVL11:
 114              	.L3:
 115              	.LBE53:
 116              	.LBE52:
 117              	.LBB55:
 118              	.LBB56:
 200:.\bsw\rte/sc_joystick.h ****    size_t taskNum=0;
 119              		.loc 2 200 0
 120 005a 0D4B     		ldr	r3, .L12
 121 005c 0322     		movs	r2, #3
 122 005e 9A70     		strb	r2, [r3, #2]
 123              	.LVL12:
 124              	.LBB57:
 207:.\bsw\rte/sc_joystick.h **** 
 125              		.loc 2 207 0
 126 0060 9B68     		ldr	r3, [r3, #8]
 127 0062 DD69     		ldr	r5, [r3, #28]
 128              	.LVL13:
 209:.\bsw\rte/sc_joystick.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 129              		.loc 2 209 0
 130 0064 DB68     		ldr	r3, [r3, #12]
 131 0066 73B1     		cbz	r3, .L2
 132 0068 3DB9     		cbnz	r5, .L10
 133 006a 0CE0     		b	.L2
 134              	.LVL14:
 135              	.L8:
 136              	.LBB58:
 212:.\bsw\rte/sc_joystick.h **** 			}
 137              		.loc 2 212 0
 138 006c D968     		ldr	r1, [r3, #12]
 139 006e 55F82400 		ldr	r0, [r5, r4, lsl #2]
 140 0072 FFF7FEFF 		bl	EE_oo_SetEvent
 141              	.LVL15:
 142              	.LBE58:
 210:.\bsw\rte/sc_joystick.h **** 				TaskType task = (*pTaskArray)[taskNum];
 143              		.loc 2 210 0
 144 0076 0134     		adds	r4, r4, #1
 145              	.LVL16:
 146 0078 00E0     		b	.L7
 147              	.LVL17:
 148              	.L10:
 209:.\bsw\rte/sc_joystick.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 149              		.loc 2 209 0
 150 007a 0024     		movs	r4, #0
 151              	.LVL18:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 11


 152              	.L7:
 210:.\bsw\rte/sc_joystick.h **** 				TaskType task = (*pTaskArray)[taskNum];
 153              		.loc 2 210 0
 154 007c 044B     		ldr	r3, .L12
 155 007e 9B68     		ldr	r3, [r3, #8]
 156 0080 9A69     		ldr	r2, [r3, #24]
 157 0082 9442     		cmp	r4, r2
 158 0084 F2D3     		bcc	.L8
 159              	.LVL19:
 160              	.L2:
 161              	.LBE57:
 162              	.LBE56:
 163              	.LBE55:
 164              	.LBE51:
 165              	.LBE50:
 166              	.LBE49:
  45:asw/swc_gaspedal.c **** 	
  46:asw/swc_gaspedal.c **** 	/* USER CODE START GASPEDAL_readJoystick_run */
  47:asw/swc_gaspedal.c ****     ev =0;
  48:asw/swc_gaspedal.c ****     RTE_SC_JOYSTICK_pullPort(&SO_JOYSTICK_signal);
  49:asw/swc_gaspedal.c ****     
  50:asw/swc_gaspedal.c ****     WD_Alive(WD_RUN_READJOYSTICK);
 167              		.loc 1 50 0
 168 0086 0020     		movs	r0, #0
 169 0088 FFF7FEFF 		bl	WD_Alive
 170              	.LVL20:
  51:asw/swc_gaspedal.c ****     /* USER CODE END GASPEDAL_readJoystick_run */
  52:asw/swc_gaspedal.c **** }
 171              		.loc 1 52 0
 172 008c 03B0     		add	sp, sp, #12
 173              		.cfi_def_cfa_offset 12
 174              		@ sp needed
 175 008e 30BD     		pop	{r4, r5, pc}
 176              	.L13:
 177              		.align	2
 178              	.L12:
 179 0090 00000000 		.word	SO_JOYSTICK_signal
 180              		.cfi_endproc
 181              	.LFE180:
 182              		.size	GASPEDAL_readJoystick_run, .-GASPEDAL_readJoystick_run
 183              		.section	.text.GASPEDAL_calcControl_run,"ax",%progbits
 184              		.align	2
 185              		.global	GASPEDAL_calcControl_run
 186              		.thumb
 187              		.thumb_func
 188              		.type	GASPEDAL_calcControl_run, %function
 189              	GASPEDAL_calcControl_run:
 190              	.LFB181:
  53:asw/swc_gaspedal.c **** 
  54:asw/swc_gaspedal.c **** /*
  55:asw/swc_gaspedal.c ****  * component: swc_GasPedal
  56:asw/swc_gaspedal.c ****  * cycletime: 0
  57:asw/swc_gaspedal.c ****  * description: Runnable that check the joystick signal and update speed signal value
  58:asw/swc_gaspedal.c ****  * events: ev_joystick_onData|ev_breakpedal_onData|ev_screen_onData
  59:asw/swc_gaspedal.c ****  * name: GASPEDAL_calcControl_run
  60:asw/swc_gaspedal.c ****  * shortname: calcControl
  61:asw/swc_gaspedal.c ****  * signalIN: so_joystick|so_breakPedal
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 12


  62:asw/swc_gaspedal.c ****  * signalOUT: so_speed
  63:asw/swc_gaspedal.c ****  * task: tsk_control
  64:asw/swc_gaspedal.c ****  */
  65:asw/swc_gaspedal.c **** void GASPEDAL_calcControl_run(RTE_event ev){
 191              		.loc 1 65 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 16
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              	.LVL21:
  66:asw/swc_gaspedal.c **** 	
  67:asw/swc_gaspedal.c **** 	/* USER CODE START GASPEDAL_calcControl_run */
  68:asw/swc_gaspedal.c ****     if ((ev & ev_joystick_onData) | (ev & ev_breakpedal_onData)){
 196              		.loc 1 68 0
 197 0000 10F0060F 		tst	r0, #6
 198 0004 34D0     		beq	.L23
  65:asw/swc_gaspedal.c **** 	
 199              		.loc 1 65 0
 200 0006 30B5     		push	{r4, r5, lr}
 201              		.cfi_def_cfa_offset 12
 202              		.cfi_offset 4, -12
 203              		.cfi_offset 5, -8
 204              		.cfi_offset 14, -4
 205 0008 85B0     		sub	sp, sp, #20
 206              		.cfi_def_cfa_offset 32
 207              	.LBB59:
  69:asw/swc_gaspedal.c ****         
  70:asw/swc_gaspedal.c ****         SC_SPEED_data_t speedSignal = SC_SPEED_INIT_DATA;
 208              		.loc 1 70 0
 209 000a 0023     		movs	r3, #0
 210 000c 1946     		mov	r1, r3
 211              	.LVL22:
  71:asw/swc_gaspedal.c ****         SC_JOYSTICK_data_t joystickSignal = SC_JOYSTICK_INIT_DATA;
 212              		.loc 1 71 0
 213 000e 8DF80430 		strb	r3, [sp, #4]
 214              	.LVL23:
 215              	.LBB60:
 216              	.LBB61:
 186:.\bsw\rte/sc_joystick.h **** }
 217              		.loc 2 186 0
 218 0012 184B     		ldr	r3, .L24
 219 0014 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 220              	.LVL24:
 221              	.LBE61:
 222              	.LBE60:
  72:asw/swc_gaspedal.c ****         
  73:asw/swc_gaspedal.c **** 
  74:asw/swc_gaspedal.c ****         if (RTE_SC_JOYSTICK_getStatus(&SO_JOYSTICK_signal) ==RTE_SIGNALSTATUS_VALID){
 223              		.loc 1 74 0
 224 0016 022B     		cmp	r3, #2
 225 0018 07D1     		bne	.L16
 226              	.LVL25:
 227              	.LBB62:
 228              	.LBB63:
 277:.\bsw\rte/sc_joystick.h **** }                                                                                                  
 229              		.loc 2 277 0
 230 001a 164B     		ldr	r3, .L24
 231 001c 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 13


 232 001e ADF80C30 		strh	r3, [sp, #12]	@ movhi
 233 0022 ADF80830 		strh	r3, [sp, #8]	@ movhi
 234              	.LVL26:
 235              	.LBE63:
 236              	.LBE62:
  75:asw/swc_gaspedal.c ****             joystickSignal.xPos = RTE_SC_JOYSTICK_get(&SO_JOYSTICK_signal).xPos;
 237              		.loc 1 75 0
 238 0026 8DF80430 		strb	r3, [sp, #4]
 239              	.L16:
  76:asw/swc_gaspedal.c ****         }
  77:asw/swc_gaspedal.c ****         
  78:asw/swc_gaspedal.c ****             //Set the X value of the joystick to the speed data based on the condition given.
  79:asw/swc_gaspedal.c ****         if(joystickSignal.xPos > JOYSTICK_DRIFTX)
 240              		.loc 1 79 0
 241 002a 9DF90430 		ldrsb	r3, [sp, #4]
 242 002e 072B     		cmp	r3, #7
 243 0030 00DD     		ble	.L17
  80:asw/swc_gaspedal.c ****         {
  81:asw/swc_gaspedal.c ****             speedSignal.speedValue = 2 * (joystickSignal.xPos);
 244              		.loc 1 81 0
 245 0032 5900     		lsls	r1, r3, #1
 246              	.L17:
 247              	.LVL27:
 248              	.LBB64:
 249              	.LBB65:
 250              		.file 3 ".\\bsw\\rte/sc_speed.h"
   1:.\bsw\rte/sc_speed.h **** 
   2:.\bsw\rte/sc_speed.h **** 
   3:.\bsw\rte/sc_speed.h **** /**
   4:.\bsw\rte/sc_speed.h ****  *  file    SC_SPEED_signal.h
   5:.\bsw\rte/sc_speed.h ****  *
   6:.\bsw\rte/sc_speed.h ****  *  brief   signal base class for signal sc_speed
   7:.\bsw\rte/sc_speed.h ****  *
   8:.\bsw\rte/sc_speed.h ****  *  author  Autogenerated, Peter Fromm       <peter.fromm@h-da.de>
   9:.\bsw\rte/sc_speed.h ****  *
  10:.\bsw\rte/sc_speed.h ****  * description: Speed signal class
  11:.\bsw\rte/sc_speed.h ****  * name: sc_speed
  12:.\bsw\rte/sc_speed.h ****  * shortname: speed
  13:.\bsw\rte/sc_speed.h ****  *
  14:.\bsw\rte/sc_speed.h ****  */
  15:.\bsw\rte/sc_speed.h **** 
  16:.\bsw\rte/sc_speed.h **** 
  17:.\bsw\rte/sc_speed.h **** 
  18:.\bsw\rte/sc_speed.h **** #ifndef SC_SPEED_SIGNAL_H_INCLUDED
  19:.\bsw\rte/sc_speed.h **** #define SC_SPEED_SIGNAL_H_INCLUDED
  20:.\bsw\rte/sc_speed.h **** 
  21:.\bsw\rte/sc_speed.h **** /*================================================[ public includes  ]=============================
  22:.\bsw\rte/sc_speed.h **** #include "global.h"
  23:.\bsw\rte/sc_speed.h **** #include "project.h"
  24:.\bsw\rte/sc_speed.h **** #include "rte.h"
  25:.\bsw\rte/sc_speed.h **** #include "rte_types.h"
  26:.\bsw\rte/sc_speed.h **** 
  27:.\bsw\rte/sc_speed.h **** #include "sc_speed_type.h"
  28:.\bsw\rte/sc_speed.h **** 
  29:.\bsw\rte/sc_speed.h **** 
  30:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
  31:.\bsw\rte/sc_speed.h **** /* The driver API block																						*/
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 14


  32:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
  33:.\bsw\rte/sc_speed.h ****                                                                                                    
  34:.\bsw\rte/sc_speed.h **** /**
  35:.\bsw\rte/sc_speed.h ****  *  Definition of function types for driver interfaces.
  36:.\bsw\rte/sc_speed.h ****  *  I-Port
  37:.\bsw\rte/sc_speed.h ****  */
  38:.\bsw\rte/sc_speed.h **** typedef RC_t (*SC_SPEED_driverIn_t)(SC_SPEED_data_t * const);
  39:.\bsw\rte/sc_speed.h **** 
  40:.\bsw\rte/sc_speed.h **** /**
  41:.\bsw\rte/sc_speed.h ****  *  Definition of function types for driver interfaces.
  42:.\bsw\rte/sc_speed.h ****  *  O-Port
  43:.\bsw\rte/sc_speed.h ****  */
  44:.\bsw\rte/sc_speed.h **** typedef RC_t (*SC_SPEED_driverOut_t)( const SC_SPEED_data_t * const);
  45:.\bsw\rte/sc_speed.h **** 
  46:.\bsw\rte/sc_speed.h **** 
  47:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
  48:.\bsw\rte/sc_speed.h **** /* The signal configuration API block																				*/
  49:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
  50:.\bsw\rte/sc_speed.h **** 
  51:.\bsw\rte/sc_speed.h **** /**
  52:.\bsw\rte/sc_speed.h ****  * Instances of the struct SC_SPEED_cfg_t represent the signal object configuration.
  53:.\bsw\rte/sc_speed.h ****  */
  54:.\bsw\rte/sc_speed.h **** struct SC_SPEED_cfg_s
  55:.\bsw\rte/sc_speed.h **** {
  56:.\bsw\rte/sc_speed.h ****     /**
  57:.\bsw\rte/sc_speed.h ****      * Function pointer to the input driver
  58:.\bsw\rte/sc_speed.h ****      */
  59:.\bsw\rte/sc_speed.h ****     SC_SPEED_driverIn_t const inDriver;
  60:.\bsw\rte/sc_speed.h **** 
  61:.\bsw\rte/sc_speed.h ****     /**
  62:.\bsw\rte/sc_speed.h ****      * Function pointer to the output driver table
  63:.\bsw\rte/sc_speed.h ****      */
  64:.\bsw\rte/sc_speed.h ****    SC_SPEED_driverOut_t const outDriver;
  65:.\bsw\rte/sc_speed.h ****    
  66:.\bsw\rte/sc_speed.h ****     /**
  67:.\bsw\rte/sc_speed.h ****      * Event onUpdate
  68:.\bsw\rte/sc_speed.h ****      */
  69:.\bsw\rte/sc_speed.h ****     EventMaskType const evOnUpdate;
  70:.\bsw\rte/sc_speed.h ****     
  71:.\bsw\rte/sc_speed.h ****     
  72:.\bsw\rte/sc_speed.h ****     /**
  73:.\bsw\rte/sc_speed.h ****      * Event onError
  74:.\bsw\rte/sc_speed.h ****      */
  75:.\bsw\rte/sc_speed.h ****     EventMaskType const evOnError;
  76:.\bsw\rte/sc_speed.h ****     
  77:.\bsw\rte/sc_speed.h ****     /**
  78:.\bsw\rte/sc_speed.h ****      * Task Count onUpdate
  79:.\bsw\rte/sc_speed.h ****      */
  80:.\bsw\rte/sc_speed.h ****     size_t const onUpdateTaskCount;
  81:.\bsw\rte/sc_speed.h **** 
  82:.\bsw\rte/sc_speed.h ****     /**
  83:.\bsw\rte/sc_speed.h ****      * Task List onUpdate
  84:.\bsw\rte/sc_speed.h ****      */
  85:.\bsw\rte/sc_speed.h ****     TaskTypeArray* const onUpdateTasks;
  86:.\bsw\rte/sc_speed.h ****     
  87:.\bsw\rte/sc_speed.h ****     /**
  88:.\bsw\rte/sc_speed.h ****      * Task Count onError
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 15


  89:.\bsw\rte/sc_speed.h ****      */
  90:.\bsw\rte/sc_speed.h ****     size_t const onErrorTaskCount;
  91:.\bsw\rte/sc_speed.h **** 
  92:.\bsw\rte/sc_speed.h ****     /**
  93:.\bsw\rte/sc_speed.h ****      * Task List onError
  94:.\bsw\rte/sc_speed.h ****      */
  95:.\bsw\rte/sc_speed.h ****     TaskTypeArray* const onErrorTasks;
  96:.\bsw\rte/sc_speed.h **** 	
  97:.\bsw\rte/sc_speed.h **** 	
  98:.\bsw\rte/sc_speed.h **** 	/**
  99:.\bsw\rte/sc_speed.h **** 	 * Ressourse is active? We need an additional boolean as a ressource value 0 is valid.
 100:.\bsw\rte/sc_speed.h **** 	 */
 101:.\bsw\rte/sc_speed.h **** 	 boolean_t const resourceActive;
 102:.\bsw\rte/sc_speed.h **** 	 
 103:.\bsw\rte/sc_speed.h **** 	/**
 104:.\bsw\rte/sc_speed.h **** 	 * Ressourse 
 105:.\bsw\rte/sc_speed.h **** 	 */
 106:.\bsw\rte/sc_speed.h **** 	 ResourceType const resource;
 107:.\bsw\rte/sc_speed.h **** 
 108:.\bsw\rte/sc_speed.h **** };                                                                                                 
 109:.\bsw\rte/sc_speed.h **** typedef const struct SC_SPEED_cfg_s SC_SPEED_cfg_t;
 110:.\bsw\rte/sc_speed.h ****                               
 111:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
 112:.\bsw\rte/sc_speed.h **** /* The data interface block																							*/
 113:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
 114:.\bsw\rte/sc_speed.h **** 
 115:.\bsw\rte/sc_speed.h ****                                                                                                    
 116:.\bsw\rte/sc_speed.h **** 							  
 117:.\bsw\rte/sc_speed.h **** /**
 118:.\bsw\rte/sc_speed.h ****  * Instances of the struct SC_SPEED_t represent the signal objects.
 119:.\bsw\rte/sc_speed.h ****  * A signal object contains the current application value 'value' as well as relevant meta data.
 120:.\bsw\rte/sc_speed.h ****  */
 121:.\bsw\rte/sc_speed.h **** struct SC_SPEED_s
 122:.\bsw\rte/sc_speed.h **** {                                                                                                  
 123:.\bsw\rte/sc_speed.h **** 
 124:.\bsw\rte/sc_speed.h **** 	/**
 125:.\bsw\rte/sc_speed.h **** 	 * Data buffer for the application value
 126:.\bsw\rte/sc_speed.h **** 	 */
 127:.\bsw\rte/sc_speed.h ****     SC_SPEED_data_t value;
 128:.\bsw\rte/sc_speed.h **** 
 129:.\bsw\rte/sc_speed.h ****     /**
 130:.\bsw\rte/sc_speed.h ****      * Current signal status
 131:.\bsw\rte/sc_speed.h ****      */
 132:.\bsw\rte/sc_speed.h ****     RTE_signalStatus_t status;
 133:.\bsw\rte/sc_speed.h **** 
 134:.\bsw\rte/sc_speed.h ****     /**
 135:.\bsw\rte/sc_speed.h ****      * Current age of the signal (in calling cycles)
 136:.\bsw\rte/sc_speed.h ****      */
 137:.\bsw\rte/sc_speed.h ****     uint32_t age;
 138:.\bsw\rte/sc_speed.h **** 
 139:.\bsw\rte/sc_speed.h ****     /**
 140:.\bsw\rte/sc_speed.h ****      * Pointer to the signal configuration
 141:.\bsw\rte/sc_speed.h ****      */
 142:.\bsw\rte/sc_speed.h **** 	const SC_SPEED_cfg_t * const    pSigCfg;
 143:.\bsw\rte/sc_speed.h **** 
 144:.\bsw\rte/sc_speed.h **** };                                                                                                 
 145:.\bsw\rte/sc_speed.h **** typedef struct SC_SPEED_s SC_SPEED_t;
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 16


 146:.\bsw\rte/sc_speed.h **** 
 147:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
 148:.\bsw\rte/sc_speed.h **** /* Signal initialisation   																							*/
 149:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
 150:.\bsw\rte/sc_speed.h **** 
 151:.\bsw\rte/sc_speed.h **** /**
 152:.\bsw\rte/sc_speed.h ****  * Initializes a signal instance with a passed init value.
 153:.\bsw\rte/sc_speed.h ****  * Depending on the configured conversion or scaling function the raw_value will be calculated.
 154:.\bsw\rte/sc_speed.h ****  * Signal status will change from RTE_SIGNALSTATUS_STARTUP to RTE_SIGNALSTATUS_INITIALIZED.
 155:.\bsw\rte/sc_speed.h ****  *
 156:.\bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object which will be initialised
 157:.\bsw\rte/sc_speed.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 158:.\bsw\rte/sc_speed.h ****  *
 159:.\bsw\rte/sc_speed.h ****  **/
 160:.\bsw\rte/sc_speed.h **** inline RC_t RTE_SC_SPEED_init( SC_SPEED_t * const signal )
 161:.\bsw\rte/sc_speed.h **** {                                                                                                  
 162:.\bsw\rte/sc_speed.h **** 
 163:.\bsw\rte/sc_speed.h ****    RC_t ret = RC_SUCCESS;
 164:.\bsw\rte/sc_speed.h **** 
 165:.\bsw\rte/sc_speed.h ****    //Set value and raw value
 166:.\bsw\rte/sc_speed.h ****    signal->value  = SC_SPEED_INIT_DATA;
 167:.\bsw\rte/sc_speed.h ****    signal->age    = 0;
 168:.\bsw\rte/sc_speed.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 169:.\bsw\rte/sc_speed.h **** 
 170:.\bsw\rte/sc_speed.h ****    return ret;
 171:.\bsw\rte/sc_speed.h **** }
 172:.\bsw\rte/sc_speed.h **** 
 173:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
 174:.\bsw\rte/sc_speed.h **** /* Status and timeout control																						*/
 175:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
 176:.\bsw\rte/sc_speed.h **** 
 177:.\bsw\rte/sc_speed.h **** /**
 178:.\bsw\rte/sc_speed.h ****  *  Returns the current signal status of the passed signal instance.
 179:.\bsw\rte/sc_speed.h ****  *
 180:.\bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
 181:.\bsw\rte/sc_speed.h ****  * @return  sig_status_t: The current signal status
 182:.\bsw\rte/sc_speed.h ****  *
 183:.\bsw\rte/sc_speed.h ****  **/
 184:.\bsw\rte/sc_speed.h **** inline RTE_signalStatus_t RTE_SC_SPEED_getStatus( const SC_SPEED_t * const signal )
 185:.\bsw\rte/sc_speed.h **** {
 186:.\bsw\rte/sc_speed.h ****    return signal->status;
 187:.\bsw\rte/sc_speed.h **** }
 188:.\bsw\rte/sc_speed.h **** 
 189:.\bsw\rte/sc_speed.h **** 
 190:.\bsw\rte/sc_speed.h **** /**
 191:.\bsw\rte/sc_speed.h ****  *  Sets a new signal status of the passed signal instance by passing the new status.
 192:.\bsw\rte/sc_speed.h ****  *
 193:.\bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
 194:.\bsw\rte/sc_speed.h ****  * @param  const sig_status_t status: New signal status
 195:.\bsw\rte/sc_speed.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 196:.\bsw\rte/sc_speed.h ****  *
 197:.\bsw\rte/sc_speed.h ****  */
 198:.\bsw\rte/sc_speed.h **** inline RC_t RTE_SC_SPEED_setStatus( SC_SPEED_t * const signal, const RTE_signalStatus_t status )
 199:.\bsw\rte/sc_speed.h **** {
 200:.\bsw\rte/sc_speed.h ****    signal->status = status;
 201:.\bsw\rte/sc_speed.h ****    size_t taskNum=0;
 202:.\bsw\rte/sc_speed.h ****    
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 17


 203:.\bsw\rte/sc_speed.h ****    //Fire error events in case of invalid state
 204:.\bsw\rte/sc_speed.h ****    if (signal->status == RTE_SIGNALSTATUS_INVALID)
 205:.\bsw\rte/sc_speed.h ****    {
 206:.\bsw\rte/sc_speed.h **** 	    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 207:.\bsw\rte/sc_speed.h **** 		TaskTypeArray* pTaskArray = signal->pSigCfg->onErrorTasks;
 208:.\bsw\rte/sc_speed.h **** 
 209:.\bsw\rte/sc_speed.h **** 		if (0 != signal->pSigCfg->evOnError && NULL != pTaskArray){
 210:.\bsw\rte/sc_speed.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 211:.\bsw\rte/sc_speed.h **** 				TaskType task = (*pTaskArray)[taskNum];
 212:.\bsw\rte/sc_speed.h **** 				SetEvent( task, signal->pSigCfg->evOnError);
 213:.\bsw\rte/sc_speed.h **** 			}
 214:.\bsw\rte/sc_speed.h **** 		}
 215:.\bsw\rte/sc_speed.h ****    }
 216:.\bsw\rte/sc_speed.h ****    
 217:.\bsw\rte/sc_speed.h ****    return RC_SUCCESS;
 218:.\bsw\rte/sc_speed.h **** }
 219:.\bsw\rte/sc_speed.h **** 
 220:.\bsw\rte/sc_speed.h **** 
 221:.\bsw\rte/sc_speed.h **** /**
 222:.\bsw\rte/sc_speed.h ****  * Returns the count of refreshing trials (refresh, set or set_raw) that failed.
 223:.\bsw\rte/sc_speed.h ****  * Prerquisite: The signal is refreshed cyclically
 224:.\bsw\rte/sc_speed.h ****  *
 225:.\bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
 226:.\bsw\rte/sc_speed.h ****  * @return uint32_t: Number of cycles since the signal has been updated for the last time
 227:.\bsw\rte/sc_speed.h ****  */
 228:.\bsw\rte/sc_speed.h **** inline uint32_t RTE_SC_SPEED_getAge( const SC_SPEED_t * const signal )
 229:.\bsw\rte/sc_speed.h **** {
 230:.\bsw\rte/sc_speed.h ****    return signal->age;
 231:.\bsw\rte/sc_speed.h **** }
 232:.\bsw\rte/sc_speed.h **** 
 233:.\bsw\rte/sc_speed.h **** /**
 234:.\bsw\rte/sc_speed.h ****  * Should be called by application or driver if no new value can be provided.
 235:.\bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
 236:.\bsw\rte/sc_speed.h ****  * @param uint32_t increment: incrementvalue, typically in [ms]
 237:.\bsw\rte/sc_speed.h ****  * @return void
 238:.\bsw\rte/sc_speed.h ****  */
 239:.\bsw\rte/sc_speed.h **** inline void RTE_SC_SPEED_incAge(  SC_SPEED_t * const signal , uint32_t increment)
 240:.\bsw\rte/sc_speed.h **** {
 241:.\bsw\rte/sc_speed.h **** 	   //Hack....
 242:.\bsw\rte/sc_speed.h **** 	   if ( 0xFFFF0000 > (signal->age + increment) )
 243:.\bsw\rte/sc_speed.h **** 	   {
 244:.\bsw\rte/sc_speed.h **** 	      signal->age += increment;
 245:.\bsw\rte/sc_speed.h **** 	   }
 246:.\bsw\rte/sc_speed.h **** }
 247:.\bsw\rte/sc_speed.h **** 
 248:.\bsw\rte/sc_speed.h **** 
 249:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
 250:.\bsw\rte/sc_speed.h **** /* Application Data read/write Interface																			*/
 251:.\bsw\rte/sc_speed.h **** /**************************************************************************************************
 252:.\bsw\rte/sc_speed.h **** 
 253:.\bsw\rte/sc_speed.h **** /**
 254:.\bsw\rte/sc_speed.h ****  * Returns the current application value as pointer to the signal payload.
 255:.\bsw\rte/sc_speed.h ****  * Careful: This is not threadsafe!!!
 256:.\bsw\rte/sc_speed.h ****  *
 257:.\bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
 258:.\bsw\rte/sc_speed.h ****  * @return sc_speed_data_t*: pointer to the current value of the application data buffer
 259:.\bsw\rte/sc_speed.h ****  *
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 18


 260:.\bsw\rte/sc_speed.h ****  **/
 261:.\bsw\rte/sc_speed.h **** inline SC_SPEED_data_t* RTE_SC_SPEED_getPtr( SC_SPEED_t * const signal )
 262:.\bsw\rte/sc_speed.h **** {               
 263:.\bsw\rte/sc_speed.h ****    //Todo: Critical region cannot be protected using return values																						
 264:.\bsw\rte/sc_speed.h ****    return &(signal->value);                                                                        
 265:.\bsw\rte/sc_speed.h **** }
 266:.\bsw\rte/sc_speed.h **** 
 267:.\bsw\rte/sc_speed.h **** /**
 268:.\bsw\rte/sc_speed.h ****  * Returns the current application value of the passed signal instance.
 269:.\bsw\rte/sc_speed.h ****  *
 270:.\bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
 271:.\bsw\rte/sc_speed.h ****  * @return sc_speed_data_t: current value of the application data buffer
 272:.\bsw\rte/sc_speed.h ****  *
 273:.\bsw\rte/sc_speed.h ****  **/
 274:.\bsw\rte/sc_speed.h **** inline SC_SPEED_data_t RTE_SC_SPEED_get( const SC_SPEED_t * const signal )
 275:.\bsw\rte/sc_speed.h **** {               
 276:.\bsw\rte/sc_speed.h ****    //Todo: Critical region cannot be protected using return values																						
 277:.\bsw\rte/sc_speed.h ****    return signal->value;                                                                           
 278:.\bsw\rte/sc_speed.h **** }                                                                                                  
 279:.\bsw\rte/sc_speed.h ****                                                                                                    
 280:.\bsw\rte/sc_speed.h **** /**
 281:.\bsw\rte/sc_speed.h ****  * Returns the current application value of the passed signal instance threadsafe.
 282:.\bsw\rte/sc_speed.h ****  *
 283:.\bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
 284:.\bsw\rte/sc_speed.h ****  * @param  SC_SPEED_data_t* data: Pointer to the return data Pointer to the signal object
 285:.\bsw\rte/sc_speed.h ****  * @return RC_SUCCESS
 286:.\bsw\rte/sc_speed.h ****  *
 287:.\bsw\rte/sc_speed.h ****  **/
 288:.\bsw\rte/sc_speed.h **** inline RC_t RTE_SC_SPEED_getThreadSafe( const SC_SPEED_t * const signal, SC_SPEED_data_t * const da
 289:.\bsw\rte/sc_speed.h **** {    
 290:.\bsw\rte/sc_speed.h ****    if (TRUE == signal->pSigCfg->resourceActive) GetResource(signal->pSigCfg->resource);
 291:.\bsw\rte/sc_speed.h ****    *data = signal->value;
 292:.\bsw\rte/sc_speed.h ****    if (TRUE == signal->pSigCfg->resourceActive) ReleaseResource(signal->pSigCfg->resource);        
 293:.\bsw\rte/sc_speed.h **** 
 294:.\bsw\rte/sc_speed.h ****    return RC_SUCCESS;                                                                   
 295:.\bsw\rte/sc_speed.h ****    
 296:.\bsw\rte/sc_speed.h **** }                                                                                                  
 297:.\bsw\rte/sc_speed.h ****                                                                                                    
 298:.\bsw\rte/sc_speed.h **** /**
 299:.\bsw\rte/sc_speed.h ****  * Sets a new application value to the passed signal instance by passing the new value.
 300:.\bsw\rte/sc_speed.h ****  * The corresponding driver raw value will be calculated immediately by using the default conversio
 301:.\bsw\rte/sc_speed.h ****  * signal specific scaling function.
 302:.\bsw\rte/sc_speed.h ****  * The signal age will be set to 0 and the new status will be 'RTE_SIGNALSTATUS_VALID'.
 303:.\bsw\rte/sc_speed.h ****  *
 304:.\bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
 305:.\bsw\rte/sc_speed.h ****  * @param  sc_speed_data_t const value: value for the application data buffer
 306:.\bsw\rte/sc_speed.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 307:.\bsw\rte/sc_speed.h ****  *
 308:.\bsw\rte/sc_speed.h ****  **/
 309:.\bsw\rte/sc_speed.h **** inline RC_t RTE_SC_SPEED_set(SC_SPEED_t * const signal, const SC_SPEED_data_t value  )
 310:.\bsw\rte/sc_speed.h **** {
 311:.\bsw\rte/sc_speed.h **** 
 312:.\bsw\rte/sc_speed.h ****    RC_t ret = RC_SUCCESS;
 313:.\bsw\rte/sc_speed.h ****    size_t taskNum=0;
 314:.\bsw\rte/sc_speed.h **** 
 315:.\bsw\rte/sc_speed.h **** 
 316:.\bsw\rte/sc_speed.h ****    if (TRUE == signal->pSigCfg->resourceActive) GetResource(signal->pSigCfg->resource);
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 19


 251              		.loc 3 316 0
 252 0034 104B     		ldr	r3, .L24+4
 253 0036 9A68     		ldr	r2, [r3, #8]
 254              	.LVL28:
 317:.\bsw\rte/sc_speed.h ****    signal->value  = value;
 255              		.loc 3 317 0
 256 0038 1970     		strb	r1, [r3]
 318:.\bsw\rte/sc_speed.h ****    signal->age    = 0;
 257              		.loc 3 318 0
 258 003a 0021     		movs	r1, #0
 259              	.LVL29:
 260 003c 5960     		str	r1, [r3, #4]
 319:.\bsw\rte/sc_speed.h ****    signal->status = RTE_SIGNALSTATUS_VALID;
 261              		.loc 3 319 0
 262 003e 0221     		movs	r1, #2
 263 0040 5970     		strb	r1, [r3, #1]
 320:.\bsw\rte/sc_speed.h ****    if (TRUE == signal->pSigCfg->resourceActive) ReleaseResource(signal->pSigCfg->resource);
 321:.\bsw\rte/sc_speed.h **** 
 322:.\bsw\rte/sc_speed.h ****    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 323:.\bsw\rte/sc_speed.h ****    TaskTypeArray* pTaskArray = signal->pSigCfg->onUpdateTasks;
 264              		.loc 3 323 0
 265 0042 5569     		ldr	r5, [r2, #20]
 266              	.LVL30:
 324:.\bsw\rte/sc_speed.h **** 
 325:.\bsw\rte/sc_speed.h ****    if (0 != signal->pSigCfg->evOnUpdate && NULL != pTaskArray){
 267              		.loc 3 325 0
 268 0044 9368     		ldr	r3, [r2, #8]
 269 0046 73B1     		cbz	r3, .L18
 270 0048 3DB9     		cbnz	r5, .L21
 271 004a 0CE0     		b	.L18
 272              	.LVL31:
 273              	.L20:
 274              	.LBB66:
 326:.\bsw\rte/sc_speed.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 327:.\bsw\rte/sc_speed.h **** 		  
 328:.\bsw\rte/sc_speed.h ****           TaskType task = (*pTaskArray)[taskNum];
 329:.\bsw\rte/sc_speed.h **** 	      SetEvent( task, signal->pSigCfg->evOnUpdate);
 275              		.loc 3 329 0
 276 004c 9968     		ldr	r1, [r3, #8]
 277 004e 55F82400 		ldr	r0, [r5, r4, lsl #2]
 278 0052 FFF7FEFF 		bl	EE_oo_SetEvent
 279              	.LVL32:
 280              	.LBE66:
 326:.\bsw\rte/sc_speed.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 281              		.loc 3 326 0
 282 0056 0134     		adds	r4, r4, #1
 283              	.LVL33:
 284 0058 00E0     		b	.L19
 285              	.LVL34:
 286              	.L21:
 325:.\bsw\rte/sc_speed.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 287              		.loc 3 325 0
 288 005a 0024     		movs	r4, #0
 289              	.LVL35:
 290              	.L19:
 326:.\bsw\rte/sc_speed.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 291              		.loc 3 326 0
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 20


 292 005c 064B     		ldr	r3, .L24+4
 293 005e 9B68     		ldr	r3, [r3, #8]
 294 0060 1A69     		ldr	r2, [r3, #16]
 295 0062 9442     		cmp	r4, r2
 296 0064 F2D3     		bcc	.L20
 297              	.LVL36:
 298              	.L18:
 299              	.LBE65:
 300              	.LBE64:
  82:asw/swc_gaspedal.c ****         }
  83:asw/swc_gaspedal.c ****         else if(joystickSignal.xPos <= JOYSTICK_DRIFTX)
  84:asw/swc_gaspedal.c ****         {
  85:asw/swc_gaspedal.c ****             speedSignal.speedValue = 0;
  86:asw/swc_gaspedal.c ****         }
  87:asw/swc_gaspedal.c ****         
  88:asw/swc_gaspedal.c **** 
  89:asw/swc_gaspedal.c ****         // Set the value to output speed signal
  90:asw/swc_gaspedal.c ****         RTE_SC_SPEED_set(&SO_SPEED_signal, speedSignal);
  91:asw/swc_gaspedal.c ****         WD_Alive(WD_RUN_CALCCONTROL); 
 301              		.loc 1 91 0
 302 0066 0120     		movs	r0, #1
 303 0068 FFF7FEFF 		bl	WD_Alive
 304              	.LVL37:
 305              	.LBE59:
  92:asw/swc_gaspedal.c ****         
  93:asw/swc_gaspedal.c ****     }
  94:asw/swc_gaspedal.c ****     
  95:asw/swc_gaspedal.c ****     /* USER CODE END GASPEDAL_calcControl_run */
  96:asw/swc_gaspedal.c **** }
 306              		.loc 1 96 0
 307 006c 05B0     		add	sp, sp, #20
 308              		.cfi_def_cfa_offset 12
 309              		@ sp needed
 310 006e 30BD     		pop	{r4, r5, pc}
 311              	.LVL38:
 312              	.L23:
 313              		.cfi_def_cfa_offset 0
 314              		.cfi_restore 4
 315              		.cfi_restore 5
 316              		.cfi_restore 14
 317 0070 7047     		bx	lr
 318              	.L25:
 319 0072 00BF     		.align	2
 320              	.L24:
 321 0074 00000000 		.word	SO_JOYSTICK_signal
 322 0078 00000000 		.word	SO_SPEED_signal
 323              		.cfi_endproc
 324              	.LFE181:
 325              		.size	GASPEDAL_calcControl_run, .-GASPEDAL_calcControl_run
 326              		.section	.text.GASPEDAL_setEngine_run,"ax",%progbits
 327              		.align	2
 328              		.global	GASPEDAL_setEngine_run
 329              		.thumb
 330              		.thumb_func
 331              		.type	GASPEDAL_setEngine_run, %function
 332              	GASPEDAL_setEngine_run:
 333              	.LFB182:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 21


  97:asw/swc_gaspedal.c **** 
  98:asw/swc_gaspedal.c **** /*
  99:asw/swc_gaspedal.c ****  * component: swc_GasPedal
 100:asw/swc_gaspedal.c ****  * cycletime: 100
 101:asw/swc_gaspedal.c ****  * description: Runnable that take the input speed signal value and write it to engine(Green LED)
 102:asw/swc_gaspedal.c ****  * events: 
 103:asw/swc_gaspedal.c ****  * name: GASPEDAL_setEngine_run
 104:asw/swc_gaspedal.c ****  * shortname: setEngine
 105:asw/swc_gaspedal.c ****  * signalIN: so_speed
 106:asw/swc_gaspedal.c ****  * signalOUT: 
 107:asw/swc_gaspedal.c ****  * task: tsk_io
 108:asw/swc_gaspedal.c ****  */
 109:asw/swc_gaspedal.c **** void GASPEDAL_setEngine_run(RTE_event ev){
 334              		.loc 1 109 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              	.LVL39:
 339 0000 38B5     		push	{r3, r4, r5, lr}
 340              		.cfi_def_cfa_offset 16
 341              		.cfi_offset 3, -16
 342              		.cfi_offset 4, -12
 343              		.cfi_offset 5, -8
 344              		.cfi_offset 14, -4
 345              	.LVL40:
 110:asw/swc_gaspedal.c **** 	
 111:asw/swc_gaspedal.c **** 	/* USER CODE START GASPEDAL_setEngine_run */
 112:asw/swc_gaspedal.c ****     ev =0;
 113:asw/swc_gaspedal.c ****     
 114:asw/swc_gaspedal.c ****     SC_SPEED_data_t speedSignal = SC_SPEED_INIT_DATA;
 346              		.loc 1 114 0
 347 0002 0023     		movs	r3, #0
 348 0004 1946     		mov	r1, r3
 349              	.LVL41:
 350              	.LBB67:
 351              	.LBB68:
 186:.\bsw\rte/sc_speed.h **** }
 352              		.loc 3 186 0
 353 0006 184A     		ldr	r2, .L35
 354 0008 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 355              	.LVL42:
 356              	.LBE68:
 357              	.LBE67:
 115:asw/swc_gaspedal.c ****     static uint32_t speedSignalAge = 0;
 116:asw/swc_gaspedal.c ****     
 117:asw/swc_gaspedal.c ****     SC_ENGINE_data_t engineSignal = SC_ENGINE_INIT_DATA;
 118:asw/swc_gaspedal.c ****     
 119:asw/swc_gaspedal.c ****     
 120:asw/swc_gaspedal.c ****     // Get speed signal and check valid
 121:asw/swc_gaspedal.c ****     if(RTE_SC_SPEED_getStatus(&SO_SPEED_signal) == RTE_SIGNALSTATUS_VALID) {
 358              		.loc 1 121 0
 359 000a 022A     		cmp	r2, #2
 360 000c 01D1     		bne	.L27
 361              	.LVL43:
 122:asw/swc_gaspedal.c ****         speedSignal.speedValue = RTE_SC_SPEED_get(&SO_SPEED_signal).speedValue;
 362              		.loc 1 122 0
 363 000e 164A     		ldr	r2, .L35
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 22


 364 0010 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 365              	.L27:
 366              	.LVL44:
 367              	.LBB69:
 368              	.LBB70:
 230:.\bsw\rte/sc_speed.h **** }
 369              		.loc 3 230 0
 370 0012 154A     		ldr	r2, .L35
 371 0014 5268     		ldr	r2, [r2, #4]
 372              	.LVL45:
 373              	.LBE70:
 374              	.LBE69:
 123:asw/swc_gaspedal.c ****     }
 124:asw/swc_gaspedal.c ****     
 125:asw/swc_gaspedal.c ****     // Check speed signal Age
 126:asw/swc_gaspedal.c ****     // If age > 500ms , turn off engine 
 127:asw/swc_gaspedal.c ****     // Advanced error handling required later on !!!!
 128:asw/swc_gaspedal.c ****     speedSignalAge = RTE_SC_SPEED_getAge(&SO_SPEED_signal);
 129:asw/swc_gaspedal.c ****     
 130:asw/swc_gaspedal.c ****     if(speedSignalAge < 500) {
 375              		.loc 1 130 0
 376 0016 B2F5FA7F 		cmp	r2, #500
 377 001a 00D2     		bcs	.L28
 378              	.LVL46:
 131:asw/swc_gaspedal.c ****         engineSignal.engineValue = speedSignal.speedValue;
 379              		.loc 1 131 0
 380 001c 0B46     		mov	r3, r1
 381              	.LVL47:
 382              	.L28:
 383              	.LBB71:
 384              	.LBB72:
 385              		.file 4 ".\\bsw\\rte/sc_engine.h"
   1:.\bsw\rte/sc_engine.h **** 
   2:.\bsw\rte/sc_engine.h **** 
   3:.\bsw\rte/sc_engine.h **** /**
   4:.\bsw\rte/sc_engine.h ****  *  file    SC_ENGINE_signal.h
   5:.\bsw\rte/sc_engine.h ****  *
   6:.\bsw\rte/sc_engine.h ****  *  brief   signal base class for signal sc_engine
   7:.\bsw\rte/sc_engine.h ****  *
   8:.\bsw\rte/sc_engine.h ****  *  author  Autogenerated, Peter Fromm       <peter.fromm@h-da.de>
   9:.\bsw\rte/sc_engine.h ****  *
  10:.\bsw\rte/sc_engine.h ****  * description: Engine signal class
  11:.\bsw\rte/sc_engine.h ****  * name: sc_engine
  12:.\bsw\rte/sc_engine.h ****  * shortname: engine
  13:.\bsw\rte/sc_engine.h ****  *
  14:.\bsw\rte/sc_engine.h ****  */
  15:.\bsw\rte/sc_engine.h **** 
  16:.\bsw\rte/sc_engine.h **** 
  17:.\bsw\rte/sc_engine.h **** 
  18:.\bsw\rte/sc_engine.h **** #ifndef SC_ENGINE_SIGNAL_H_INCLUDED
  19:.\bsw\rte/sc_engine.h **** #define SC_ENGINE_SIGNAL_H_INCLUDED
  20:.\bsw\rte/sc_engine.h **** 
  21:.\bsw\rte/sc_engine.h **** /*================================================[ public includes  ]=============================
  22:.\bsw\rte/sc_engine.h **** #include "global.h"
  23:.\bsw\rte/sc_engine.h **** #include "project.h"
  24:.\bsw\rte/sc_engine.h **** #include "rte.h"
  25:.\bsw\rte/sc_engine.h **** #include "rte_types.h"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 23


  26:.\bsw\rte/sc_engine.h **** 
  27:.\bsw\rte/sc_engine.h **** #include "sc_engine_type.h"
  28:.\bsw\rte/sc_engine.h **** 
  29:.\bsw\rte/sc_engine.h **** 
  30:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
  31:.\bsw\rte/sc_engine.h **** /* The driver API block																						*/
  32:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
  33:.\bsw\rte/sc_engine.h ****                                                                                                    
  34:.\bsw\rte/sc_engine.h **** /**
  35:.\bsw\rte/sc_engine.h ****  *  Definition of function types for driver interfaces.
  36:.\bsw\rte/sc_engine.h ****  *  I-Port
  37:.\bsw\rte/sc_engine.h ****  */
  38:.\bsw\rte/sc_engine.h **** typedef RC_t (*SC_ENGINE_driverIn_t)(SC_ENGINE_data_t * const);
  39:.\bsw\rte/sc_engine.h **** 
  40:.\bsw\rte/sc_engine.h **** /**
  41:.\bsw\rte/sc_engine.h ****  *  Definition of function types for driver interfaces.
  42:.\bsw\rte/sc_engine.h ****  *  O-Port
  43:.\bsw\rte/sc_engine.h ****  */
  44:.\bsw\rte/sc_engine.h **** typedef RC_t (*SC_ENGINE_driverOut_t)( const SC_ENGINE_data_t * const);
  45:.\bsw\rte/sc_engine.h **** 
  46:.\bsw\rte/sc_engine.h **** 
  47:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
  48:.\bsw\rte/sc_engine.h **** /* The signal configuration API block																				*/
  49:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
  50:.\bsw\rte/sc_engine.h **** 
  51:.\bsw\rte/sc_engine.h **** /**
  52:.\bsw\rte/sc_engine.h ****  * Instances of the struct SC_ENGINE_cfg_t represent the signal object configuration.
  53:.\bsw\rte/sc_engine.h ****  */
  54:.\bsw\rte/sc_engine.h **** struct SC_ENGINE_cfg_s
  55:.\bsw\rte/sc_engine.h **** {
  56:.\bsw\rte/sc_engine.h ****     /**
  57:.\bsw\rte/sc_engine.h ****      * Function pointer to the input driver
  58:.\bsw\rte/sc_engine.h ****      */
  59:.\bsw\rte/sc_engine.h ****     SC_ENGINE_driverIn_t const inDriver;
  60:.\bsw\rte/sc_engine.h **** 
  61:.\bsw\rte/sc_engine.h ****     /**
  62:.\bsw\rte/sc_engine.h ****      * Function pointer to the output driver table
  63:.\bsw\rte/sc_engine.h ****      */
  64:.\bsw\rte/sc_engine.h ****    SC_ENGINE_driverOut_t const outDriver;
  65:.\bsw\rte/sc_engine.h ****    
  66:.\bsw\rte/sc_engine.h ****     /**
  67:.\bsw\rte/sc_engine.h ****      * Event onUpdate
  68:.\bsw\rte/sc_engine.h ****      */
  69:.\bsw\rte/sc_engine.h ****     EventMaskType const evOnUpdate;
  70:.\bsw\rte/sc_engine.h ****     
  71:.\bsw\rte/sc_engine.h ****     
  72:.\bsw\rte/sc_engine.h ****     /**
  73:.\bsw\rte/sc_engine.h ****      * Event onError
  74:.\bsw\rte/sc_engine.h ****      */
  75:.\bsw\rte/sc_engine.h ****     EventMaskType const evOnError;
  76:.\bsw\rte/sc_engine.h ****     
  77:.\bsw\rte/sc_engine.h ****     /**
  78:.\bsw\rte/sc_engine.h ****      * Task Count onUpdate
  79:.\bsw\rte/sc_engine.h ****      */
  80:.\bsw\rte/sc_engine.h ****     size_t const onUpdateTaskCount;
  81:.\bsw\rte/sc_engine.h **** 
  82:.\bsw\rte/sc_engine.h ****     /**
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 24


  83:.\bsw\rte/sc_engine.h ****      * Task List onUpdate
  84:.\bsw\rte/sc_engine.h ****      */
  85:.\bsw\rte/sc_engine.h ****     TaskTypeArray* const onUpdateTasks;
  86:.\bsw\rte/sc_engine.h ****     
  87:.\bsw\rte/sc_engine.h ****     /**
  88:.\bsw\rte/sc_engine.h ****      * Task Count onError
  89:.\bsw\rte/sc_engine.h ****      */
  90:.\bsw\rte/sc_engine.h ****     size_t const onErrorTaskCount;
  91:.\bsw\rte/sc_engine.h **** 
  92:.\bsw\rte/sc_engine.h ****     /**
  93:.\bsw\rte/sc_engine.h ****      * Task List onError
  94:.\bsw\rte/sc_engine.h ****      */
  95:.\bsw\rte/sc_engine.h ****     TaskTypeArray* const onErrorTasks;
  96:.\bsw\rte/sc_engine.h **** 	
  97:.\bsw\rte/sc_engine.h **** 	
  98:.\bsw\rte/sc_engine.h **** 	/**
  99:.\bsw\rte/sc_engine.h **** 	 * Ressourse is active? We need an additional boolean as a ressource value 0 is valid.
 100:.\bsw\rte/sc_engine.h **** 	 */
 101:.\bsw\rte/sc_engine.h **** 	 boolean_t const resourceActive;
 102:.\bsw\rte/sc_engine.h **** 	 
 103:.\bsw\rte/sc_engine.h **** 	/**
 104:.\bsw\rte/sc_engine.h **** 	 * Ressourse 
 105:.\bsw\rte/sc_engine.h **** 	 */
 106:.\bsw\rte/sc_engine.h **** 	 ResourceType const resource;
 107:.\bsw\rte/sc_engine.h **** 
 108:.\bsw\rte/sc_engine.h **** };                                                                                                 
 109:.\bsw\rte/sc_engine.h **** typedef const struct SC_ENGINE_cfg_s SC_ENGINE_cfg_t;
 110:.\bsw\rte/sc_engine.h ****                               
 111:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
 112:.\bsw\rte/sc_engine.h **** /* The data interface block																							*/
 113:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
 114:.\bsw\rte/sc_engine.h **** 
 115:.\bsw\rte/sc_engine.h ****                                                                                                    
 116:.\bsw\rte/sc_engine.h **** 							  
 117:.\bsw\rte/sc_engine.h **** /**
 118:.\bsw\rte/sc_engine.h ****  * Instances of the struct SC_ENGINE_t represent the signal objects.
 119:.\bsw\rte/sc_engine.h ****  * A signal object contains the current application value 'value' as well as relevant meta data.
 120:.\bsw\rte/sc_engine.h ****  */
 121:.\bsw\rte/sc_engine.h **** struct SC_ENGINE_s
 122:.\bsw\rte/sc_engine.h **** {                                                                                                  
 123:.\bsw\rte/sc_engine.h **** 
 124:.\bsw\rte/sc_engine.h **** 	/**
 125:.\bsw\rte/sc_engine.h **** 	 * Data buffer for the application value
 126:.\bsw\rte/sc_engine.h **** 	 */
 127:.\bsw\rte/sc_engine.h ****     SC_ENGINE_data_t value;
 128:.\bsw\rte/sc_engine.h **** 
 129:.\bsw\rte/sc_engine.h ****     /**
 130:.\bsw\rte/sc_engine.h ****      * Current signal status
 131:.\bsw\rte/sc_engine.h ****      */
 132:.\bsw\rte/sc_engine.h ****     RTE_signalStatus_t status;
 133:.\bsw\rte/sc_engine.h **** 
 134:.\bsw\rte/sc_engine.h ****     /**
 135:.\bsw\rte/sc_engine.h ****      * Current age of the signal (in calling cycles)
 136:.\bsw\rte/sc_engine.h ****      */
 137:.\bsw\rte/sc_engine.h ****     uint32_t age;
 138:.\bsw\rte/sc_engine.h **** 
 139:.\bsw\rte/sc_engine.h ****     /**
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 25


 140:.\bsw\rte/sc_engine.h ****      * Pointer to the signal configuration
 141:.\bsw\rte/sc_engine.h ****      */
 142:.\bsw\rte/sc_engine.h **** 	const SC_ENGINE_cfg_t * const    pSigCfg;
 143:.\bsw\rte/sc_engine.h **** 
 144:.\bsw\rte/sc_engine.h **** };                                                                                                 
 145:.\bsw\rte/sc_engine.h **** typedef struct SC_ENGINE_s SC_ENGINE_t;
 146:.\bsw\rte/sc_engine.h **** 
 147:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
 148:.\bsw\rte/sc_engine.h **** /* Signal initialisation   																							*/
 149:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
 150:.\bsw\rte/sc_engine.h **** 
 151:.\bsw\rte/sc_engine.h **** /**
 152:.\bsw\rte/sc_engine.h ****  * Initializes a signal instance with a passed init value.
 153:.\bsw\rte/sc_engine.h ****  * Depending on the configured conversion or scaling function the raw_value will be calculated.
 154:.\bsw\rte/sc_engine.h ****  * Signal status will change from RTE_SIGNALSTATUS_STARTUP to RTE_SIGNALSTATUS_INITIALIZED.
 155:.\bsw\rte/sc_engine.h ****  *
 156:.\bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object which will be initialised
 157:.\bsw\rte/sc_engine.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 158:.\bsw\rte/sc_engine.h ****  *
 159:.\bsw\rte/sc_engine.h ****  **/
 160:.\bsw\rte/sc_engine.h **** inline RC_t RTE_SC_ENGINE_init( SC_ENGINE_t * const signal )
 161:.\bsw\rte/sc_engine.h **** {                                                                                                  
 162:.\bsw\rte/sc_engine.h **** 
 163:.\bsw\rte/sc_engine.h ****    RC_t ret = RC_SUCCESS;
 164:.\bsw\rte/sc_engine.h **** 
 165:.\bsw\rte/sc_engine.h ****    //Set value and raw value
 166:.\bsw\rte/sc_engine.h ****    signal->value  = SC_ENGINE_INIT_DATA;
 167:.\bsw\rte/sc_engine.h ****    signal->age    = 0;
 168:.\bsw\rte/sc_engine.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 169:.\bsw\rte/sc_engine.h **** 
 170:.\bsw\rte/sc_engine.h ****    return ret;
 171:.\bsw\rte/sc_engine.h **** }
 172:.\bsw\rte/sc_engine.h **** 
 173:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
 174:.\bsw\rte/sc_engine.h **** /* Status and timeout control																						*/
 175:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
 176:.\bsw\rte/sc_engine.h **** 
 177:.\bsw\rte/sc_engine.h **** /**
 178:.\bsw\rte/sc_engine.h ****  *  Returns the current signal status of the passed signal instance.
 179:.\bsw\rte/sc_engine.h ****  *
 180:.\bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 181:.\bsw\rte/sc_engine.h ****  * @return  sig_status_t: The current signal status
 182:.\bsw\rte/sc_engine.h ****  *
 183:.\bsw\rte/sc_engine.h ****  **/
 184:.\bsw\rte/sc_engine.h **** inline RTE_signalStatus_t RTE_SC_ENGINE_getStatus( const SC_ENGINE_t * const signal )
 185:.\bsw\rte/sc_engine.h **** {
 186:.\bsw\rte/sc_engine.h ****    return signal->status;
 187:.\bsw\rte/sc_engine.h **** }
 188:.\bsw\rte/sc_engine.h **** 
 189:.\bsw\rte/sc_engine.h **** 
 190:.\bsw\rte/sc_engine.h **** /**
 191:.\bsw\rte/sc_engine.h ****  *  Sets a new signal status of the passed signal instance by passing the new status.
 192:.\bsw\rte/sc_engine.h ****  *
 193:.\bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 194:.\bsw\rte/sc_engine.h ****  * @param  const sig_status_t status: New signal status
 195:.\bsw\rte/sc_engine.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 196:.\bsw\rte/sc_engine.h ****  *
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 26


 197:.\bsw\rte/sc_engine.h ****  */
 198:.\bsw\rte/sc_engine.h **** inline RC_t RTE_SC_ENGINE_setStatus( SC_ENGINE_t * const signal, const RTE_signalStatus_t status )
 199:.\bsw\rte/sc_engine.h **** {
 200:.\bsw\rte/sc_engine.h ****    signal->status = status;
 201:.\bsw\rte/sc_engine.h ****    size_t taskNum=0;
 202:.\bsw\rte/sc_engine.h ****    
 203:.\bsw\rte/sc_engine.h ****    //Fire error events in case of invalid state
 204:.\bsw\rte/sc_engine.h ****    if (signal->status == RTE_SIGNALSTATUS_INVALID)
 205:.\bsw\rte/sc_engine.h ****    {
 206:.\bsw\rte/sc_engine.h **** 	    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 207:.\bsw\rte/sc_engine.h **** 		TaskTypeArray* pTaskArray = signal->pSigCfg->onErrorTasks;
 208:.\bsw\rte/sc_engine.h **** 
 209:.\bsw\rte/sc_engine.h **** 		if (0 != signal->pSigCfg->evOnError && NULL != pTaskArray){
 210:.\bsw\rte/sc_engine.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 211:.\bsw\rte/sc_engine.h **** 				TaskType task = (*pTaskArray)[taskNum];
 212:.\bsw\rte/sc_engine.h **** 				SetEvent( task, signal->pSigCfg->evOnError);
 213:.\bsw\rte/sc_engine.h **** 			}
 214:.\bsw\rte/sc_engine.h **** 		}
 215:.\bsw\rte/sc_engine.h ****    }
 216:.\bsw\rte/sc_engine.h ****    
 217:.\bsw\rte/sc_engine.h ****    return RC_SUCCESS;
 218:.\bsw\rte/sc_engine.h **** }
 219:.\bsw\rte/sc_engine.h **** 
 220:.\bsw\rte/sc_engine.h **** 
 221:.\bsw\rte/sc_engine.h **** /**
 222:.\bsw\rte/sc_engine.h ****  * Returns the count of refreshing trials (refresh, set or set_raw) that failed.
 223:.\bsw\rte/sc_engine.h ****  * Prerquisite: The signal is refreshed cyclically
 224:.\bsw\rte/sc_engine.h ****  *
 225:.\bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 226:.\bsw\rte/sc_engine.h ****  * @return uint32_t: Number of cycles since the signal has been updated for the last time
 227:.\bsw\rte/sc_engine.h ****  */
 228:.\bsw\rte/sc_engine.h **** inline uint32_t RTE_SC_ENGINE_getAge( const SC_ENGINE_t * const signal )
 229:.\bsw\rte/sc_engine.h **** {
 230:.\bsw\rte/sc_engine.h ****    return signal->age;
 231:.\bsw\rte/sc_engine.h **** }
 232:.\bsw\rte/sc_engine.h **** 
 233:.\bsw\rte/sc_engine.h **** /**
 234:.\bsw\rte/sc_engine.h ****  * Should be called by application or driver if no new value can be provided.
 235:.\bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 236:.\bsw\rte/sc_engine.h ****  * @param uint32_t increment: incrementvalue, typically in [ms]
 237:.\bsw\rte/sc_engine.h ****  * @return void
 238:.\bsw\rte/sc_engine.h ****  */
 239:.\bsw\rte/sc_engine.h **** inline void RTE_SC_ENGINE_incAge(  SC_ENGINE_t * const signal , uint32_t increment)
 240:.\bsw\rte/sc_engine.h **** {
 241:.\bsw\rte/sc_engine.h **** 	   //Hack....
 242:.\bsw\rte/sc_engine.h **** 	   if ( 0xFFFF0000 > (signal->age + increment) )
 243:.\bsw\rte/sc_engine.h **** 	   {
 244:.\bsw\rte/sc_engine.h **** 	      signal->age += increment;
 245:.\bsw\rte/sc_engine.h **** 	   }
 246:.\bsw\rte/sc_engine.h **** }
 247:.\bsw\rte/sc_engine.h **** 
 248:.\bsw\rte/sc_engine.h **** 
 249:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
 250:.\bsw\rte/sc_engine.h **** /* Application Data read/write Interface																			*/
 251:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
 252:.\bsw\rte/sc_engine.h **** 
 253:.\bsw\rte/sc_engine.h **** /**
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 27


 254:.\bsw\rte/sc_engine.h ****  * Returns the current application value as pointer to the signal payload.
 255:.\bsw\rte/sc_engine.h ****  * Careful: This is not threadsafe!!!
 256:.\bsw\rte/sc_engine.h ****  *
 257:.\bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 258:.\bsw\rte/sc_engine.h ****  * @return sc_engine_data_t*: pointer to the current value of the application data buffer
 259:.\bsw\rte/sc_engine.h ****  *
 260:.\bsw\rte/sc_engine.h ****  **/
 261:.\bsw\rte/sc_engine.h **** inline SC_ENGINE_data_t* RTE_SC_ENGINE_getPtr( SC_ENGINE_t * const signal )
 262:.\bsw\rte/sc_engine.h **** {               
 263:.\bsw\rte/sc_engine.h ****    //Todo: Critical region cannot be protected using return values																						
 264:.\bsw\rte/sc_engine.h ****    return &(signal->value);                                                                        
 265:.\bsw\rte/sc_engine.h **** }
 266:.\bsw\rte/sc_engine.h **** 
 267:.\bsw\rte/sc_engine.h **** /**
 268:.\bsw\rte/sc_engine.h ****  * Returns the current application value of the passed signal instance.
 269:.\bsw\rte/sc_engine.h ****  *
 270:.\bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 271:.\bsw\rte/sc_engine.h ****  * @return sc_engine_data_t: current value of the application data buffer
 272:.\bsw\rte/sc_engine.h ****  *
 273:.\bsw\rte/sc_engine.h ****  **/
 274:.\bsw\rte/sc_engine.h **** inline SC_ENGINE_data_t RTE_SC_ENGINE_get( const SC_ENGINE_t * const signal )
 275:.\bsw\rte/sc_engine.h **** {               
 276:.\bsw\rte/sc_engine.h ****    //Todo: Critical region cannot be protected using return values																						
 277:.\bsw\rte/sc_engine.h ****    return signal->value;                                                                           
 278:.\bsw\rte/sc_engine.h **** }                                                                                                  
 279:.\bsw\rte/sc_engine.h ****                                                                                                    
 280:.\bsw\rte/sc_engine.h **** /**
 281:.\bsw\rte/sc_engine.h ****  * Returns the current application value of the passed signal instance threadsafe.
 282:.\bsw\rte/sc_engine.h ****  *
 283:.\bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 284:.\bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_data_t* data: Pointer to the return data Pointer to the signal object
 285:.\bsw\rte/sc_engine.h ****  * @return RC_SUCCESS
 286:.\bsw\rte/sc_engine.h ****  *
 287:.\bsw\rte/sc_engine.h ****  **/
 288:.\bsw\rte/sc_engine.h **** inline RC_t RTE_SC_ENGINE_getThreadSafe( const SC_ENGINE_t * const signal, SC_ENGINE_data_t * const
 289:.\bsw\rte/sc_engine.h **** {    
 290:.\bsw\rte/sc_engine.h ****    if (TRUE == signal->pSigCfg->resourceActive) GetResource(signal->pSigCfg->resource);
 291:.\bsw\rte/sc_engine.h ****    *data = signal->value;
 292:.\bsw\rte/sc_engine.h ****    if (TRUE == signal->pSigCfg->resourceActive) ReleaseResource(signal->pSigCfg->resource);        
 293:.\bsw\rte/sc_engine.h **** 
 294:.\bsw\rte/sc_engine.h ****    return RC_SUCCESS;                                                                   
 295:.\bsw\rte/sc_engine.h ****    
 296:.\bsw\rte/sc_engine.h **** }                                                                                                  
 297:.\bsw\rte/sc_engine.h ****                                                                                                    
 298:.\bsw\rte/sc_engine.h **** /**
 299:.\bsw\rte/sc_engine.h ****  * Sets a new application value to the passed signal instance by passing the new value.
 300:.\bsw\rte/sc_engine.h ****  * The corresponding driver raw value will be calculated immediately by using the default conversio
 301:.\bsw\rte/sc_engine.h ****  * signal specific scaling function.
 302:.\bsw\rte/sc_engine.h ****  * The signal age will be set to 0 and the new status will be 'RTE_SIGNALSTATUS_VALID'.
 303:.\bsw\rte/sc_engine.h ****  *
 304:.\bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 305:.\bsw\rte/sc_engine.h ****  * @param  sc_engine_data_t const value: value for the application data buffer
 306:.\bsw\rte/sc_engine.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 307:.\bsw\rte/sc_engine.h ****  *
 308:.\bsw\rte/sc_engine.h ****  **/
 309:.\bsw\rte/sc_engine.h **** inline RC_t RTE_SC_ENGINE_set(SC_ENGINE_t * const signal, const SC_ENGINE_data_t value  )
 310:.\bsw\rte/sc_engine.h **** {
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 28


 311:.\bsw\rte/sc_engine.h **** 
 312:.\bsw\rte/sc_engine.h ****    RC_t ret = RC_SUCCESS;
 313:.\bsw\rte/sc_engine.h ****    size_t taskNum=0;
 314:.\bsw\rte/sc_engine.h **** 
 315:.\bsw\rte/sc_engine.h **** 
 316:.\bsw\rte/sc_engine.h ****    if (TRUE == signal->pSigCfg->resourceActive) GetResource(signal->pSigCfg->resource);
 386              		.loc 4 316 0
 387 001e 134A     		ldr	r2, .L35+4
 388 0020 9168     		ldr	r1, [r2, #8]
 389              	.LVL48:
 317:.\bsw\rte/sc_engine.h ****    signal->value  = value;
 390              		.loc 4 317 0
 391 0022 1370     		strb	r3, [r2]
 318:.\bsw\rte/sc_engine.h ****    signal->age    = 0;
 392              		.loc 4 318 0
 393 0024 0023     		movs	r3, #0
 394              	.LVL49:
 395 0026 5360     		str	r3, [r2, #4]
 319:.\bsw\rte/sc_engine.h ****    signal->status = RTE_SIGNALSTATUS_VALID;
 396              		.loc 4 319 0
 397 0028 0223     		movs	r3, #2
 398 002a 5370     		strb	r3, [r2, #1]
 320:.\bsw\rte/sc_engine.h ****    if (TRUE == signal->pSigCfg->resourceActive) ReleaseResource(signal->pSigCfg->resource);
 321:.\bsw\rte/sc_engine.h **** 
 322:.\bsw\rte/sc_engine.h ****    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 323:.\bsw\rte/sc_engine.h ****    TaskTypeArray* pTaskArray = signal->pSigCfg->onUpdateTasks;
 399              		.loc 4 323 0
 400 002c 4D69     		ldr	r5, [r1, #20]
 401              	.LVL50:
 324:.\bsw\rte/sc_engine.h **** 
 325:.\bsw\rte/sc_engine.h ****    if (0 != signal->pSigCfg->evOnUpdate && NULL != pTaskArray){
 402              		.loc 4 325 0
 403 002e 8B68     		ldr	r3, [r1, #8]
 404 0030 73B1     		cbz	r3, .L29
 405 0032 3DB9     		cbnz	r5, .L33
 406 0034 0CE0     		b	.L29
 407              	.LVL51:
 408              	.L31:
 409              	.LBB73:
 326:.\bsw\rte/sc_engine.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 327:.\bsw\rte/sc_engine.h **** 		  
 328:.\bsw\rte/sc_engine.h ****           TaskType task = (*pTaskArray)[taskNum];
 329:.\bsw\rte/sc_engine.h **** 	      SetEvent( task, signal->pSigCfg->evOnUpdate);
 410              		.loc 4 329 0
 411 0036 9968     		ldr	r1, [r3, #8]
 412 0038 55F82400 		ldr	r0, [r5, r4, lsl #2]
 413 003c FFF7FEFF 		bl	EE_oo_SetEvent
 414              	.LVL52:
 415              	.LBE73:
 326:.\bsw\rte/sc_engine.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 416              		.loc 4 326 0
 417 0040 0134     		adds	r4, r4, #1
 418              	.LVL53:
 419 0042 00E0     		b	.L30
 420              	.LVL54:
 421              	.L33:
 325:.\bsw\rte/sc_engine.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 29


 422              		.loc 4 325 0
 423 0044 0024     		movs	r4, #0
 424              	.LVL55:
 425              	.L30:
 326:.\bsw\rte/sc_engine.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 426              		.loc 4 326 0
 427 0046 094B     		ldr	r3, .L35+4
 428 0048 9B68     		ldr	r3, [r3, #8]
 429 004a 1A69     		ldr	r2, [r3, #16]
 430 004c 9442     		cmp	r4, r2
 431 004e F2D3     		bcc	.L31
 432              	.LVL56:
 433              	.L29:
 434              	.LBE72:
 435              	.LBE71:
 132:asw/swc_gaspedal.c ****     }
 133:asw/swc_gaspedal.c ****     else{
 134:asw/swc_gaspedal.c ****         engineSignal.engineValue = 0;
 135:asw/swc_gaspedal.c ****         //UART_LOG_PutString("Too old speed signal data");  
 136:asw/swc_gaspedal.c ****     }
 137:asw/swc_gaspedal.c ****     
 138:asw/swc_gaspedal.c ****     RTE_SC_ENGINE_set(&SO_ENGINE_signal, engineSignal);
 139:asw/swc_gaspedal.c ****     WD_Alive(WD_RUN_SETENGINE); 
 436              		.loc 1 139 0
 437 0050 0220     		movs	r0, #2
 438 0052 FFF7FEFF 		bl	WD_Alive
 439              	.LVL57:
 440              	.LBB74:
 441              	.LBB75:
 330:.\bsw\rte/sc_engine.h ****       }
 331:.\bsw\rte/sc_engine.h ****    }
 332:.\bsw\rte/sc_engine.h **** 
 333:.\bsw\rte/sc_engine.h ****    return ret;
 334:.\bsw\rte/sc_engine.h **** }                                                                                                  
 335:.\bsw\rte/sc_engine.h ****                                                                                                    
 336:.\bsw\rte/sc_engine.h ****                                                                                                    
 337:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
 338:.\bsw\rte/sc_engine.h **** /* Call functions to the connected drivers																			*/
 339:.\bsw\rte/sc_engine.h **** /**************************************************************************************************
 340:.\bsw\rte/sc_engine.h **** 
 341:.\bsw\rte/sc_engine.h ****                                                                                                    
 342:.\bsw\rte/sc_engine.h **** /**
 343:.\bsw\rte/sc_engine.h ****  *  Calls the connected driver interface to get a new value.
 344:.\bsw\rte/sc_engine.h ****  *
 345:.\bsw\rte/sc_engine.h ****  * @param SC_ENGINE_t * const signal: Pointer to the signal object
 346:.\bsw\rte/sc_engine.h ****  * @return  RC_t: Return value of the driver call
 347:.\bsw\rte/sc_engine.h ****  *
 348:.\bsw\rte/sc_engine.h ****  */
 349:.\bsw\rte/sc_engine.h **** inline RC_t RTE_SC_ENGINE_pullPort( SC_ENGINE_t * const signal )
 350:.\bsw\rte/sc_engine.h **** {                                                                                                  
 351:.\bsw\rte/sc_engine.h ****    RC_t ret = RC_SUCCESS;
 352:.\bsw\rte/sc_engine.h **** 
 353:.\bsw\rte/sc_engine.h ****                                                                                                    
 354:.\bsw\rte/sc_engine.h ****    if ( NULL != signal->pSigCfg->inDriver )
 355:.\bsw\rte/sc_engine.h ****    {
 356:.\bsw\rte/sc_engine.h **** 	  SC_ENGINE_data_t value = signal->value;
 357:.\bsw\rte/sc_engine.h ****       ret = signal->pSigCfg->inDriver(&value);
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 30


 358:.\bsw\rte/sc_engine.h ****                                                                                                    
 359:.\bsw\rte/sc_engine.h ****       if ( ret == RC_SUCCESS )                                                                     
 360:.\bsw\rte/sc_engine.h ****       {
 361:.\bsw\rte/sc_engine.h ****     	  //Critical Section
 362:.\bsw\rte/sc_engine.h ****     	  RTE_SC_ENGINE_set(signal, value);
 363:.\bsw\rte/sc_engine.h ****       }
 364:.\bsw\rte/sc_engine.h ****       else
 365:.\bsw\rte/sc_engine.h ****       {
 366:.\bsw\rte/sc_engine.h **** 		  //Signal is invalid. Error event (if present) will be fired
 367:.\bsw\rte/sc_engine.h **** 		  RTE_SC_ENGINE_setStatus(signal, RTE_SIGNALSTATUS_INVALID);
 368:.\bsw\rte/sc_engine.h ****       }
 369:.\bsw\rte/sc_engine.h **** 
 370:.\bsw\rte/sc_engine.h ****    }                                                                                               
 371:.\bsw\rte/sc_engine.h ****                                                                                                    
 372:.\bsw\rte/sc_engine.h ****    return ret;                                                                                     
 373:.\bsw\rte/sc_engine.h **** }                                                                                                  
 374:.\bsw\rte/sc_engine.h ****                                                                                                    
 375:.\bsw\rte/sc_engine.h **** /**
 376:.\bsw\rte/sc_engine.h ****  *  Calls the connected driver interfaces to send a value. Value will not be sent if it is INVALID.
 377:.\bsw\rte/sc_engine.h ****  *
 378:.\bsw\rte/sc_engine.h ****  * @param SC_ENGINE_t * const signal: Pointer to the signal object
 379:.\bsw\rte/sc_engine.h ****  * @return  RC_t: Return value of the driver call
 380:.\bsw\rte/sc_engine.h ****  *
 381:.\bsw\rte/sc_engine.h ****  **/
 382:.\bsw\rte/sc_engine.h **** inline RC_t RTE_SC_ENGINE_pushPort( const SC_ENGINE_t * const signal )
 383:.\bsw\rte/sc_engine.h **** {                                                                                                  
 384:.\bsw\rte/sc_engine.h ****    RC_t ret = RC_ERROR;
 385:.\bsw\rte/sc_engine.h **** 
 386:.\bsw\rte/sc_engine.h ****    if (RTE_SIGNALSTATUS_VALID == signal->status)
 442              		.loc 4 386 0
 443 0056 054B     		ldr	r3, .L35+4
 444 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 445 005a 022B     		cmp	r3, #2
 446 005c 03D1     		bne	.L26
 387:.\bsw\rte/sc_engine.h ****    {
 388:.\bsw\rte/sc_engine.h **** 	   ret = signal->pSigCfg->outDriver(&(signal->value));
 447              		.loc 4 388 0
 448 005e 0348     		ldr	r0, .L35+4
 449 0060 8368     		ldr	r3, [r0, #8]
 450 0062 5B68     		ldr	r3, [r3, #4]
 451 0064 9847     		blx	r3
 452              	.LVL58:
 453              	.L26:
 454 0066 38BD     		pop	{r3, r4, r5, pc}
 455              	.L36:
 456              		.align	2
 457              	.L35:
 458 0068 00000000 		.word	SO_SPEED_signal
 459 006c 00000000 		.word	SO_ENGINE_signal
 460              	.LBE75:
 461              	.LBE74:
 462              		.cfi_endproc
 463              	.LFE182:
 464              		.size	GASPEDAL_setEngine_run, .-GASPEDAL_setEngine_run
 465              		.section	.text.GASPEDAL_setBrakeLight_run,"ax",%progbits
 466              		.align	2
 467              		.global	GASPEDAL_setBrakeLight_run
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 31


 468              		.thumb
 469              		.thumb_func
 470              		.type	GASPEDAL_setBrakeLight_run, %function
 471              	GASPEDAL_setBrakeLight_run:
 472              	.LFB183:
 140:asw/swc_gaspedal.c ****     // Driver out of signal is LED Driver -> push out data to peripheral
 141:asw/swc_gaspedal.c ****     if (RTE_SC_ENGINE_pushPort(&SO_ENGINE_signal) != RC_SUCCESS){
 142:asw/swc_gaspedal.c ****         // Further error handling 
 143:asw/swc_gaspedal.c ****     }
 144:asw/swc_gaspedal.c ****     
 145:asw/swc_gaspedal.c ****     /* USER CODE END GASPEDAL_setEngine_run */
 146:asw/swc_gaspedal.c **** }
 147:asw/swc_gaspedal.c **** 
 148:asw/swc_gaspedal.c **** /*
 149:asw/swc_gaspedal.c ****  * component: swc_GasPedal
 150:asw/swc_gaspedal.c ****  * cycletime: 0
 151:asw/swc_gaspedal.c ****  * description: Runnable
 152:asw/swc_gaspedal.c ****  * events: ev_speed_onData
 153:asw/swc_gaspedal.c ****  * name: GASPEDAL_setBrakeLight_run
 154:asw/swc_gaspedal.c ****  * shortname: setBrakeLight
 155:asw/swc_gaspedal.c ****  * signalIN: so_speed
 156:asw/swc_gaspedal.c ****  * signalOUT: so_breakLight
 157:asw/swc_gaspedal.c ****  * task: tsk_io
 158:asw/swc_gaspedal.c ****  */
 159:asw/swc_gaspedal.c **** void GASPEDAL_setBrakeLight_run(RTE_event ev){
 473              		.loc 1 159 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              	.LVL59:
 160:asw/swc_gaspedal.c **** 	
 161:asw/swc_gaspedal.c **** 	/* USER CODE START GASPEDAL_setBrakeLight_run */
 162:asw/swc_gaspedal.c ****     
 163:asw/swc_gaspedal.c ****     if (ev & ev_speed_onData){
 478              		.loc 1 163 0
 479 0000 10F0100F 		tst	r0, #16
 480 0004 33D0     		beq	.L47
 159:asw/swc_gaspedal.c **** 	
 481              		.loc 1 159 0
 482 0006 38B5     		push	{r3, r4, r5, lr}
 483              		.cfi_def_cfa_offset 16
 484              		.cfi_offset 3, -16
 485              		.cfi_offset 4, -12
 486              		.cfi_offset 5, -8
 487              		.cfi_offset 14, -4
 488              	.LBB76:
 164:asw/swc_gaspedal.c ****         
 165:asw/swc_gaspedal.c ****         
 166:asw/swc_gaspedal.c ****         SC_SPEED_data_t speedSignal = SC_SPEED_INIT_DATA;
 489              		.loc 1 166 0
 490 0008 4FF00003 		mov	r3, #0
 491              	.LVL60:
 492              	.LBB77:
 493              	.LBB78:
 186:.\bsw\rte/sc_speed.h **** }
 494              		.loc 3 186 0
 495 000c 184A     		ldr	r2, .L48
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 32


 496 000e 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 497              	.LVL61:
 498              	.LBE78:
 499              	.LBE77:
 167:asw/swc_gaspedal.c ****     
 168:asw/swc_gaspedal.c ****         // Get a valid speed signal
 169:asw/swc_gaspedal.c ****         if(RTE_SC_SPEED_getStatus(&SO_SPEED_signal) == RTE_SIGNALSTATUS_VALID){
 500              		.loc 1 169 0
 501 0010 022A     		cmp	r2, #2
 502 0012 01D1     		bne	.L39
 503              	.LVL62:
 504 0014 164B     		ldr	r3, .L48
 505 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 506              	.LVL63:
 507              	.L39:
 170:asw/swc_gaspedal.c ****             speedSignal = RTE_SC_SPEED_get(&SO_SPEED_signal);
 171:asw/swc_gaspedal.c ****         }
 172:asw/swc_gaspedal.c ****         SC_BREAKLIGHT_data_t brakeLight = SC_BREAKLIGHT_INIT_DATA;
 508              		.loc 1 172 0
 509 0018 4FF00001 		mov	r1, #0
 510              	.LVL64:
 173:asw/swc_gaspedal.c ****         
 174:asw/swc_gaspedal.c ****         if(speedSignal.speedValue == 0){
 511              		.loc 1 174 0
 512 001c DBB2     		uxtb	r3, r3
 513              	.LVL65:
 514 001e 0BB9     		cbnz	r3, .L40
 175:asw/swc_gaspedal.c ****             brakeLight.breakLightStatus = TRUE;
 515              		.loc 1 175 0
 516 0020 4FF00101 		mov	r1, #1
 517              	.L40:
 518              	.LVL66:
 519              	.LBB79:
 520              	.LBB80:
 521              		.file 5 ".\\bsw\\rte/sc_breaklight.h"
   1:.\bsw\rte/sc_breaklight.h **** 
   2:.\bsw\rte/sc_breaklight.h **** 
   3:.\bsw\rte/sc_breaklight.h **** /**
   4:.\bsw\rte/sc_breaklight.h ****  *  file    SC_BREAKLIGHT_signal.h
   5:.\bsw\rte/sc_breaklight.h ****  *
   6:.\bsw\rte/sc_breaklight.h ****  *  brief   signal base class for signal sc_breaklight
   7:.\bsw\rte/sc_breaklight.h ****  *
   8:.\bsw\rte/sc_breaklight.h ****  *  author  Autogenerated, Peter Fromm       <peter.fromm@h-da.de>
   9:.\bsw\rte/sc_breaklight.h ****  *
  10:.\bsw\rte/sc_breaklight.h ****  * description: Break Light signal class
  11:.\bsw\rte/sc_breaklight.h ****  * name: sc_breakLight
  12:.\bsw\rte/sc_breaklight.h ****  * shortname: breakLight
  13:.\bsw\rte/sc_breaklight.h ****  *
  14:.\bsw\rte/sc_breaklight.h ****  */
  15:.\bsw\rte/sc_breaklight.h **** 
  16:.\bsw\rte/sc_breaklight.h **** 
  17:.\bsw\rte/sc_breaklight.h **** 
  18:.\bsw\rte/sc_breaklight.h **** #ifndef SC_BREAKLIGHT_SIGNAL_H_INCLUDED
  19:.\bsw\rte/sc_breaklight.h **** #define SC_BREAKLIGHT_SIGNAL_H_INCLUDED
  20:.\bsw\rte/sc_breaklight.h **** 
  21:.\bsw\rte/sc_breaklight.h **** /*================================================[ public includes  ]=============================
  22:.\bsw\rte/sc_breaklight.h **** #include "global.h"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 33


  23:.\bsw\rte/sc_breaklight.h **** #include "project.h"
  24:.\bsw\rte/sc_breaklight.h **** #include "rte.h"
  25:.\bsw\rte/sc_breaklight.h **** #include "rte_types.h"
  26:.\bsw\rte/sc_breaklight.h **** 
  27:.\bsw\rte/sc_breaklight.h **** #include "sc_breaklight_type.h"
  28:.\bsw\rte/sc_breaklight.h **** 
  29:.\bsw\rte/sc_breaklight.h **** 
  30:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
  31:.\bsw\rte/sc_breaklight.h **** /* The driver API block																						*/
  32:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
  33:.\bsw\rte/sc_breaklight.h ****                                                                                                    
  34:.\bsw\rte/sc_breaklight.h **** /**
  35:.\bsw\rte/sc_breaklight.h ****  *  Definition of function types for driver interfaces.
  36:.\bsw\rte/sc_breaklight.h ****  *  I-Port
  37:.\bsw\rte/sc_breaklight.h ****  */
  38:.\bsw\rte/sc_breaklight.h **** typedef RC_t (*SC_BREAKLIGHT_driverIn_t)(SC_BREAKLIGHT_data_t * const);
  39:.\bsw\rte/sc_breaklight.h **** 
  40:.\bsw\rte/sc_breaklight.h **** /**
  41:.\bsw\rte/sc_breaklight.h ****  *  Definition of function types for driver interfaces.
  42:.\bsw\rte/sc_breaklight.h ****  *  O-Port
  43:.\bsw\rte/sc_breaklight.h ****  */
  44:.\bsw\rte/sc_breaklight.h **** typedef RC_t (*SC_BREAKLIGHT_driverOut_t)( const SC_BREAKLIGHT_data_t * const);
  45:.\bsw\rte/sc_breaklight.h **** 
  46:.\bsw\rte/sc_breaklight.h **** 
  47:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
  48:.\bsw\rte/sc_breaklight.h **** /* The signal configuration API block																				*/
  49:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
  50:.\bsw\rte/sc_breaklight.h **** 
  51:.\bsw\rte/sc_breaklight.h **** /**
  52:.\bsw\rte/sc_breaklight.h ****  * Instances of the struct SC_BREAKLIGHT_cfg_t represent the signal object configuration.
  53:.\bsw\rte/sc_breaklight.h ****  */
  54:.\bsw\rte/sc_breaklight.h **** struct SC_BREAKLIGHT_cfg_s
  55:.\bsw\rte/sc_breaklight.h **** {
  56:.\bsw\rte/sc_breaklight.h ****     /**
  57:.\bsw\rte/sc_breaklight.h ****      * Function pointer to the input driver
  58:.\bsw\rte/sc_breaklight.h ****      */
  59:.\bsw\rte/sc_breaklight.h ****     SC_BREAKLIGHT_driverIn_t const inDriver;
  60:.\bsw\rte/sc_breaklight.h **** 
  61:.\bsw\rte/sc_breaklight.h ****     /**
  62:.\bsw\rte/sc_breaklight.h ****      * Function pointer to the output driver table
  63:.\bsw\rte/sc_breaklight.h ****      */
  64:.\bsw\rte/sc_breaklight.h ****    SC_BREAKLIGHT_driverOut_t const outDriver;
  65:.\bsw\rte/sc_breaklight.h ****    
  66:.\bsw\rte/sc_breaklight.h ****     /**
  67:.\bsw\rte/sc_breaklight.h ****      * Event onUpdate
  68:.\bsw\rte/sc_breaklight.h ****      */
  69:.\bsw\rte/sc_breaklight.h ****     EventMaskType const evOnUpdate;
  70:.\bsw\rte/sc_breaklight.h ****     
  71:.\bsw\rte/sc_breaklight.h ****     
  72:.\bsw\rte/sc_breaklight.h ****     /**
  73:.\bsw\rte/sc_breaklight.h ****      * Event onError
  74:.\bsw\rte/sc_breaklight.h ****      */
  75:.\bsw\rte/sc_breaklight.h ****     EventMaskType const evOnError;
  76:.\bsw\rte/sc_breaklight.h ****     
  77:.\bsw\rte/sc_breaklight.h ****     /**
  78:.\bsw\rte/sc_breaklight.h ****      * Task Count onUpdate
  79:.\bsw\rte/sc_breaklight.h ****      */
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 34


  80:.\bsw\rte/sc_breaklight.h ****     size_t const onUpdateTaskCount;
  81:.\bsw\rte/sc_breaklight.h **** 
  82:.\bsw\rte/sc_breaklight.h ****     /**
  83:.\bsw\rte/sc_breaklight.h ****      * Task List onUpdate
  84:.\bsw\rte/sc_breaklight.h ****      */
  85:.\bsw\rte/sc_breaklight.h ****     TaskTypeArray* const onUpdateTasks;
  86:.\bsw\rte/sc_breaklight.h ****     
  87:.\bsw\rte/sc_breaklight.h ****     /**
  88:.\bsw\rte/sc_breaklight.h ****      * Task Count onError
  89:.\bsw\rte/sc_breaklight.h ****      */
  90:.\bsw\rte/sc_breaklight.h ****     size_t const onErrorTaskCount;
  91:.\bsw\rte/sc_breaklight.h **** 
  92:.\bsw\rte/sc_breaklight.h ****     /**
  93:.\bsw\rte/sc_breaklight.h ****      * Task List onError
  94:.\bsw\rte/sc_breaklight.h ****      */
  95:.\bsw\rte/sc_breaklight.h ****     TaskTypeArray* const onErrorTasks;
  96:.\bsw\rte/sc_breaklight.h **** 	
  97:.\bsw\rte/sc_breaklight.h **** 	
  98:.\bsw\rte/sc_breaklight.h **** 	/**
  99:.\bsw\rte/sc_breaklight.h **** 	 * Ressourse is active? We need an additional boolean as a ressource value 0 is valid.
 100:.\bsw\rte/sc_breaklight.h **** 	 */
 101:.\bsw\rte/sc_breaklight.h **** 	 boolean_t const resourceActive;
 102:.\bsw\rte/sc_breaklight.h **** 	 
 103:.\bsw\rte/sc_breaklight.h **** 	/**
 104:.\bsw\rte/sc_breaklight.h **** 	 * Ressourse 
 105:.\bsw\rte/sc_breaklight.h **** 	 */
 106:.\bsw\rte/sc_breaklight.h **** 	 ResourceType const resource;
 107:.\bsw\rte/sc_breaklight.h **** 
 108:.\bsw\rte/sc_breaklight.h **** };                                                                                                 
 109:.\bsw\rte/sc_breaklight.h **** typedef const struct SC_BREAKLIGHT_cfg_s SC_BREAKLIGHT_cfg_t;
 110:.\bsw\rte/sc_breaklight.h ****                               
 111:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 112:.\bsw\rte/sc_breaklight.h **** /* The data interface block																							*/
 113:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 114:.\bsw\rte/sc_breaklight.h **** 
 115:.\bsw\rte/sc_breaklight.h ****                                                                                                    
 116:.\bsw\rte/sc_breaklight.h **** 							  
 117:.\bsw\rte/sc_breaklight.h **** /**
 118:.\bsw\rte/sc_breaklight.h ****  * Instances of the struct SC_BREAKLIGHT_t represent the signal objects.
 119:.\bsw\rte/sc_breaklight.h ****  * A signal object contains the current application value 'value' as well as relevant meta data.
 120:.\bsw\rte/sc_breaklight.h ****  */
 121:.\bsw\rte/sc_breaklight.h **** struct SC_BREAKLIGHT_s
 122:.\bsw\rte/sc_breaklight.h **** {                                                                                                  
 123:.\bsw\rte/sc_breaklight.h **** 
 124:.\bsw\rte/sc_breaklight.h **** 	/**
 125:.\bsw\rte/sc_breaklight.h **** 	 * Data buffer for the application value
 126:.\bsw\rte/sc_breaklight.h **** 	 */
 127:.\bsw\rte/sc_breaklight.h ****     SC_BREAKLIGHT_data_t value;
 128:.\bsw\rte/sc_breaklight.h **** 
 129:.\bsw\rte/sc_breaklight.h ****     /**
 130:.\bsw\rte/sc_breaklight.h ****      * Current signal status
 131:.\bsw\rte/sc_breaklight.h ****      */
 132:.\bsw\rte/sc_breaklight.h ****     RTE_signalStatus_t status;
 133:.\bsw\rte/sc_breaklight.h **** 
 134:.\bsw\rte/sc_breaklight.h ****     /**
 135:.\bsw\rte/sc_breaklight.h ****      * Current age of the signal (in calling cycles)
 136:.\bsw\rte/sc_breaklight.h ****      */
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 35


 137:.\bsw\rte/sc_breaklight.h ****     uint32_t age;
 138:.\bsw\rte/sc_breaklight.h **** 
 139:.\bsw\rte/sc_breaklight.h ****     /**
 140:.\bsw\rte/sc_breaklight.h ****      * Pointer to the signal configuration
 141:.\bsw\rte/sc_breaklight.h ****      */
 142:.\bsw\rte/sc_breaklight.h **** 	const SC_BREAKLIGHT_cfg_t * const    pSigCfg;
 143:.\bsw\rte/sc_breaklight.h **** 
 144:.\bsw\rte/sc_breaklight.h **** };                                                                                                 
 145:.\bsw\rte/sc_breaklight.h **** typedef struct SC_BREAKLIGHT_s SC_BREAKLIGHT_t;
 146:.\bsw\rte/sc_breaklight.h **** 
 147:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 148:.\bsw\rte/sc_breaklight.h **** /* Signal initialisation   																							*/
 149:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 150:.\bsw\rte/sc_breaklight.h **** 
 151:.\bsw\rte/sc_breaklight.h **** /**
 152:.\bsw\rte/sc_breaklight.h ****  * Initializes a signal instance with a passed init value.
 153:.\bsw\rte/sc_breaklight.h ****  * Depending on the configured conversion or scaling function the raw_value will be calculated.
 154:.\bsw\rte/sc_breaklight.h ****  * Signal status will change from RTE_SIGNALSTATUS_STARTUP to RTE_SIGNALSTATUS_INITIALIZED.
 155:.\bsw\rte/sc_breaklight.h ****  *
 156:.\bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object which will be initialised
 157:.\bsw\rte/sc_breaklight.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 158:.\bsw\rte/sc_breaklight.h ****  *
 159:.\bsw\rte/sc_breaklight.h ****  **/
 160:.\bsw\rte/sc_breaklight.h **** inline RC_t RTE_SC_BREAKLIGHT_init( SC_BREAKLIGHT_t * const signal )
 161:.\bsw\rte/sc_breaklight.h **** {                                                                                                  
 162:.\bsw\rte/sc_breaklight.h **** 
 163:.\bsw\rte/sc_breaklight.h ****    RC_t ret = RC_SUCCESS;
 164:.\bsw\rte/sc_breaklight.h **** 
 165:.\bsw\rte/sc_breaklight.h ****    //Set value and raw value
 166:.\bsw\rte/sc_breaklight.h ****    signal->value  = SC_BREAKLIGHT_INIT_DATA;
 167:.\bsw\rte/sc_breaklight.h ****    signal->age    = 0;
 168:.\bsw\rte/sc_breaklight.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 169:.\bsw\rte/sc_breaklight.h **** 
 170:.\bsw\rte/sc_breaklight.h ****    return ret;
 171:.\bsw\rte/sc_breaklight.h **** }
 172:.\bsw\rte/sc_breaklight.h **** 
 173:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 174:.\bsw\rte/sc_breaklight.h **** /* Status and timeout control																						*/
 175:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 176:.\bsw\rte/sc_breaklight.h **** 
 177:.\bsw\rte/sc_breaklight.h **** /**
 178:.\bsw\rte/sc_breaklight.h ****  *  Returns the current signal status of the passed signal instance.
 179:.\bsw\rte/sc_breaklight.h ****  *
 180:.\bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 181:.\bsw\rte/sc_breaklight.h ****  * @return  sig_status_t: The current signal status
 182:.\bsw\rte/sc_breaklight.h ****  *
 183:.\bsw\rte/sc_breaklight.h ****  **/
 184:.\bsw\rte/sc_breaklight.h **** inline RTE_signalStatus_t RTE_SC_BREAKLIGHT_getStatus( const SC_BREAKLIGHT_t * const signal )
 185:.\bsw\rte/sc_breaklight.h **** {
 186:.\bsw\rte/sc_breaklight.h ****    return signal->status;
 187:.\bsw\rte/sc_breaklight.h **** }
 188:.\bsw\rte/sc_breaklight.h **** 
 189:.\bsw\rte/sc_breaklight.h **** 
 190:.\bsw\rte/sc_breaklight.h **** /**
 191:.\bsw\rte/sc_breaklight.h ****  *  Sets a new signal status of the passed signal instance by passing the new status.
 192:.\bsw\rte/sc_breaklight.h ****  *
 193:.\bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 36


 194:.\bsw\rte/sc_breaklight.h ****  * @param  const sig_status_t status: New signal status
 195:.\bsw\rte/sc_breaklight.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 196:.\bsw\rte/sc_breaklight.h ****  *
 197:.\bsw\rte/sc_breaklight.h ****  */
 198:.\bsw\rte/sc_breaklight.h **** inline RC_t RTE_SC_BREAKLIGHT_setStatus( SC_BREAKLIGHT_t * const signal, const RTE_signalStatus_t s
 199:.\bsw\rte/sc_breaklight.h **** {
 200:.\bsw\rte/sc_breaklight.h ****    signal->status = status;
 201:.\bsw\rte/sc_breaklight.h ****    size_t taskNum=0;
 202:.\bsw\rte/sc_breaklight.h ****    
 203:.\bsw\rte/sc_breaklight.h ****    //Fire error events in case of invalid state
 204:.\bsw\rte/sc_breaklight.h ****    if (signal->status == RTE_SIGNALSTATUS_INVALID)
 205:.\bsw\rte/sc_breaklight.h ****    {
 206:.\bsw\rte/sc_breaklight.h **** 	    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 207:.\bsw\rte/sc_breaklight.h **** 		TaskTypeArray* pTaskArray = signal->pSigCfg->onErrorTasks;
 208:.\bsw\rte/sc_breaklight.h **** 
 209:.\bsw\rte/sc_breaklight.h **** 		if (0 != signal->pSigCfg->evOnError && NULL != pTaskArray){
 210:.\bsw\rte/sc_breaklight.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 211:.\bsw\rte/sc_breaklight.h **** 				TaskType task = (*pTaskArray)[taskNum];
 212:.\bsw\rte/sc_breaklight.h **** 				SetEvent( task, signal->pSigCfg->evOnError);
 213:.\bsw\rte/sc_breaklight.h **** 			}
 214:.\bsw\rte/sc_breaklight.h **** 		}
 215:.\bsw\rte/sc_breaklight.h ****    }
 216:.\bsw\rte/sc_breaklight.h ****    
 217:.\bsw\rte/sc_breaklight.h ****    return RC_SUCCESS;
 218:.\bsw\rte/sc_breaklight.h **** }
 219:.\bsw\rte/sc_breaklight.h **** 
 220:.\bsw\rte/sc_breaklight.h **** 
 221:.\bsw\rte/sc_breaklight.h **** /**
 222:.\bsw\rte/sc_breaklight.h ****  * Returns the count of refreshing trials (refresh, set or set_raw) that failed.
 223:.\bsw\rte/sc_breaklight.h ****  * Prerquisite: The signal is refreshed cyclically
 224:.\bsw\rte/sc_breaklight.h ****  *
 225:.\bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 226:.\bsw\rte/sc_breaklight.h ****  * @return uint32_t: Number of cycles since the signal has been updated for the last time
 227:.\bsw\rte/sc_breaklight.h ****  */
 228:.\bsw\rte/sc_breaklight.h **** inline uint32_t RTE_SC_BREAKLIGHT_getAge( const SC_BREAKLIGHT_t * const signal )
 229:.\bsw\rte/sc_breaklight.h **** {
 230:.\bsw\rte/sc_breaklight.h ****    return signal->age;
 231:.\bsw\rte/sc_breaklight.h **** }
 232:.\bsw\rte/sc_breaklight.h **** 
 233:.\bsw\rte/sc_breaklight.h **** /**
 234:.\bsw\rte/sc_breaklight.h ****  * Should be called by application or driver if no new value can be provided.
 235:.\bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 236:.\bsw\rte/sc_breaklight.h ****  * @param uint32_t increment: incrementvalue, typically in [ms]
 237:.\bsw\rte/sc_breaklight.h ****  * @return void
 238:.\bsw\rte/sc_breaklight.h ****  */
 239:.\bsw\rte/sc_breaklight.h **** inline void RTE_SC_BREAKLIGHT_incAge(  SC_BREAKLIGHT_t * const signal , uint32_t increment)
 240:.\bsw\rte/sc_breaklight.h **** {
 241:.\bsw\rte/sc_breaklight.h **** 	   //Hack....
 242:.\bsw\rte/sc_breaklight.h **** 	   if ( 0xFFFF0000 > (signal->age + increment) )
 243:.\bsw\rte/sc_breaklight.h **** 	   {
 244:.\bsw\rte/sc_breaklight.h **** 	      signal->age += increment;
 245:.\bsw\rte/sc_breaklight.h **** 	   }
 246:.\bsw\rte/sc_breaklight.h **** }
 247:.\bsw\rte/sc_breaklight.h **** 
 248:.\bsw\rte/sc_breaklight.h **** 
 249:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 250:.\bsw\rte/sc_breaklight.h **** /* Application Data read/write Interface																			*/
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 37


 251:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 252:.\bsw\rte/sc_breaklight.h **** 
 253:.\bsw\rte/sc_breaklight.h **** /**
 254:.\bsw\rte/sc_breaklight.h ****  * Returns the current application value as pointer to the signal payload.
 255:.\bsw\rte/sc_breaklight.h ****  * Careful: This is not threadsafe!!!
 256:.\bsw\rte/sc_breaklight.h ****  *
 257:.\bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 258:.\bsw\rte/sc_breaklight.h ****  * @return sc_breaklight_data_t*: pointer to the current value of the application data buffer
 259:.\bsw\rte/sc_breaklight.h ****  *
 260:.\bsw\rte/sc_breaklight.h ****  **/
 261:.\bsw\rte/sc_breaklight.h **** inline SC_BREAKLIGHT_data_t* RTE_SC_BREAKLIGHT_getPtr( SC_BREAKLIGHT_t * const signal )
 262:.\bsw\rte/sc_breaklight.h **** {               
 263:.\bsw\rte/sc_breaklight.h ****    //Todo: Critical region cannot be protected using return values																						
 264:.\bsw\rte/sc_breaklight.h ****    return &(signal->value);                                                                        
 265:.\bsw\rte/sc_breaklight.h **** }
 266:.\bsw\rte/sc_breaklight.h **** 
 267:.\bsw\rte/sc_breaklight.h **** /**
 268:.\bsw\rte/sc_breaklight.h ****  * Returns the current application value of the passed signal instance.
 269:.\bsw\rte/sc_breaklight.h ****  *
 270:.\bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 271:.\bsw\rte/sc_breaklight.h ****  * @return sc_breaklight_data_t: current value of the application data buffer
 272:.\bsw\rte/sc_breaklight.h ****  *
 273:.\bsw\rte/sc_breaklight.h ****  **/
 274:.\bsw\rte/sc_breaklight.h **** inline SC_BREAKLIGHT_data_t RTE_SC_BREAKLIGHT_get( const SC_BREAKLIGHT_t * const signal )
 275:.\bsw\rte/sc_breaklight.h **** {               
 276:.\bsw\rte/sc_breaklight.h ****    //Todo: Critical region cannot be protected using return values																						
 277:.\bsw\rte/sc_breaklight.h ****    return signal->value;                                                                           
 278:.\bsw\rte/sc_breaklight.h **** }                                                                                                  
 279:.\bsw\rte/sc_breaklight.h ****                                                                                                    
 280:.\bsw\rte/sc_breaklight.h **** /**
 281:.\bsw\rte/sc_breaklight.h ****  * Returns the current application value of the passed signal instance threadsafe.
 282:.\bsw\rte/sc_breaklight.h ****  *
 283:.\bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 284:.\bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_data_t* data: Pointer to the return data Pointer to the signal object
 285:.\bsw\rte/sc_breaklight.h ****  * @return RC_SUCCESS
 286:.\bsw\rte/sc_breaklight.h ****  *
 287:.\bsw\rte/sc_breaklight.h ****  **/
 288:.\bsw\rte/sc_breaklight.h **** inline RC_t RTE_SC_BREAKLIGHT_getThreadSafe( const SC_BREAKLIGHT_t * const signal, SC_BREAKLIGHT_da
 289:.\bsw\rte/sc_breaklight.h **** {    
 290:.\bsw\rte/sc_breaklight.h ****    if (TRUE == signal->pSigCfg->resourceActive) GetResource(signal->pSigCfg->resource);
 291:.\bsw\rte/sc_breaklight.h ****    *data = signal->value;
 292:.\bsw\rte/sc_breaklight.h ****    if (TRUE == signal->pSigCfg->resourceActive) ReleaseResource(signal->pSigCfg->resource);        
 293:.\bsw\rte/sc_breaklight.h **** 
 294:.\bsw\rte/sc_breaklight.h ****    return RC_SUCCESS;                                                                   
 295:.\bsw\rte/sc_breaklight.h ****    
 296:.\bsw\rte/sc_breaklight.h **** }                                                                                                  
 297:.\bsw\rte/sc_breaklight.h ****                                                                                                    
 298:.\bsw\rte/sc_breaklight.h **** /**
 299:.\bsw\rte/sc_breaklight.h ****  * Sets a new application value to the passed signal instance by passing the new value.
 300:.\bsw\rte/sc_breaklight.h ****  * The corresponding driver raw value will be calculated immediately by using the default conversio
 301:.\bsw\rte/sc_breaklight.h ****  * signal specific scaling function.
 302:.\bsw\rte/sc_breaklight.h ****  * The signal age will be set to 0 and the new status will be 'RTE_SIGNALSTATUS_VALID'.
 303:.\bsw\rte/sc_breaklight.h ****  *
 304:.\bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 305:.\bsw\rte/sc_breaklight.h ****  * @param  sc_breaklight_data_t const value: value for the application data buffer
 306:.\bsw\rte/sc_breaklight.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 307:.\bsw\rte/sc_breaklight.h ****  *
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 38


 308:.\bsw\rte/sc_breaklight.h ****  **/
 309:.\bsw\rte/sc_breaklight.h **** inline RC_t RTE_SC_BREAKLIGHT_set(SC_BREAKLIGHT_t * const signal, const SC_BREAKLIGHT_data_t value 
 310:.\bsw\rte/sc_breaklight.h **** {
 311:.\bsw\rte/sc_breaklight.h **** 
 312:.\bsw\rte/sc_breaklight.h ****    RC_t ret = RC_SUCCESS;
 313:.\bsw\rte/sc_breaklight.h ****    size_t taskNum=0;
 314:.\bsw\rte/sc_breaklight.h **** 
 315:.\bsw\rte/sc_breaklight.h **** 
 316:.\bsw\rte/sc_breaklight.h ****    if (TRUE == signal->pSigCfg->resourceActive) GetResource(signal->pSigCfg->resource);
 522              		.loc 5 316 0
 523 0024 134B     		ldr	r3, .L48+4
 524 0026 9A68     		ldr	r2, [r3, #8]
 525              	.LVL67:
 317:.\bsw\rte/sc_breaklight.h ****    signal->value  = value;
 526              		.loc 5 317 0
 527 0028 1970     		strb	r1, [r3]
 318:.\bsw\rte/sc_breaklight.h ****    signal->age    = 0;
 528              		.loc 5 318 0
 529 002a 0021     		movs	r1, #0
 530              	.LVL68:
 531 002c 5960     		str	r1, [r3, #4]
 319:.\bsw\rte/sc_breaklight.h ****    signal->status = RTE_SIGNALSTATUS_VALID;
 532              		.loc 5 319 0
 533 002e 0221     		movs	r1, #2
 534 0030 5970     		strb	r1, [r3, #1]
 320:.\bsw\rte/sc_breaklight.h ****    if (TRUE == signal->pSigCfg->resourceActive) ReleaseResource(signal->pSigCfg->resource);
 321:.\bsw\rte/sc_breaklight.h **** 
 322:.\bsw\rte/sc_breaklight.h ****    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 323:.\bsw\rte/sc_breaklight.h ****    TaskTypeArray* pTaskArray = signal->pSigCfg->onUpdateTasks;
 535              		.loc 5 323 0
 536 0032 5569     		ldr	r5, [r2, #20]
 537              	.LVL69:
 324:.\bsw\rte/sc_breaklight.h **** 
 325:.\bsw\rte/sc_breaklight.h ****    if (0 != signal->pSigCfg->evOnUpdate && NULL != pTaskArray){
 538              		.loc 5 325 0
 539 0034 9368     		ldr	r3, [r2, #8]
 540 0036 73B1     		cbz	r3, .L41
 541 0038 3DB9     		cbnz	r5, .L45
 542 003a 0CE0     		b	.L41
 543              	.LVL70:
 544              	.L43:
 545              	.LBB81:
 326:.\bsw\rte/sc_breaklight.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 327:.\bsw\rte/sc_breaklight.h **** 		  
 328:.\bsw\rte/sc_breaklight.h ****           TaskType task = (*pTaskArray)[taskNum];
 329:.\bsw\rte/sc_breaklight.h **** 	      SetEvent( task, signal->pSigCfg->evOnUpdate);
 546              		.loc 5 329 0
 547 003c 9968     		ldr	r1, [r3, #8]
 548 003e 55F82400 		ldr	r0, [r5, r4, lsl #2]
 549 0042 FFF7FEFF 		bl	EE_oo_SetEvent
 550              	.LVL71:
 551              	.LBE81:
 326:.\bsw\rte/sc_breaklight.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 552              		.loc 5 326 0
 553 0046 0134     		adds	r4, r4, #1
 554              	.LVL72:
 555 0048 00E0     		b	.L42
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 39


 556              	.LVL73:
 557              	.L45:
 325:.\bsw\rte/sc_breaklight.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 558              		.loc 5 325 0
 559 004a 0024     		movs	r4, #0
 560              	.LVL74:
 561              	.L42:
 326:.\bsw\rte/sc_breaklight.h ****       for( taskNum=0 ; taskNum < signal->pSigCfg->onUpdateTaskCount ;taskNum++){
 562              		.loc 5 326 0
 563 004c 094B     		ldr	r3, .L48+4
 564 004e 9B68     		ldr	r3, [r3, #8]
 565 0050 1A69     		ldr	r2, [r3, #16]
 566 0052 9442     		cmp	r4, r2
 567 0054 F2D3     		bcc	.L43
 568              	.LVL75:
 569              	.L41:
 570              	.LBE80:
 571              	.LBE79:
 176:asw/swc_gaspedal.c ****         }
 177:asw/swc_gaspedal.c ****         else{
 178:asw/swc_gaspedal.c ****             brakeLight.breakLightStatus = FALSE;
 179:asw/swc_gaspedal.c ****         }
 180:asw/swc_gaspedal.c ****         
 181:asw/swc_gaspedal.c ****         RTE_SC_BREAKLIGHT_set(&SO_BREAKLIGHT_signal, brakeLight);
 182:asw/swc_gaspedal.c ****         
 183:asw/swc_gaspedal.c ****         WD_Alive(WD_RUN_SETBRAKELIGHT); 
 572              		.loc 1 183 0
 573 0056 0320     		movs	r0, #3
 574 0058 FFF7FEFF 		bl	WD_Alive
 575              	.LVL76:
 576              	.LBB82:
 577              	.LBB83:
 330:.\bsw\rte/sc_breaklight.h ****       }
 331:.\bsw\rte/sc_breaklight.h ****    }
 332:.\bsw\rte/sc_breaklight.h **** 
 333:.\bsw\rte/sc_breaklight.h ****    return ret;
 334:.\bsw\rte/sc_breaklight.h **** }                                                                                                  
 335:.\bsw\rte/sc_breaklight.h ****                                                                                                    
 336:.\bsw\rte/sc_breaklight.h ****                                                                                                    
 337:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 338:.\bsw\rte/sc_breaklight.h **** /* Call functions to the connected drivers																			*/
 339:.\bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 340:.\bsw\rte/sc_breaklight.h **** 
 341:.\bsw\rte/sc_breaklight.h ****                                                                                                    
 342:.\bsw\rte/sc_breaklight.h **** /**
 343:.\bsw\rte/sc_breaklight.h ****  *  Calls the connected driver interface to get a new value.
 344:.\bsw\rte/sc_breaklight.h ****  *
 345:.\bsw\rte/sc_breaklight.h ****  * @param SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 346:.\bsw\rte/sc_breaklight.h ****  * @return  RC_t: Return value of the driver call
 347:.\bsw\rte/sc_breaklight.h ****  *
 348:.\bsw\rte/sc_breaklight.h ****  */
 349:.\bsw\rte/sc_breaklight.h **** inline RC_t RTE_SC_BREAKLIGHT_pullPort( SC_BREAKLIGHT_t * const signal )
 350:.\bsw\rte/sc_breaklight.h **** {                                                                                                  
 351:.\bsw\rte/sc_breaklight.h ****    RC_t ret = RC_SUCCESS;
 352:.\bsw\rte/sc_breaklight.h **** 
 353:.\bsw\rte/sc_breaklight.h ****                                                                                                    
 354:.\bsw\rte/sc_breaklight.h ****    if ( NULL != signal->pSigCfg->inDriver )
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 40


 355:.\bsw\rte/sc_breaklight.h ****    {
 356:.\bsw\rte/sc_breaklight.h **** 	  SC_BREAKLIGHT_data_t value = signal->value;
 357:.\bsw\rte/sc_breaklight.h ****       ret = signal->pSigCfg->inDriver(&value);
 358:.\bsw\rte/sc_breaklight.h ****                                                                                                    
 359:.\bsw\rte/sc_breaklight.h ****       if ( ret == RC_SUCCESS )                                                                     
 360:.\bsw\rte/sc_breaklight.h ****       {
 361:.\bsw\rte/sc_breaklight.h ****     	  //Critical Section
 362:.\bsw\rte/sc_breaklight.h ****     	  RTE_SC_BREAKLIGHT_set(signal, value);
 363:.\bsw\rte/sc_breaklight.h ****       }
 364:.\bsw\rte/sc_breaklight.h ****       else
 365:.\bsw\rte/sc_breaklight.h ****       {
 366:.\bsw\rte/sc_breaklight.h **** 		  //Signal is invalid. Error event (if present) will be fired
 367:.\bsw\rte/sc_breaklight.h **** 		  RTE_SC_BREAKLIGHT_setStatus(signal, RTE_SIGNALSTATUS_INVALID);
 368:.\bsw\rte/sc_breaklight.h ****       }
 369:.\bsw\rte/sc_breaklight.h **** 
 370:.\bsw\rte/sc_breaklight.h ****    }                                                                                               
 371:.\bsw\rte/sc_breaklight.h ****                                                                                                    
 372:.\bsw\rte/sc_breaklight.h ****    return ret;                                                                                     
 373:.\bsw\rte/sc_breaklight.h **** }                                                                                                  
 374:.\bsw\rte/sc_breaklight.h ****                                                                                                    
 375:.\bsw\rte/sc_breaklight.h **** /**
 376:.\bsw\rte/sc_breaklight.h ****  *  Calls the connected driver interfaces to send a value. Value will not be sent if it is INVALID.
 377:.\bsw\rte/sc_breaklight.h ****  *
 378:.\bsw\rte/sc_breaklight.h ****  * @param SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 379:.\bsw\rte/sc_breaklight.h ****  * @return  RC_t: Return value of the driver call
 380:.\bsw\rte/sc_breaklight.h ****  *
 381:.\bsw\rte/sc_breaklight.h ****  **/
 382:.\bsw\rte/sc_breaklight.h **** inline RC_t RTE_SC_BREAKLIGHT_pushPort( const SC_BREAKLIGHT_t * const signal )
 383:.\bsw\rte/sc_breaklight.h **** {                                                                                                  
 384:.\bsw\rte/sc_breaklight.h ****    RC_t ret = RC_ERROR;
 385:.\bsw\rte/sc_breaklight.h **** 
 386:.\bsw\rte/sc_breaklight.h ****    if (RTE_SIGNALSTATUS_VALID == signal->status)
 578              		.loc 5 386 0
 579 005c 054B     		ldr	r3, .L48+4
 580 005e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 581 0060 022B     		cmp	r3, #2
 582 0062 03D1     		bne	.L37
 387:.\bsw\rte/sc_breaklight.h ****    {
 388:.\bsw\rte/sc_breaklight.h **** 	   ret = signal->pSigCfg->outDriver(&(signal->value));
 583              		.loc 5 388 0
 584 0064 0348     		ldr	r0, .L48+4
 585 0066 8368     		ldr	r3, [r0, #8]
 586 0068 5B68     		ldr	r3, [r3, #4]
 587 006a 9847     		blx	r3
 588              	.LVL77:
 589              	.L37:
 590 006c 38BD     		pop	{r3, r4, r5, pc}
 591              	.LVL78:
 592              	.L47:
 593              		.cfi_def_cfa_offset 0
 594              		.cfi_restore 3
 595              		.cfi_restore 4
 596              		.cfi_restore 5
 597              		.cfi_restore 14
 598 006e 7047     		bx	lr
 599              	.L49:
 600              		.align	2
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 41


 601              	.L48:
 602 0070 00000000 		.word	SO_SPEED_signal
 603 0074 00000000 		.word	SO_BREAKLIGHT_signal
 604              	.LBE83:
 605              	.LBE82:
 606              	.LBE76:
 607              		.cfi_endproc
 608              	.LFE183:
 609              		.size	GASPEDAL_setBrakeLight_run, .-GASPEDAL_setBrakeLight_run
 610              		.section	.text.GASPEDAL_HMI_run,"ax",%progbits
 611              		.align	2
 612              		.global	GASPEDAL_HMI_run
 613              		.thumb
 614              		.thumb_func
 615              		.type	GASPEDAL_HMI_run, %function
 616              	GASPEDAL_HMI_run:
 617              	.LFB184:
 184:asw/swc_gaspedal.c ****         if (RTE_SC_BREAKLIGHT_pushPort(&SO_BREAKLIGHT_signal) != RC_SUCCESS){
 185:asw/swc_gaspedal.c ****             // Further error handling
 186:asw/swc_gaspedal.c ****         }
 187:asw/swc_gaspedal.c ****     }
 188:asw/swc_gaspedal.c ****     
 189:asw/swc_gaspedal.c ****     /* USER CODE END GASPEDAL_setBrakeLight_run */
 190:asw/swc_gaspedal.c **** }
 191:asw/swc_gaspedal.c **** 
 192:asw/swc_gaspedal.c **** /*
 193:asw/swc_gaspedal.c ****  * component: swc_GasPedal
 194:asw/swc_gaspedal.c ****  * cycletime: 0
 195:asw/swc_gaspedal.c ****  * description: Output touch screen runnable
 196:asw/swc_gaspedal.c ****  * events: ev_screen_onData
 197:asw/swc_gaspedal.c ****  * name: GASPEDAL_HMI_run
 198:asw/swc_gaspedal.c ****  * shortname: HMI
 199:asw/swc_gaspedal.c ****  * signalIN: so_screen
 200:asw/swc_gaspedal.c ****  * signalOUT: 
 201:asw/swc_gaspedal.c ****  * task: tsk_tft
 202:asw/swc_gaspedal.c ****  */
 203:asw/swc_gaspedal.c **** void GASPEDAL_HMI_run(RTE_event ev){
 618              		.loc 1 203 0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 0
 621              		@ frame_needed = 0, uses_anonymous_args = 0
 622              	.LVL79:
 623 0000 08B5     		push	{r3, lr}
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 3, -8
 626              		.cfi_offset 14, -4
 204:asw/swc_gaspedal.c **** 	
 205:asw/swc_gaspedal.c **** 	/* USER CODE START GASPEDAL_HMI_run */
 206:asw/swc_gaspedal.c ****     if (ev_screen_onData & ev)
 207:asw/swc_gaspedal.c ****     {
 208:asw/swc_gaspedal.c ****         // To do list
 209:asw/swc_gaspedal.c ****     }
 210:asw/swc_gaspedal.c ****     WD_Alive(WD_RUN_HMI); 
 627              		.loc 1 210 0
 628 0002 0420     		movs	r0, #4
 629              	.LVL80:
 630 0004 FFF7FEFF 		bl	WD_Alive
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 42


 631              	.LVL81:
 632 0008 08BD     		pop	{r3, pc}
 633              		.cfi_endproc
 634              	.LFE184:
 635              		.size	GASPEDAL_HMI_run, .-GASPEDAL_HMI_run
 636 000a 00BF     		.text
 637              	.Letext0:
 638              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 639              		.file 7 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 640              		.file 8 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 641              		.file 9 "Generated_Source\\PSoC5/ErikaOS_1_common_ee_types.inc"
 642              		.file 10 "Generated_Source\\PSoC5/ErikaOS_1_cortex_mx_ee_cpu.inc"
 643              		.file 11 "Generated_Source\\PSoC5/ErikaOS_1_ee_oo_common.inc"
 644              		.file 12 ".\\bsw/global.h"
 645              		.file 13 ".\\bsw\\rte/rte_types.h"
 646              		.file 14 ".\\bsw\\rte/rte.h"
 647              		.file 15 ".\\bsw\\rte/sc_joystick_type.h"
 648              		.file 16 ".\\bsw\\rte/sc_speed_type.h"
 649              		.file 17 ".\\bsw\\rte/sc_engine_type.h"
 650              		.file 18 ".\\bsw\\rte/sc_breaklight_type.h"
 651              		.file 19 "Generated_Source\\PSoC5/ErikaOS_1_ee_oo_intfunc.inc"
 652              		.file 20 "Generated_Source\\PSoC5/ErikaOS_1_cortex_mx_ee_context.inc"
 653              		.file 21 "Generated_Source\\PSoC5/ErikaOS_1_common_ee_primitives.inc"
 654              		.file 22 "Generated_Source\\PSoC5/core_cm3.h"
 655              		.file 23 ".\\bsw\\rte/sp_common.h"
 656              		.file 24 "Generated_Source\\PSoC5/ErikaOS_1_ee_oo_kernel.inc"
 657              		.file 25 ".\\bsw\\LabBoard/watchdog.h"
 658              		.section	.debug_info,"",%progbits
 659              	.Ldebug_info0:
 660 0000 78100000 		.4byte	0x1078
 661 0004 0400     		.2byte	0x4
 662 0006 00000000 		.4byte	.Ldebug_abbrev0
 663 000a 04       		.byte	0x4
 664 000b 01       		.uleb128 0x1
 665 000c 22070000 		.4byte	.LASF150
 666 0010 0C       		.byte	0xc
 667 0011 D4060000 		.4byte	.LASF151
 668 0015 AE050000 		.4byte	.LASF152
 669 0019 00000000 		.4byte	.Ldebug_ranges0+0
 670 001d 00000000 		.4byte	0
 671 0021 00000000 		.4byte	.Ldebug_line0
 672 0025 02       		.uleb128 0x2
 673 0026 01       		.byte	0x1
 674 0027 06       		.byte	0x6
 675 0028 9A010000 		.4byte	.LASF0
 676 002c 03       		.uleb128 0x3
 677 002d BC000000 		.4byte	.LASF4
 678 0031 06       		.byte	0x6
 679 0032 1D       		.byte	0x1d
 680 0033 37000000 		.4byte	0x37
 681 0037 02       		.uleb128 0x2
 682 0038 01       		.byte	0x1
 683 0039 08       		.byte	0x8
 684 003a 81060000 		.4byte	.LASF1
 685 003e 02       		.uleb128 0x2
 686 003f 02       		.byte	0x2
 687 0040 05       		.byte	0x5
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 43


 688 0041 3E020000 		.4byte	.LASF2
 689 0045 02       		.uleb128 0x2
 690 0046 02       		.byte	0x2
 691 0047 07       		.byte	0x7
 692 0048 90020000 		.4byte	.LASF3
 693 004c 03       		.uleb128 0x3
 694 004d 93080000 		.4byte	.LASF5
 695 0051 06       		.byte	0x6
 696 0052 3F       		.byte	0x3f
 697 0053 57000000 		.4byte	0x57
 698 0057 02       		.uleb128 0x2
 699 0058 04       		.byte	0x4
 700 0059 05       		.byte	0x5
 701 005a 07020000 		.4byte	.LASF6
 702 005e 03       		.uleb128 0x3
 703 005f C4020000 		.4byte	.LASF7
 704 0063 06       		.byte	0x6
 705 0064 41       		.byte	0x41
 706 0065 69000000 		.4byte	0x69
 707 0069 02       		.uleb128 0x2
 708 006a 04       		.byte	0x4
 709 006b 07       		.byte	0x7
 710 006c 78030000 		.4byte	.LASF8
 711 0070 02       		.uleb128 0x2
 712 0071 08       		.byte	0x8
 713 0072 05       		.byte	0x5
 714 0073 8C010000 		.4byte	.LASF9
 715 0077 02       		.uleb128 0x2
 716 0078 08       		.byte	0x8
 717 0079 07       		.byte	0x7
 718 007a C4030000 		.4byte	.LASF10
 719 007e 04       		.uleb128 0x4
 720 007f 04       		.byte	0x4
 721 0080 05       		.byte	0x5
 722 0081 696E7400 		.ascii	"int\000"
 723 0085 02       		.uleb128 0x2
 724 0086 04       		.byte	0x4
 725 0087 07       		.byte	0x7
 726 0088 08030000 		.4byte	.LASF11
 727 008c 03       		.uleb128 0x3
 728 008d 7A090000 		.4byte	.LASF12
 729 0091 07       		.byte	0x7
 730 0092 18       		.byte	0x18
 731 0093 2C000000 		.4byte	0x2c
 732 0097 03       		.uleb128 0x3
 733 0098 79060000 		.4byte	.LASF13
 734 009c 07       		.byte	0x7
 735 009d 2C       		.byte	0x2c
 736 009e 4C000000 		.4byte	0x4c
 737 00a2 03       		.uleb128 0x3
 738 00a3 F7070000 		.4byte	.LASF14
 739 00a7 07       		.byte	0x7
 740 00a8 30       		.byte	0x30
 741 00a9 5E000000 		.4byte	0x5e
 742 00ad 02       		.uleb128 0x2
 743 00ae 04       		.byte	0x4
 744 00af 04       		.byte	0x4
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 44


 745 00b0 19060000 		.4byte	.LASF15
 746 00b4 02       		.uleb128 0x2
 747 00b5 08       		.byte	0x8
 748 00b6 04       		.byte	0x4
 749 00b7 61020000 		.4byte	.LASF16
 750 00bb 02       		.uleb128 0x2
 751 00bc 01       		.byte	0x1
 752 00bd 08       		.byte	0x8
 753 00be 4D080000 		.4byte	.LASF17
 754 00c2 03       		.uleb128 0x3
 755 00c3 63000000 		.4byte	.LASF18
 756 00c7 08       		.byte	0x8
 757 00c8 D8       		.byte	0xd8
 758 00c9 85000000 		.4byte	0x85
 759 00cd 02       		.uleb128 0x2
 760 00ce 08       		.byte	0x8
 761 00cf 04       		.byte	0x4
 762 00d0 41080000 		.4byte	.LASF19
 763 00d4 03       		.uleb128 0x3
 764 00d5 71090000 		.4byte	.LASF20
 765 00d9 09       		.byte	0x9
 766 00da 53       		.byte	0x53
 767 00db 7E000000 		.4byte	0x7e
 768 00df 03       		.uleb128 0x3
 769 00e0 4B090000 		.4byte	.LASF21
 770 00e4 09       		.byte	0x9
 771 00e5 54       		.byte	0x54
 772 00e6 85000000 		.4byte	0x85
 773 00ea 03       		.uleb128 0x3
 774 00eb 54030000 		.4byte	.LASF22
 775 00ef 0A       		.byte	0xa
 776 00f0 4D       		.byte	0x4d
 777 00f1 DF000000 		.4byte	0xdf
 778 00f5 03       		.uleb128 0x3
 779 00f6 FA090000 		.4byte	.LASF23
 780 00fa 0A       		.byte	0xa
 781 00fb 4F       		.byte	0x4f
 782 00fc DF000000 		.4byte	0xdf
 783 0100 03       		.uleb128 0x3
 784 0101 CF020000 		.4byte	.LASF24
 785 0105 0A       		.byte	0xa
 786 0106 78       		.byte	0x78
 787 0107 D4000000 		.4byte	0xd4
 788 010b 05       		.uleb128 0x5
 789 010c DB030000 		.4byte	.LASF25
 790 0110 0B       		.byte	0xb
 791 0111 F701     		.2byte	0x1f7
 792 0113 00010000 		.4byte	0x100
 793 0117 05       		.uleb128 0x5
 794 0118 A6010000 		.4byte	.LASF26
 795 011c 0B       		.byte	0xb
 796 011d 2C02     		.2byte	0x22c
 797 011f EA000000 		.4byte	0xea
 798 0123 02       		.uleb128 0x2
 799 0124 04       		.byte	0x4
 800 0125 07       		.byte	0x7
 801 0126 E7040000 		.4byte	.LASF27
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 45


 802 012a 03       		.uleb128 0x3
 803 012b 27090000 		.4byte	.LASF28
 804 012f 0C       		.byte	0xc
 805 0130 90       		.byte	0x90
 806 0131 25000000 		.4byte	0x25
 807 0135 03       		.uleb128 0x3
 808 0136 09050000 		.4byte	.LASF29
 809 013a 0C       		.byte	0xc
 810 013b 9C       		.byte	0x9c
 811 013c 37000000 		.4byte	0x37
 812 0140 06       		.uleb128 0x6
 813 0141 01       		.byte	0x1
 814 0142 25000000 		.4byte	0x25
 815 0146 0C       		.byte	0xc
 816 0147 CF       		.byte	0xcf
 817 0148 E9010000 		.4byte	0x1e9
 818 014c 07       		.uleb128 0x7
 819 014d A2030000 		.4byte	.LASF30
 820 0151 00       		.byte	0
 821 0152 08       		.uleb128 0x8
 822 0153 10060000 		.4byte	.LASF31
 823 0157 7F       		.sleb128 -1
 824 0158 08       		.uleb128 0x8
 825 0159 8A030000 		.4byte	.LASF32
 826 015d 7E       		.sleb128 -2
 827 015e 08       		.uleb128 0x8
 828 015f 04070000 		.4byte	.LASF33
 829 0163 7D       		.sleb128 -3
 830 0164 08       		.uleb128 0x8
 831 0165 FC080000 		.4byte	.LASF34
 832 0169 7C       		.sleb128 -4
 833 016a 08       		.uleb128 0x8
 834 016b 62090000 		.4byte	.LASF35
 835 016f 7B       		.sleb128 -5
 836 0170 08       		.uleb128 0x8
 837 0171 C1080000 		.4byte	.LASF36
 838 0175 7A       		.sleb128 -6
 839 0176 08       		.uleb128 0x8
 840 0177 6E050000 		.4byte	.LASF37
 841 017b 79       		.sleb128 -7
 842 017c 08       		.uleb128 0x8
 843 017d FC030000 		.4byte	.LASF38
 844 0181 78       		.sleb128 -8
 845 0182 08       		.uleb128 0x8
 846 0183 F2020000 		.4byte	.LASF39
 847 0187 77       		.sleb128 -9
 848 0188 08       		.uleb128 0x8
 849 0189 30060000 		.4byte	.LASF40
 850 018d 76       		.sleb128 -10
 851 018e 08       		.uleb128 0x8
 852 018f 00000000 		.4byte	.LASF41
 853 0193 75       		.sleb128 -11
 854 0194 08       		.uleb128 0x8
 855 0195 48020000 		.4byte	.LASF42
 856 0199 74       		.sleb128 -12
 857 019a 08       		.uleb128 0x8
 858 019b 66030000 		.4byte	.LASF43
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 46


 859 019f 73       		.sleb128 -13
 860 01a0 08       		.uleb128 0x8
 861 01a1 2E080000 		.4byte	.LASF44
 862 01a5 72       		.sleb128 -14
 863 01a6 08       		.uleb128 0x8
 864 01a7 65060000 		.4byte	.LASF45
 865 01ab 71       		.sleb128 -15
 866 01ac 08       		.uleb128 0x8
 867 01ad 2C050000 		.4byte	.LASF46
 868 01b1 70       		.sleb128 -16
 869 01b2 08       		.uleb128 0x8
 870 01b3 80050000 		.4byte	.LASF47
 871 01b7 6F       		.sleb128 -17
 872 01b8 08       		.uleb128 0x8
 873 01b9 11040000 		.4byte	.LASF48
 874 01bd 6E       		.sleb128 -18
 875 01be 08       		.uleb128 0x8
 876 01bf 52040000 		.4byte	.LASF49
 877 01c3 6D       		.sleb128 -19
 878 01c4 08       		.uleb128 0x8
 879 01c5 3F040000 		.4byte	.LASF50
 880 01c9 6C       		.sleb128 -20
 881 01ca 08       		.uleb128 0x8
 882 01cb F8000000 		.4byte	.LASF51
 883 01cf 6B       		.sleb128 -21
 884 01d0 08       		.uleb128 0x8
 885 01d1 50050000 		.4byte	.LASF52
 886 01d5 6A       		.sleb128 -22
 887 01d6 08       		.uleb128 0x8
 888 01d7 07080000 		.4byte	.LASF53
 889 01db 69       		.sleb128 -23
 890 01dc 08       		.uleb128 0x8
 891 01dd 43030000 		.4byte	.LASF54
 892 01e1 68       		.sleb128 -24
 893 01e2 08       		.uleb128 0x8
 894 01e3 9D080000 		.4byte	.LASF55
 895 01e7 67       		.sleb128 -25
 896 01e8 00       		.byte	0
 897 01e9 03       		.uleb128 0x3
 898 01ea C6000000 		.4byte	.LASF56
 899 01ee 0C       		.byte	0xc
 900 01ef EA       		.byte	0xea
 901 01f0 40010000 		.4byte	0x140
 902 01f4 03       		.uleb128 0x3
 903 01f5 11090000 		.4byte	.LASF57
 904 01f9 0D       		.byte	0xd
 905 01fa 19       		.byte	0x19
 906 01fb FF010000 		.4byte	0x1ff
 907 01ff 09       		.uleb128 0x9
 908 0200 0B010000 		.4byte	0x10b
 909 0204 0A020000 		.4byte	0x20a
 910 0208 0A       		.uleb128 0xa
 911 0209 00       		.byte	0
 912 020a 03       		.uleb128 0x3
 913 020b 98030000 		.4byte	.LASF58
 914 020f 0D       		.byte	0xd
 915 0210 21       		.byte	0x21
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 47


 916 0211 17010000 		.4byte	0x117
 917 0215 03       		.uleb128 0x3
 918 0216 95000000 		.4byte	.LASF59
 919 021a 0D       		.byte	0xd
 920 021b 2D       		.byte	0x2d
 921 021c A2000000 		.4byte	0xa2
 922 0220 06       		.uleb128 0x6
 923 0221 01       		.byte	0x1
 924 0222 37000000 		.4byte	0x37
 925 0226 0E       		.byte	0xe
 926 0227 59       		.byte	0x59
 927 0228 45020000 		.4byte	0x245
 928 022c 07       		.uleb128 0x7
 929 022d 26040000 		.4byte	.LASF60
 930 0231 00       		.byte	0
 931 0232 07       		.uleb128 0x7
 932 0233 52080000 		.4byte	.LASF61
 933 0237 01       		.byte	0x1
 934 0238 07       		.uleb128 0x7
 935 0239 79020000 		.4byte	.LASF62
 936 023d 02       		.byte	0x2
 937 023e 07       		.uleb128 0x7
 938 023f F0040000 		.4byte	.LASF63
 939 0243 03       		.byte	0x3
 940 0244 00       		.byte	0
 941 0245 03       		.uleb128 0x3
 942 0246 E9080000 		.4byte	.LASF64
 943 024a 0E       		.byte	0xe
 944 024b 5E       		.byte	0x5e
 945 024c 20020000 		.4byte	0x220
 946 0250 0B       		.uleb128 0xb
 947 0251 02       		.byte	0x2
 948 0252 0F       		.byte	0xf
 949 0253 22       		.byte	0x22
 950 0254 71020000 		.4byte	0x271
 951 0258 0C       		.uleb128 0xc
 952 0259 C8090000 		.4byte	.LASF65
 953 025d 0F       		.byte	0xf
 954 025e 24       		.byte	0x24
 955 025f 2A010000 		.4byte	0x12a
 956 0263 00       		.byte	0
 957 0264 0C       		.uleb128 0xc
 958 0265 0C090000 		.4byte	.LASF66
 959 0269 0F       		.byte	0xf
 960 026a 25       		.byte	0x25
 961 026b 2A010000 		.4byte	0x12a
 962 026f 01       		.byte	0x1
 963 0270 00       		.byte	0
 964 0271 03       		.uleb128 0x3
 965 0272 D4040000 		.4byte	.LASF67
 966 0276 0F       		.byte	0xf
 967 0277 28       		.byte	0x28
 968 0278 50020000 		.4byte	0x250
 969 027c 03       		.uleb128 0x3
 970 027d BD040000 		.4byte	.LASF68
 971 0281 02       		.byte	0x2
 972 0282 26       		.byte	0x26
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 48


 973 0283 87020000 		.4byte	0x287
 974 0287 0D       		.uleb128 0xd
 975 0288 04       		.byte	0x4
 976 0289 8D020000 		.4byte	0x28d
 977 028d 0E       		.uleb128 0xe
 978 028e E9010000 		.4byte	0x1e9
 979 0292 9C020000 		.4byte	0x29c
 980 0296 0F       		.uleb128 0xf
 981 0297 A2020000 		.4byte	0x2a2
 982 029b 00       		.byte	0
 983 029c 0D       		.uleb128 0xd
 984 029d 04       		.byte	0x4
 985 029e 71020000 		.4byte	0x271
 986 02a2 10       		.uleb128 0x10
 987 02a3 9C020000 		.4byte	0x29c
 988 02a7 03       		.uleb128 0x3
 989 02a8 BC060000 		.4byte	.LASF69
 990 02ac 02       		.byte	0x2
 991 02ad 2C       		.byte	0x2c
 992 02ae B2020000 		.4byte	0x2b2
 993 02b2 0D       		.uleb128 0xd
 994 02b3 04       		.byte	0x4
 995 02b4 B8020000 		.4byte	0x2b8
 996 02b8 0E       		.uleb128 0xe
 997 02b9 E9010000 		.4byte	0x1e9
 998 02bd C7020000 		.4byte	0x2c7
 999 02c1 0F       		.uleb128 0xf
 1000 02c2 D2020000 		.4byte	0x2d2
 1001 02c6 00       		.byte	0
 1002 02c7 0D       		.uleb128 0xd
 1003 02c8 04       		.byte	0x4
 1004 02c9 CD020000 		.4byte	0x2cd
 1005 02cd 10       		.uleb128 0x10
 1006 02ce 71020000 		.4byte	0x271
 1007 02d2 10       		.uleb128 0x10
 1008 02d3 C7020000 		.4byte	0x2c7
 1009 02d7 11       		.uleb128 0x11
 1010 02d8 8F060000 		.4byte	.LASF81
 1011 02dc 28       		.byte	0x28
 1012 02dd 02       		.byte	0x2
 1013 02de 36       		.byte	0x36
 1014 02df 5C030000 		.4byte	0x35c
 1015 02e3 0C       		.uleb128 0xc
 1016 02e4 07060000 		.4byte	.LASF70
 1017 02e8 02       		.byte	0x2
 1018 02e9 3B       		.byte	0x3b
 1019 02ea 5C030000 		.4byte	0x35c
 1020 02ee 00       		.byte	0
 1021 02ef 0C       		.uleb128 0xc
 1022 02f0 5C030000 		.4byte	.LASF71
 1023 02f4 02       		.byte	0x2
 1024 02f5 40       		.byte	0x40
 1025 02f6 61030000 		.4byte	0x361
 1026 02fa 04       		.byte	0x4
 1027 02fb 0C       		.uleb128 0xc
 1028 02fc B4010000 		.4byte	.LASF72
 1029 0300 02       		.byte	0x2
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 49


 1030 0301 45       		.byte	0x45
 1031 0302 66030000 		.4byte	0x366
 1032 0306 08       		.byte	0x8
 1033 0307 0C       		.uleb128 0xc
 1034 0308 C9070000 		.4byte	.LASF73
 1035 030c 02       		.byte	0x2
 1036 030d 4B       		.byte	0x4b
 1037 030e 66030000 		.4byte	0x366
 1038 0312 0C       		.byte	0xc
 1039 0313 0C       		.uleb128 0xc
 1040 0314 A3020000 		.4byte	.LASF74
 1041 0318 02       		.byte	0x2
 1042 0319 50       		.byte	0x50
 1043 031a 6B030000 		.4byte	0x36b
 1044 031e 10       		.byte	0x10
 1045 031f 0C       		.uleb128 0xc
 1046 0320 F6060000 		.4byte	.LASF75
 1047 0324 02       		.byte	0x2
 1048 0325 55       		.byte	0x55
 1049 0326 76030000 		.4byte	0x376
 1050 032a 14       		.byte	0x14
 1051 032b 0C       		.uleb128 0xc
 1052 032c 54060000 		.4byte	.LASF76
 1053 0330 02       		.byte	0x2
 1054 0331 5A       		.byte	0x5a
 1055 0332 6B030000 		.4byte	0x36b
 1056 0336 18       		.byte	0x18
 1057 0337 0C       		.uleb128 0xc
 1058 0338 ED090000 		.4byte	.LASF77
 1059 033c 02       		.byte	0x2
 1060 033d 5F       		.byte	0x5f
 1061 033e 76030000 		.4byte	0x376
 1062 0342 1C       		.byte	0x1c
 1063 0343 0C       		.uleb128 0xc
 1064 0344 6F080000 		.4byte	.LASF78
 1065 0348 02       		.byte	0x2
 1066 0349 65       		.byte	0x65
 1067 034a 7B030000 		.4byte	0x37b
 1068 034e 20       		.byte	0x20
 1069 034f 0C       		.uleb128 0xc
 1070 0350 32000000 		.4byte	.LASF79
 1071 0354 02       		.byte	0x2
 1072 0355 6A       		.byte	0x6a
 1073 0356 80030000 		.4byte	0x380
 1074 035a 24       		.byte	0x24
 1075 035b 00       		.byte	0
 1076 035c 10       		.uleb128 0x10
 1077 035d 7C020000 		.4byte	0x27c
 1078 0361 10       		.uleb128 0x10
 1079 0362 A7020000 		.4byte	0x2a7
 1080 0366 10       		.uleb128 0x10
 1081 0367 17010000 		.4byte	0x117
 1082 036b 10       		.uleb128 0x10
 1083 036c C2000000 		.4byte	0xc2
 1084 0370 0D       		.uleb128 0xd
 1085 0371 04       		.byte	0x4
 1086 0372 F4010000 		.4byte	0x1f4
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 50


 1087 0376 10       		.uleb128 0x10
 1088 0377 70030000 		.4byte	0x370
 1089 037b 10       		.uleb128 0x10
 1090 037c 35010000 		.4byte	0x135
 1091 0380 10       		.uleb128 0x10
 1092 0381 15020000 		.4byte	0x215
 1093 0385 03       		.uleb128 0x3
 1094 0386 31030000 		.4byte	.LASF80
 1095 038a 02       		.byte	0x2
 1096 038b 6D       		.byte	0x6d
 1097 038c 90030000 		.4byte	0x390
 1098 0390 10       		.uleb128 0x10
 1099 0391 D7020000 		.4byte	0x2d7
 1100 0395 11       		.uleb128 0x11
 1101 0396 DB070000 		.4byte	.LASF82
 1102 039a 0C       		.byte	0xc
 1103 039b 02       		.byte	0x2
 1104 039c 79       		.byte	0x79
 1105 039d D2030000 		.4byte	0x3d2
 1106 03a1 0C       		.uleb128 0xc
 1107 03a2 D6020000 		.4byte	.LASF83
 1108 03a6 02       		.byte	0x2
 1109 03a7 7F       		.byte	0x7f
 1110 03a8 71020000 		.4byte	0x271
 1111 03ac 00       		.byte	0
 1112 03ad 0C       		.uleb128 0xc
 1113 03ae 2F090000 		.4byte	.LASF84
 1114 03b2 02       		.byte	0x2
 1115 03b3 84       		.byte	0x84
 1116 03b4 45020000 		.4byte	0x245
 1117 03b8 02       		.byte	0x2
 1118 03b9 12       		.uleb128 0x12
 1119 03ba 61676500 		.ascii	"age\000"
 1120 03be 02       		.byte	0x2
 1121 03bf 89       		.byte	0x89
 1122 03c0 A2000000 		.4byte	0xa2
 1123 03c4 04       		.byte	0x4
 1124 03c5 0C       		.uleb128 0xc
 1125 03c6 D3070000 		.4byte	.LASF85
 1126 03ca 02       		.byte	0x2
 1127 03cb 8E       		.byte	0x8e
 1128 03cc D8030000 		.4byte	0x3d8
 1129 03d0 08       		.byte	0x8
 1130 03d1 00       		.byte	0
 1131 03d2 0D       		.uleb128 0xd
 1132 03d3 04       		.byte	0x4
 1133 03d4 85030000 		.4byte	0x385
 1134 03d8 10       		.uleb128 0x10
 1135 03d9 D2030000 		.4byte	0x3d2
 1136 03dd 03       		.uleb128 0x3
 1137 03de E9070000 		.4byte	.LASF86
 1138 03e2 02       		.byte	0x2
 1139 03e3 91       		.byte	0x91
 1140 03e4 95030000 		.4byte	0x395
 1141 03e8 0B       		.uleb128 0xb
 1142 03e9 01       		.byte	0x1
 1143 03ea 10       		.byte	0x10
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 51


 1144 03eb 21       		.byte	0x21
 1145 03ec FD030000 		.4byte	0x3fd
 1146 03f0 0C       		.uleb128 0xc
 1147 03f1 B6080000 		.4byte	.LASF87
 1148 03f5 10       		.byte	0x10
 1149 03f6 23       		.byte	0x23
 1150 03f7 8C000000 		.4byte	0x8c
 1151 03fb 00       		.byte	0
 1152 03fc 00       		.byte	0
 1153 03fd 03       		.uleb128 0x3
 1154 03fe 1E080000 		.4byte	.LASF88
 1155 0402 10       		.byte	0x10
 1156 0403 26       		.byte	0x26
 1157 0404 E8030000 		.4byte	0x3e8
 1158 0408 03       		.uleb128 0x3
 1159 0409 90040000 		.4byte	.LASF89
 1160 040d 03       		.byte	0x3
 1161 040e 26       		.byte	0x26
 1162 040f 13040000 		.4byte	0x413
 1163 0413 0D       		.uleb128 0xd
 1164 0414 04       		.byte	0x4
 1165 0415 19040000 		.4byte	0x419
 1166 0419 0E       		.uleb128 0xe
 1167 041a E9010000 		.4byte	0x1e9
 1168 041e 28040000 		.4byte	0x428
 1169 0422 0F       		.uleb128 0xf
 1170 0423 2E040000 		.4byte	0x42e
 1171 0427 00       		.byte	0
 1172 0428 0D       		.uleb128 0xd
 1173 0429 04       		.byte	0x4
 1174 042a FD030000 		.4byte	0x3fd
 1175 042e 10       		.uleb128 0x10
 1176 042f 28040000 		.4byte	0x428
 1177 0433 03       		.uleb128 0x3
 1178 0434 7B040000 		.4byte	.LASF90
 1179 0438 03       		.byte	0x3
 1180 0439 2C       		.byte	0x2c
 1181 043a 3E040000 		.4byte	0x43e
 1182 043e 0D       		.uleb128 0xd
 1183 043f 04       		.byte	0x4
 1184 0440 44040000 		.4byte	0x444
 1185 0444 0E       		.uleb128 0xe
 1186 0445 E9010000 		.4byte	0x1e9
 1187 0449 53040000 		.4byte	0x453
 1188 044d 0F       		.uleb128 0xf
 1189 044e 5E040000 		.4byte	0x45e
 1190 0452 00       		.byte	0
 1191 0453 0D       		.uleb128 0xd
 1192 0454 04       		.byte	0x4
 1193 0455 59040000 		.4byte	0x459
 1194 0459 10       		.uleb128 0x10
 1195 045a FD030000 		.4byte	0x3fd
 1196 045e 10       		.uleb128 0x10
 1197 045f 53040000 		.4byte	0x453
 1198 0463 11       		.uleb128 0x11
 1199 0464 6E010000 		.4byte	.LASF91
 1200 0468 28       		.byte	0x28
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 52


 1201 0469 03       		.byte	0x3
 1202 046a 36       		.byte	0x36
 1203 046b E8040000 		.4byte	0x4e8
 1204 046f 0C       		.uleb128 0xc
 1205 0470 07060000 		.4byte	.LASF70
 1206 0474 03       		.byte	0x3
 1207 0475 3B       		.byte	0x3b
 1208 0476 E8040000 		.4byte	0x4e8
 1209 047a 00       		.byte	0
 1210 047b 0C       		.uleb128 0xc
 1211 047c 5C030000 		.4byte	.LASF71
 1212 0480 03       		.byte	0x3
 1213 0481 40       		.byte	0x40
 1214 0482 ED040000 		.4byte	0x4ed
 1215 0486 04       		.byte	0x4
 1216 0487 0C       		.uleb128 0xc
 1217 0488 B4010000 		.4byte	.LASF72
 1218 048c 03       		.byte	0x3
 1219 048d 45       		.byte	0x45
 1220 048e 66030000 		.4byte	0x366
 1221 0492 08       		.byte	0x8
 1222 0493 0C       		.uleb128 0xc
 1223 0494 C9070000 		.4byte	.LASF73
 1224 0498 03       		.byte	0x3
 1225 0499 4B       		.byte	0x4b
 1226 049a 66030000 		.4byte	0x366
 1227 049e 0C       		.byte	0xc
 1228 049f 0C       		.uleb128 0xc
 1229 04a0 A3020000 		.4byte	.LASF74
 1230 04a4 03       		.byte	0x3
 1231 04a5 50       		.byte	0x50
 1232 04a6 6B030000 		.4byte	0x36b
 1233 04aa 10       		.byte	0x10
 1234 04ab 0C       		.uleb128 0xc
 1235 04ac F6060000 		.4byte	.LASF75
 1236 04b0 03       		.byte	0x3
 1237 04b1 55       		.byte	0x55
 1238 04b2 76030000 		.4byte	0x376
 1239 04b6 14       		.byte	0x14
 1240 04b7 0C       		.uleb128 0xc
 1241 04b8 54060000 		.4byte	.LASF76
 1242 04bc 03       		.byte	0x3
 1243 04bd 5A       		.byte	0x5a
 1244 04be 6B030000 		.4byte	0x36b
 1245 04c2 18       		.byte	0x18
 1246 04c3 0C       		.uleb128 0xc
 1247 04c4 ED090000 		.4byte	.LASF77
 1248 04c8 03       		.byte	0x3
 1249 04c9 5F       		.byte	0x5f
 1250 04ca 76030000 		.4byte	0x376
 1251 04ce 1C       		.byte	0x1c
 1252 04cf 0C       		.uleb128 0xc
 1253 04d0 6F080000 		.4byte	.LASF78
 1254 04d4 03       		.byte	0x3
 1255 04d5 65       		.byte	0x65
 1256 04d6 7B030000 		.4byte	0x37b
 1257 04da 20       		.byte	0x20
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 53


 1258 04db 0C       		.uleb128 0xc
 1259 04dc 32000000 		.4byte	.LASF79
 1260 04e0 03       		.byte	0x3
 1261 04e1 6A       		.byte	0x6a
 1262 04e2 80030000 		.4byte	0x380
 1263 04e6 24       		.byte	0x24
 1264 04e7 00       		.byte	0
 1265 04e8 10       		.uleb128 0x10
 1266 04e9 08040000 		.4byte	0x408
 1267 04ed 10       		.uleb128 0x10
 1268 04ee 33040000 		.4byte	0x433
 1269 04f2 03       		.uleb128 0x3
 1270 04f3 7D010000 		.4byte	.LASF92
 1271 04f7 03       		.byte	0x3
 1272 04f8 6D       		.byte	0x6d
 1273 04f9 FD040000 		.4byte	0x4fd
 1274 04fd 10       		.uleb128 0x10
 1275 04fe 63040000 		.4byte	0x463
 1276 0502 11       		.uleb128 0x11
 1277 0503 DC020000 		.4byte	.LASF93
 1278 0507 0C       		.byte	0xc
 1279 0508 03       		.byte	0x3
 1280 0509 79       		.byte	0x79
 1281 050a 3F050000 		.4byte	0x53f
 1282 050e 0C       		.uleb128 0xc
 1283 050f D6020000 		.4byte	.LASF83
 1284 0513 03       		.byte	0x3
 1285 0514 7F       		.byte	0x7f
 1286 0515 FD030000 		.4byte	0x3fd
 1287 0519 00       		.byte	0
 1288 051a 0C       		.uleb128 0xc
 1289 051b 2F090000 		.4byte	.LASF84
 1290 051f 03       		.byte	0x3
 1291 0520 84       		.byte	0x84
 1292 0521 45020000 		.4byte	0x245
 1293 0525 01       		.byte	0x1
 1294 0526 12       		.uleb128 0x12
 1295 0527 61676500 		.ascii	"age\000"
 1296 052b 03       		.byte	0x3
 1297 052c 89       		.byte	0x89
 1298 052d A2000000 		.4byte	0xa2
 1299 0531 04       		.byte	0x4
 1300 0532 0C       		.uleb128 0xc
 1301 0533 D3070000 		.4byte	.LASF85
 1302 0537 03       		.byte	0x3
 1303 0538 8E       		.byte	0x8e
 1304 0539 45050000 		.4byte	0x545
 1305 053d 08       		.byte	0x8
 1306 053e 00       		.byte	0
 1307 053f 0D       		.uleb128 0xd
 1308 0540 04       		.byte	0x4
 1309 0541 F2040000 		.4byte	0x4f2
 1310 0545 10       		.uleb128 0x10
 1311 0546 3F050000 		.4byte	0x53f
 1312 054a 03       		.uleb128 0x3
 1313 054b E7020000 		.4byte	.LASF94
 1314 054f 03       		.byte	0x3
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 54


 1315 0550 91       		.byte	0x91
 1316 0551 02050000 		.4byte	0x502
 1317 0555 0B       		.uleb128 0xb
 1318 0556 01       		.byte	0x1
 1319 0557 11       		.byte	0x11
 1320 0558 21       		.byte	0x21
 1321 0559 6A050000 		.4byte	0x56a
 1322 055d 0C       		.uleb128 0xc
 1323 055e 12000000 		.4byte	.LASF95
 1324 0562 11       		.byte	0x11
 1325 0563 23       		.byte	0x23
 1326 0564 8C000000 		.4byte	0x8c
 1327 0568 00       		.byte	0
 1328 0569 00       		.byte	0
 1329 056a 03       		.uleb128 0x3
 1330 056b B7090000 		.4byte	.LASF96
 1331 056f 11       		.byte	0x11
 1332 0570 26       		.byte	0x26
 1333 0571 55050000 		.4byte	0x555
 1334 0575 03       		.uleb128 0x3
 1335 0576 0A010000 		.4byte	.LASF97
 1336 057a 04       		.byte	0x4
 1337 057b 26       		.byte	0x26
 1338 057c 80050000 		.4byte	0x580
 1339 0580 0D       		.uleb128 0xd
 1340 0581 04       		.byte	0x4
 1341 0582 86050000 		.4byte	0x586
 1342 0586 0E       		.uleb128 0xe
 1343 0587 E9010000 		.4byte	0x1e9
 1344 058b 95050000 		.4byte	0x595
 1345 058f 0F       		.uleb128 0xf
 1346 0590 9B050000 		.4byte	0x59b
 1347 0594 00       		.byte	0
 1348 0595 0D       		.uleb128 0xd
 1349 0596 04       		.byte	0x4
 1350 0597 6A050000 		.4byte	0x56a
 1351 059b 10       		.uleb128 0x10
 1352 059c 95050000 		.4byte	0x595
 1353 05a0 03       		.uleb128 0x3
 1354 05a1 65040000 		.4byte	.LASF98
 1355 05a5 04       		.byte	0x4
 1356 05a6 2C       		.byte	0x2c
 1357 05a7 AB050000 		.4byte	0x5ab
 1358 05ab 0D       		.uleb128 0xd
 1359 05ac 04       		.byte	0x4
 1360 05ad B1050000 		.4byte	0x5b1
 1361 05b1 0E       		.uleb128 0xe
 1362 05b2 E9010000 		.4byte	0x1e9
 1363 05b6 C0050000 		.4byte	0x5c0
 1364 05ba 0F       		.uleb128 0xf
 1365 05bb CB050000 		.4byte	0x5cb
 1366 05bf 00       		.byte	0
 1367 05c0 0D       		.uleb128 0xd
 1368 05c1 04       		.byte	0x4
 1369 05c2 C6050000 		.4byte	0x5c6
 1370 05c6 10       		.uleb128 0x10
 1371 05c7 6A050000 		.4byte	0x56a
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 55


 1372 05cb 10       		.uleb128 0x10
 1373 05cc C0050000 		.4byte	0x5c0
 1374 05d0 11       		.uleb128 0x11
 1375 05d1 6A000000 		.4byte	.LASF99
 1376 05d5 28       		.byte	0x28
 1377 05d6 04       		.byte	0x4
 1378 05d7 36       		.byte	0x36
 1379 05d8 55060000 		.4byte	0x655
 1380 05dc 0C       		.uleb128 0xc
 1381 05dd 07060000 		.4byte	.LASF70
 1382 05e1 04       		.byte	0x4
 1383 05e2 3B       		.byte	0x3b
 1384 05e3 55060000 		.4byte	0x655
 1385 05e7 00       		.byte	0
 1386 05e8 0C       		.uleb128 0xc
 1387 05e9 5C030000 		.4byte	.LASF71
 1388 05ed 04       		.byte	0x4
 1389 05ee 40       		.byte	0x40
 1390 05ef 5A060000 		.4byte	0x65a
 1391 05f3 04       		.byte	0x4
 1392 05f4 0C       		.uleb128 0xc
 1393 05f5 B4010000 		.4byte	.LASF72
 1394 05f9 04       		.byte	0x4
 1395 05fa 45       		.byte	0x45
 1396 05fb 66030000 		.4byte	0x366
 1397 05ff 08       		.byte	0x8
 1398 0600 0C       		.uleb128 0xc
 1399 0601 C9070000 		.4byte	.LASF73
 1400 0605 04       		.byte	0x4
 1401 0606 4B       		.byte	0x4b
 1402 0607 66030000 		.4byte	0x366
 1403 060b 0C       		.byte	0xc
 1404 060c 0C       		.uleb128 0xc
 1405 060d A3020000 		.4byte	.LASF74
 1406 0611 04       		.byte	0x4
 1407 0612 50       		.byte	0x50
 1408 0613 6B030000 		.4byte	0x36b
 1409 0617 10       		.byte	0x10
 1410 0618 0C       		.uleb128 0xc
 1411 0619 F6060000 		.4byte	.LASF75
 1412 061d 04       		.byte	0x4
 1413 061e 55       		.byte	0x55
 1414 061f 76030000 		.4byte	0x376
 1415 0623 14       		.byte	0x14
 1416 0624 0C       		.uleb128 0xc
 1417 0625 54060000 		.4byte	.LASF76
 1418 0629 04       		.byte	0x4
 1419 062a 5A       		.byte	0x5a
 1420 062b 6B030000 		.4byte	0x36b
 1421 062f 18       		.byte	0x18
 1422 0630 0C       		.uleb128 0xc
 1423 0631 ED090000 		.4byte	.LASF77
 1424 0635 04       		.byte	0x4
 1425 0636 5F       		.byte	0x5f
 1426 0637 76030000 		.4byte	0x376
 1427 063b 1C       		.byte	0x1c
 1428 063c 0C       		.uleb128 0xc
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 56


 1429 063d 6F080000 		.4byte	.LASF78
 1430 0641 04       		.byte	0x4
 1431 0642 65       		.byte	0x65
 1432 0643 7B030000 		.4byte	0x37b
 1433 0647 20       		.byte	0x20
 1434 0648 0C       		.uleb128 0xc
 1435 0649 32000000 		.4byte	.LASF79
 1436 064d 04       		.byte	0x4
 1437 064e 6A       		.byte	0x6a
 1438 064f 80030000 		.4byte	0x380
 1439 0653 24       		.byte	0x24
 1440 0654 00       		.byte	0
 1441 0655 10       		.uleb128 0x10
 1442 0656 75050000 		.4byte	0x575
 1443 065a 10       		.uleb128 0x10
 1444 065b A0050000 		.4byte	0x5a0
 1445 065f 03       		.uleb128 0x3
 1446 0660 7A000000 		.4byte	.LASF100
 1447 0664 04       		.byte	0x4
 1448 0665 6D       		.byte	0x6d
 1449 0666 6A060000 		.4byte	0x66a
 1450 066a 10       		.uleb128 0x10
 1451 066b D0050000 		.4byte	0x5d0
 1452 066f 11       		.uleb128 0x11
 1453 0670 020A0000 		.4byte	.LASF101
 1454 0674 0C       		.byte	0xc
 1455 0675 04       		.byte	0x4
 1456 0676 79       		.byte	0x79
 1457 0677 AC060000 		.4byte	0x6ac
 1458 067b 0C       		.uleb128 0xc
 1459 067c D6020000 		.4byte	.LASF83
 1460 0680 04       		.byte	0x4
 1461 0681 7F       		.byte	0x7f
 1462 0682 6A050000 		.4byte	0x56a
 1463 0686 00       		.byte	0
 1464 0687 0C       		.uleb128 0xc
 1465 0688 2F090000 		.4byte	.LASF84
 1466 068c 04       		.byte	0x4
 1467 068d 84       		.byte	0x84
 1468 068e 45020000 		.4byte	0x245
 1469 0692 01       		.byte	0x1
 1470 0693 12       		.uleb128 0x12
 1471 0694 61676500 		.ascii	"age\000"
 1472 0698 04       		.byte	0x4
 1473 0699 89       		.byte	0x89
 1474 069a A2000000 		.4byte	0xa2
 1475 069e 04       		.byte	0x4
 1476 069f 0C       		.uleb128 0xc
 1477 06a0 D3070000 		.4byte	.LASF85
 1478 06a4 04       		.byte	0x4
 1479 06a5 8E       		.byte	0x8e
 1480 06a6 B2060000 		.4byte	0x6b2
 1481 06aa 08       		.byte	0x8
 1482 06ab 00       		.byte	0
 1483 06ac 0D       		.uleb128 0xd
 1484 06ad 04       		.byte	0x4
 1485 06ae 5F060000 		.4byte	0x65f
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 57


 1486 06b2 10       		.uleb128 0x10
 1487 06b3 AC060000 		.4byte	0x6ac
 1488 06b7 03       		.uleb128 0x3
 1489 06b8 0E0A0000 		.4byte	.LASF102
 1490 06bc 04       		.byte	0x4
 1491 06bd 91       		.byte	0x91
 1492 06be 6F060000 		.4byte	0x66f
 1493 06c2 0B       		.uleb128 0xb
 1494 06c3 01       		.byte	0x1
 1495 06c4 12       		.byte	0x12
 1496 06c5 21       		.byte	0x21
 1497 06c6 D7060000 		.4byte	0x6d7
 1498 06ca 0C       		.uleb128 0xc
 1499 06cb E5010000 		.4byte	.LASF103
 1500 06cf 12       		.byte	0x12
 1501 06d0 23       		.byte	0x23
 1502 06d1 8C000000 		.4byte	0x8c
 1503 06d5 00       		.byte	0
 1504 06d6 00       		.byte	0
 1505 06d7 03       		.uleb128 0x3
 1506 06d8 7E080000 		.4byte	.LASF104
 1507 06dc 12       		.byte	0x12
 1508 06dd 26       		.byte	0x26
 1509 06de C2060000 		.4byte	0x6c2
 1510 06e2 03       		.uleb128 0x3
 1511 06e3 A4040000 		.4byte	.LASF105
 1512 06e7 05       		.byte	0x5
 1513 06e8 26       		.byte	0x26
 1514 06e9 ED060000 		.4byte	0x6ed
 1515 06ed 0D       		.uleb128 0xd
 1516 06ee 04       		.byte	0x4
 1517 06ef F3060000 		.4byte	0x6f3
 1518 06f3 0E       		.uleb128 0xe
 1519 06f4 E9010000 		.4byte	0x1e9
 1520 06f8 02070000 		.4byte	0x702
 1521 06fc 0F       		.uleb128 0xf
 1522 06fd 08070000 		.4byte	0x708
 1523 0701 00       		.byte	0
 1524 0702 0D       		.uleb128 0xd
 1525 0703 04       		.byte	0x4
 1526 0704 D7060000 		.4byte	0x6d7
 1527 0708 10       		.uleb128 0x10
 1528 0709 02070000 		.4byte	0x702
 1529 070d 03       		.uleb128 0x3
 1530 070e 94050000 		.4byte	.LASF106
 1531 0712 05       		.byte	0x5
 1532 0713 2C       		.byte	0x2c
 1533 0714 18070000 		.4byte	0x718
 1534 0718 0D       		.uleb128 0xd
 1535 0719 04       		.byte	0x4
 1536 071a 1E070000 		.4byte	0x71e
 1537 071e 0E       		.uleb128 0xe
 1538 071f E9010000 		.4byte	0x1e9
 1539 0723 2D070000 		.4byte	0x72d
 1540 0727 0F       		.uleb128 0xf
 1541 0728 38070000 		.4byte	0x738
 1542 072c 00       		.byte	0
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 58


 1543 072d 0D       		.uleb128 0xd
 1544 072e 04       		.byte	0x4
 1545 072f 33070000 		.4byte	0x733
 1546 0733 10       		.uleb128 0x10
 1547 0734 D7060000 		.4byte	0x6d7
 1548 0738 10       		.uleb128 0x10
 1549 0739 2D070000 		.4byte	0x72d
 1550 073d 11       		.uleb128 0x11
 1551 073e 3B000000 		.4byte	.LASF107
 1552 0742 28       		.byte	0x28
 1553 0743 05       		.byte	0x5
 1554 0744 36       		.byte	0x36
 1555 0745 C2070000 		.4byte	0x7c2
 1556 0749 0C       		.uleb128 0xc
 1557 074a 07060000 		.4byte	.LASF70
 1558 074e 05       		.byte	0x5
 1559 074f 3B       		.byte	0x3b
 1560 0750 C2070000 		.4byte	0x7c2
 1561 0754 00       		.byte	0
 1562 0755 0C       		.uleb128 0xc
 1563 0756 5C030000 		.4byte	.LASF71
 1564 075a 05       		.byte	0x5
 1565 075b 40       		.byte	0x40
 1566 075c C7070000 		.4byte	0x7c7
 1567 0760 04       		.byte	0x4
 1568 0761 0C       		.uleb128 0xc
 1569 0762 B4010000 		.4byte	.LASF72
 1570 0766 05       		.byte	0x5
 1571 0767 45       		.byte	0x45
 1572 0768 66030000 		.4byte	0x366
 1573 076c 08       		.byte	0x8
 1574 076d 0C       		.uleb128 0xc
 1575 076e C9070000 		.4byte	.LASF73
 1576 0772 05       		.byte	0x5
 1577 0773 4B       		.byte	0x4b
 1578 0774 66030000 		.4byte	0x366
 1579 0778 0C       		.byte	0xc
 1580 0779 0C       		.uleb128 0xc
 1581 077a A3020000 		.4byte	.LASF74
 1582 077e 05       		.byte	0x5
 1583 077f 50       		.byte	0x50
 1584 0780 6B030000 		.4byte	0x36b
 1585 0784 10       		.byte	0x10
 1586 0785 0C       		.uleb128 0xc
 1587 0786 F6060000 		.4byte	.LASF75
 1588 078a 05       		.byte	0x5
 1589 078b 55       		.byte	0x55
 1590 078c 76030000 		.4byte	0x376
 1591 0790 14       		.byte	0x14
 1592 0791 0C       		.uleb128 0xc
 1593 0792 54060000 		.4byte	.LASF76
 1594 0796 05       		.byte	0x5
 1595 0797 5A       		.byte	0x5a
 1596 0798 6B030000 		.4byte	0x36b
 1597 079c 18       		.byte	0x18
 1598 079d 0C       		.uleb128 0xc
 1599 079e ED090000 		.4byte	.LASF77
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 59


 1600 07a2 05       		.byte	0x5
 1601 07a3 5F       		.byte	0x5f
 1602 07a4 76030000 		.4byte	0x376
 1603 07a8 1C       		.byte	0x1c
 1604 07a9 0C       		.uleb128 0xc
 1605 07aa 6F080000 		.4byte	.LASF78
 1606 07ae 05       		.byte	0x5
 1607 07af 65       		.byte	0x65
 1608 07b0 7B030000 		.4byte	0x37b
 1609 07b4 20       		.byte	0x20
 1610 07b5 0C       		.uleb128 0xc
 1611 07b6 32000000 		.4byte	.LASF79
 1612 07ba 05       		.byte	0x5
 1613 07bb 6A       		.byte	0x6a
 1614 07bc 80030000 		.4byte	0x380
 1615 07c0 24       		.byte	0x24
 1616 07c1 00       		.byte	0
 1617 07c2 10       		.uleb128 0x10
 1618 07c3 E2060000 		.4byte	0x6e2
 1619 07c7 10       		.uleb128 0x10
 1620 07c8 0D070000 		.4byte	0x70d
 1621 07cc 03       		.uleb128 0x3
 1622 07cd 4F000000 		.4byte	.LASF108
 1623 07d1 05       		.byte	0x5
 1624 07d2 6D       		.byte	0x6d
 1625 07d3 D7070000 		.4byte	0x7d7
 1626 07d7 10       		.uleb128 0x10
 1627 07d8 3D070000 		.4byte	0x73d
 1628 07dc 11       		.uleb128 0x11
 1629 07dd CD090000 		.4byte	.LASF109
 1630 07e1 0C       		.byte	0xc
 1631 07e2 05       		.byte	0x5
 1632 07e3 79       		.byte	0x79
 1633 07e4 19080000 		.4byte	0x819
 1634 07e8 0C       		.uleb128 0xc
 1635 07e9 D6020000 		.4byte	.LASF83
 1636 07ed 05       		.byte	0x5
 1637 07ee 7F       		.byte	0x7f
 1638 07ef D7060000 		.4byte	0x6d7
 1639 07f3 00       		.byte	0
 1640 07f4 0C       		.uleb128 0xc
 1641 07f5 2F090000 		.4byte	.LASF84
 1642 07f9 05       		.byte	0x5
 1643 07fa 84       		.byte	0x84
 1644 07fb 45020000 		.4byte	0x245
 1645 07ff 01       		.byte	0x1
 1646 0800 12       		.uleb128 0x12
 1647 0801 61676500 		.ascii	"age\000"
 1648 0805 05       		.byte	0x5
 1649 0806 89       		.byte	0x89
 1650 0807 A2000000 		.4byte	0xa2
 1651 080b 04       		.byte	0x4
 1652 080c 0C       		.uleb128 0xc
 1653 080d D3070000 		.4byte	.LASF85
 1654 0811 05       		.byte	0x5
 1655 0812 8E       		.byte	0x8e
 1656 0813 1F080000 		.4byte	0x81f
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 60


 1657 0817 08       		.byte	0x8
 1658 0818 00       		.byte	0
 1659 0819 0D       		.uleb128 0xd
 1660 081a 04       		.byte	0x4
 1661 081b CC070000 		.4byte	0x7cc
 1662 081f 10       		.uleb128 0x10
 1663 0820 19080000 		.4byte	0x819
 1664 0824 03       		.uleb128 0x3
 1665 0825 DD090000 		.4byte	.LASF110
 1666 0829 05       		.byte	0x5
 1667 082a 91       		.byte	0x91
 1668 082b DC070000 		.4byte	0x7dc
 1669 082f 13       		.uleb128 0x13
 1670 0830 D1010000 		.4byte	.LASF115
 1671 0834 02       		.byte	0x2
 1672 0835 3501     		.2byte	0x135
 1673 0837 E9010000 		.4byte	0x1e9
 1674 083b 03       		.byte	0x3
 1675 083c 8B080000 		.4byte	0x88b
 1676 0840 14       		.uleb128 0x14
 1677 0841 00080000 		.4byte	.LASF111
 1678 0845 02       		.byte	0x2
 1679 0846 3501     		.2byte	0x135
 1680 0848 91080000 		.4byte	0x891
 1681 084c 14       		.uleb128 0x14
 1682 084d D6020000 		.4byte	.LASF83
 1683 0851 02       		.byte	0x2
 1684 0852 3501     		.2byte	0x135
 1685 0854 CD020000 		.4byte	0x2cd
 1686 0858 15       		.uleb128 0x15
 1687 0859 72657400 		.ascii	"ret\000"
 1688 085d 02       		.byte	0x2
 1689 085e 3801     		.2byte	0x138
 1690 0860 E9010000 		.4byte	0x1e9
 1691 0864 16       		.uleb128 0x16
 1692 0865 1F090000 		.4byte	.LASF112
 1693 0869 02       		.byte	0x2
 1694 086a 3901     		.2byte	0x139
 1695 086c C2000000 		.4byte	0xc2
 1696 0870 16       		.uleb128 0x16
 1697 0871 8A000000 		.4byte	.LASF113
 1698 0875 02       		.byte	0x2
 1699 0876 4301     		.2byte	0x143
 1700 0878 70030000 		.4byte	0x370
 1701 087c 17       		.uleb128 0x17
 1702 087d 16       		.uleb128 0x16
 1703 087e CB000000 		.4byte	.LASF114
 1704 0882 02       		.byte	0x2
 1705 0883 4801     		.2byte	0x148
 1706 0885 0B010000 		.4byte	0x10b
 1707 0889 00       		.byte	0
 1708 088a 00       		.byte	0
 1709 088b 0D       		.uleb128 0xd
 1710 088c 04       		.byte	0x4
 1711 088d DD030000 		.4byte	0x3dd
 1712 0891 10       		.uleb128 0x10
 1713 0892 8B080000 		.4byte	0x88b
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 61


 1714 0896 18       		.uleb128 0x18
 1715 0897 82090000 		.4byte	.LASF116
 1716 089b 02       		.byte	0x2
 1717 089c C6       		.byte	0xc6
 1718 089d E9010000 		.4byte	0x1e9
 1719 08a1 03       		.byte	0x3
 1720 08a2 E2080000 		.4byte	0x8e2
 1721 08a6 19       		.uleb128 0x19
 1722 08a7 00080000 		.4byte	.LASF111
 1723 08ab 02       		.byte	0x2
 1724 08ac C6       		.byte	0xc6
 1725 08ad 91080000 		.4byte	0x891
 1726 08b1 19       		.uleb128 0x19
 1727 08b2 2F090000 		.4byte	.LASF84
 1728 08b6 02       		.byte	0x2
 1729 08b7 C6       		.byte	0xc6
 1730 08b8 E2080000 		.4byte	0x8e2
 1731 08bc 1A       		.uleb128 0x1a
 1732 08bd 1F090000 		.4byte	.LASF112
 1733 08c1 02       		.byte	0x2
 1734 08c2 C9       		.byte	0xc9
 1735 08c3 C2000000 		.4byte	0xc2
 1736 08c7 17       		.uleb128 0x17
 1737 08c8 1A       		.uleb128 0x1a
 1738 08c9 8A000000 		.4byte	.LASF113
 1739 08cd 02       		.byte	0x2
 1740 08ce CF       		.byte	0xcf
 1741 08cf 70030000 		.4byte	0x370
 1742 08d3 17       		.uleb128 0x17
 1743 08d4 1A       		.uleb128 0x1a
 1744 08d5 CB000000 		.4byte	.LASF114
 1745 08d9 02       		.byte	0x2
 1746 08da D3       		.byte	0xd3
 1747 08db 0B010000 		.4byte	0x10b
 1748 08df 00       		.byte	0
 1749 08e0 00       		.byte	0
 1750 08e1 00       		.byte	0
 1751 08e2 10       		.uleb128 0x10
 1752 08e3 45020000 		.4byte	0x245
 1753 08e7 13       		.uleb128 0x13
 1754 08e8 25020000 		.4byte	.LASF117
 1755 08ec 02       		.byte	0x2
 1756 08ed 5D01     		.2byte	0x15d
 1757 08ef E9010000 		.4byte	0x1e9
 1758 08f3 03       		.byte	0x3
 1759 08f4 1F090000 		.4byte	0x91f
 1760 08f8 14       		.uleb128 0x14
 1761 08f9 00080000 		.4byte	.LASF111
 1762 08fd 02       		.byte	0x2
 1763 08fe 5D01     		.2byte	0x15d
 1764 0900 91080000 		.4byte	0x891
 1765 0904 15       		.uleb128 0x15
 1766 0905 72657400 		.ascii	"ret\000"
 1767 0909 02       		.byte	0x2
 1768 090a 5F01     		.2byte	0x15f
 1769 090c E9010000 		.4byte	0x1e9
 1770 0910 17       		.uleb128 0x17
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 62


 1771 0911 16       		.uleb128 0x16
 1772 0912 D6020000 		.4byte	.LASF83
 1773 0916 02       		.byte	0x2
 1774 0917 6401     		.2byte	0x164
 1775 0919 71020000 		.4byte	0x271
 1776 091d 00       		.byte	0
 1777 091e 00       		.byte	0
 1778 091f 18       		.uleb128 0x18
 1779 0920 47010000 		.4byte	.LASF118
 1780 0924 02       		.byte	0x2
 1781 0925 B8       		.byte	0xb8
 1782 0926 45020000 		.4byte	0x245
 1783 092a 03       		.byte	0x3
 1784 092b 3B090000 		.4byte	0x93b
 1785 092f 19       		.uleb128 0x19
 1786 0930 00080000 		.4byte	.LASF111
 1787 0934 02       		.byte	0x2
 1788 0935 B8       		.byte	0xb8
 1789 0936 46090000 		.4byte	0x946
 1790 093a 00       		.byte	0
 1791 093b 0D       		.uleb128 0xd
 1792 093c 04       		.byte	0x4
 1793 093d 41090000 		.4byte	0x941
 1794 0941 10       		.uleb128 0x10
 1795 0942 DD030000 		.4byte	0x3dd
 1796 0946 10       		.uleb128 0x10
 1797 0947 3B090000 		.4byte	0x93b
 1798 094b 13       		.uleb128 0x13
 1799 094c F3050000 		.4byte	.LASF119
 1800 0950 02       		.byte	0x2
 1801 0951 1201     		.2byte	0x112
 1802 0953 71020000 		.4byte	0x271
 1803 0957 03       		.byte	0x3
 1804 0958 69090000 		.4byte	0x969
 1805 095c 14       		.uleb128 0x14
 1806 095d 00080000 		.4byte	.LASF111
 1807 0961 02       		.byte	0x2
 1808 0962 1201     		.2byte	0x112
 1809 0964 46090000 		.4byte	0x946
 1810 0968 00       		.byte	0
 1811 0969 13       		.uleb128 0x13
 1812 096a 68020000 		.4byte	.LASF120
 1813 096e 03       		.byte	0x3
 1814 096f 3501     		.2byte	0x135
 1815 0971 E9010000 		.4byte	0x1e9
 1816 0975 03       		.byte	0x3
 1817 0976 C5090000 		.4byte	0x9c5
 1818 097a 14       		.uleb128 0x14
 1819 097b 00080000 		.4byte	.LASF111
 1820 097f 03       		.byte	0x3
 1821 0980 3501     		.2byte	0x135
 1822 0982 CB090000 		.4byte	0x9cb
 1823 0986 14       		.uleb128 0x14
 1824 0987 D6020000 		.4byte	.LASF83
 1825 098b 03       		.byte	0x3
 1826 098c 3501     		.2byte	0x135
 1827 098e 59040000 		.4byte	0x459
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 63


 1828 0992 15       		.uleb128 0x15
 1829 0993 72657400 		.ascii	"ret\000"
 1830 0997 03       		.byte	0x3
 1831 0998 3801     		.2byte	0x138
 1832 099a E9010000 		.4byte	0x1e9
 1833 099e 16       		.uleb128 0x16
 1834 099f 1F090000 		.4byte	.LASF112
 1835 09a3 03       		.byte	0x3
 1836 09a4 3901     		.2byte	0x139
 1837 09a6 C2000000 		.4byte	0xc2
 1838 09aa 16       		.uleb128 0x16
 1839 09ab 8A000000 		.4byte	.LASF113
 1840 09af 03       		.byte	0x3
 1841 09b0 4301     		.2byte	0x143
 1842 09b2 70030000 		.4byte	0x370
 1843 09b6 17       		.uleb128 0x17
 1844 09b7 16       		.uleb128 0x16
 1845 09b8 CB000000 		.4byte	.LASF114
 1846 09bc 03       		.byte	0x3
 1847 09bd 4801     		.2byte	0x148
 1848 09bf 0B010000 		.4byte	0x10b
 1849 09c3 00       		.byte	0
 1850 09c4 00       		.byte	0
 1851 09c5 0D       		.uleb128 0xd
 1852 09c6 04       		.byte	0x4
 1853 09c7 4A050000 		.4byte	0x54a
 1854 09cb 10       		.uleb128 0x10
 1855 09cc C5090000 		.4byte	0x9c5
 1856 09d0 18       		.uleb128 0x18
 1857 09d1 AD030000 		.4byte	.LASF121
 1858 09d5 03       		.byte	0x3
 1859 09d6 B8       		.byte	0xb8
 1860 09d7 45020000 		.4byte	0x245
 1861 09db 03       		.byte	0x3
 1862 09dc EC090000 		.4byte	0x9ec
 1863 09e0 19       		.uleb128 0x19
 1864 09e1 00080000 		.4byte	.LASF111
 1865 09e5 03       		.byte	0x3
 1866 09e6 B8       		.byte	0xb8
 1867 09e7 F7090000 		.4byte	0x9f7
 1868 09eb 00       		.byte	0
 1869 09ec 0D       		.uleb128 0xd
 1870 09ed 04       		.byte	0x4
 1871 09ee F2090000 		.4byte	0x9f2
 1872 09f2 10       		.uleb128 0x10
 1873 09f3 4A050000 		.4byte	0x54a
 1874 09f7 10       		.uleb128 0x10
 1875 09f8 EC090000 		.4byte	0x9ec
 1876 09fc 13       		.uleb128 0x13
 1877 09fd 1F060000 		.4byte	.LASF122
 1878 0a01 03       		.byte	0x3
 1879 0a02 1201     		.2byte	0x112
 1880 0a04 FD030000 		.4byte	0x3fd
 1881 0a08 03       		.byte	0x3
 1882 0a09 1A0A0000 		.4byte	0xa1a
 1883 0a0d 14       		.uleb128 0x14
 1884 0a0e 00080000 		.4byte	.LASF111
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 64


 1885 0a12 03       		.byte	0x3
 1886 0a13 1201     		.2byte	0x112
 1887 0a15 F7090000 		.4byte	0x9f7
 1888 0a19 00       		.byte	0
 1889 0a1a 18       		.uleb128 0x18
 1890 0a1b 1E000000 		.4byte	.LASF123
 1891 0a1f 03       		.byte	0x3
 1892 0a20 E4       		.byte	0xe4
 1893 0a21 A2000000 		.4byte	0xa2
 1894 0a25 03       		.byte	0x3
 1895 0a26 360A0000 		.4byte	0xa36
 1896 0a2a 19       		.uleb128 0x19
 1897 0a2b 00080000 		.4byte	.LASF111
 1898 0a2f 03       		.byte	0x3
 1899 0a30 E4       		.byte	0xe4
 1900 0a31 F7090000 		.4byte	0x9f7
 1901 0a35 00       		.byte	0
 1902 0a36 13       		.uleb128 0x13
 1903 0a37 30010000 		.4byte	.LASF124
 1904 0a3b 04       		.byte	0x4
 1905 0a3c 7E01     		.2byte	0x17e
 1906 0a3e E9010000 		.4byte	0x1e9
 1907 0a42 03       		.byte	0x3
 1908 0a43 600A0000 		.4byte	0xa60
 1909 0a47 14       		.uleb128 0x14
 1910 0a48 00080000 		.4byte	.LASF111
 1911 0a4c 04       		.byte	0x4
 1912 0a4d 7E01     		.2byte	0x17e
 1913 0a4f 6B0A0000 		.4byte	0xa6b
 1914 0a53 15       		.uleb128 0x15
 1915 0a54 72657400 		.ascii	"ret\000"
 1916 0a58 04       		.byte	0x4
 1917 0a59 8001     		.2byte	0x180
 1918 0a5b E9010000 		.4byte	0x1e9
 1919 0a5f 00       		.byte	0
 1920 0a60 0D       		.uleb128 0xd
 1921 0a61 04       		.byte	0x4
 1922 0a62 660A0000 		.4byte	0xa66
 1923 0a66 10       		.uleb128 0x10
 1924 0a67 B7060000 		.4byte	0x6b7
 1925 0a6b 10       		.uleb128 0x10
 1926 0a6c 600A0000 		.4byte	0xa60
 1927 0a70 13       		.uleb128 0x13
 1928 0a71 BF010000 		.4byte	.LASF125
 1929 0a75 04       		.byte	0x4
 1930 0a76 3501     		.2byte	0x135
 1931 0a78 E9010000 		.4byte	0x1e9
 1932 0a7c 03       		.byte	0x3
 1933 0a7d CC0A0000 		.4byte	0xacc
 1934 0a81 14       		.uleb128 0x14
 1935 0a82 00080000 		.4byte	.LASF111
 1936 0a86 04       		.byte	0x4
 1937 0a87 3501     		.2byte	0x135
 1938 0a89 D20A0000 		.4byte	0xad2
 1939 0a8d 14       		.uleb128 0x14
 1940 0a8e D6020000 		.4byte	.LASF83
 1941 0a92 04       		.byte	0x4
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 65


 1942 0a93 3501     		.2byte	0x135
 1943 0a95 C6050000 		.4byte	0x5c6
 1944 0a99 15       		.uleb128 0x15
 1945 0a9a 72657400 		.ascii	"ret\000"
 1946 0a9e 04       		.byte	0x4
 1947 0a9f 3801     		.2byte	0x138
 1948 0aa1 E9010000 		.4byte	0x1e9
 1949 0aa5 16       		.uleb128 0x16
 1950 0aa6 1F090000 		.4byte	.LASF112
 1951 0aaa 04       		.byte	0x4
 1952 0aab 3901     		.2byte	0x139
 1953 0aad C2000000 		.4byte	0xc2
 1954 0ab1 16       		.uleb128 0x16
 1955 0ab2 8A000000 		.4byte	.LASF113
 1956 0ab6 04       		.byte	0x4
 1957 0ab7 4301     		.2byte	0x143
 1958 0ab9 70030000 		.4byte	0x370
 1959 0abd 17       		.uleb128 0x17
 1960 0abe 16       		.uleb128 0x16
 1961 0abf CB000000 		.4byte	.LASF114
 1962 0ac3 04       		.byte	0x4
 1963 0ac4 4801     		.2byte	0x148
 1964 0ac6 0B010000 		.4byte	0x10b
 1965 0aca 00       		.byte	0
 1966 0acb 00       		.byte	0
 1967 0acc 0D       		.uleb128 0xd
 1968 0acd 04       		.byte	0x4
 1969 0ace B7060000 		.4byte	0x6b7
 1970 0ad2 10       		.uleb128 0x10
 1971 0ad3 CC0A0000 		.4byte	0xacc
 1972 0ad7 13       		.uleb128 0x13
 1973 0ad8 A1060000 		.4byte	.LASF126
 1974 0adc 05       		.byte	0x5
 1975 0add 7E01     		.2byte	0x17e
 1976 0adf E9010000 		.4byte	0x1e9
 1977 0ae3 03       		.byte	0x3
 1978 0ae4 010B0000 		.4byte	0xb01
 1979 0ae8 14       		.uleb128 0x14
 1980 0ae9 00080000 		.4byte	.LASF111
 1981 0aed 05       		.byte	0x5
 1982 0aee 7E01     		.2byte	0x17e
 1983 0af0 0C0B0000 		.4byte	0xb0c
 1984 0af4 15       		.uleb128 0x15
 1985 0af5 72657400 		.ascii	"ret\000"
 1986 0af9 05       		.byte	0x5
 1987 0afa 8001     		.2byte	0x180
 1988 0afc E9010000 		.4byte	0x1e9
 1989 0b00 00       		.byte	0
 1990 0b01 0D       		.uleb128 0xd
 1991 0b02 04       		.byte	0x4
 1992 0b03 070B0000 		.4byte	0xb07
 1993 0b07 10       		.uleb128 0x10
 1994 0b08 24080000 		.4byte	0x824
 1995 0b0c 10       		.uleb128 0x10
 1996 0b0d 010B0000 		.4byte	0xb01
 1997 0b11 13       		.uleb128 0x13
 1998 0b12 3E060000 		.4byte	.LASF127
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 66


 1999 0b16 05       		.byte	0x5
 2000 0b17 3501     		.2byte	0x135
 2001 0b19 E9010000 		.4byte	0x1e9
 2002 0b1d 03       		.byte	0x3
 2003 0b1e 6D0B0000 		.4byte	0xb6d
 2004 0b22 14       		.uleb128 0x14
 2005 0b23 00080000 		.4byte	.LASF111
 2006 0b27 05       		.byte	0x5
 2007 0b28 3501     		.2byte	0x135
 2008 0b2a 730B0000 		.4byte	0xb73
 2009 0b2e 14       		.uleb128 0x14
 2010 0b2f D6020000 		.4byte	.LASF83
 2011 0b33 05       		.byte	0x5
 2012 0b34 3501     		.2byte	0x135
 2013 0b36 33070000 		.4byte	0x733
 2014 0b3a 15       		.uleb128 0x15
 2015 0b3b 72657400 		.ascii	"ret\000"
 2016 0b3f 05       		.byte	0x5
 2017 0b40 3801     		.2byte	0x138
 2018 0b42 E9010000 		.4byte	0x1e9
 2019 0b46 16       		.uleb128 0x16
 2020 0b47 1F090000 		.4byte	.LASF112
 2021 0b4b 05       		.byte	0x5
 2022 0b4c 3901     		.2byte	0x139
 2023 0b4e C2000000 		.4byte	0xc2
 2024 0b52 16       		.uleb128 0x16
 2025 0b53 8A000000 		.4byte	.LASF113
 2026 0b57 05       		.byte	0x5
 2027 0b58 4301     		.2byte	0x143
 2028 0b5a 70030000 		.4byte	0x370
 2029 0b5e 17       		.uleb128 0x17
 2030 0b5f 16       		.uleb128 0x16
 2031 0b60 CB000000 		.4byte	.LASF114
 2032 0b64 05       		.byte	0x5
 2033 0b65 4801     		.2byte	0x148
 2034 0b67 0B010000 		.4byte	0x10b
 2035 0b6b 00       		.byte	0
 2036 0b6c 00       		.byte	0
 2037 0b6d 0D       		.uleb128 0xd
 2038 0b6e 04       		.byte	0x4
 2039 0b6f 24080000 		.4byte	0x824
 2040 0b73 10       		.uleb128 0x10
 2041 0b74 6D0B0000 		.4byte	0xb6d
 2042 0b78 1B       		.uleb128 0x1b
 2043 0b79 A2000000 		.4byte	.LASF128
 2044 0b7d 01       		.byte	0x1
 2045 0b7e 2C       		.byte	0x2c
 2046 0b7f 00000000 		.4byte	.LFB180
 2047 0b83 94000000 		.4byte	.LFE180-.LFB180
 2048 0b87 01       		.uleb128 0x1
 2049 0b88 9C       		.byte	0x9c
 2050 0b89 BD0C0000 		.4byte	0xcbd
 2051 0b8d 1C       		.uleb128 0x1c
 2052 0b8e 657600   		.ascii	"ev\000"
 2053 0b91 01       		.byte	0x1
 2054 0b92 2C       		.byte	0x2c
 2055 0b93 0A020000 		.4byte	0x20a
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 67


 2056 0b97 00000000 		.4byte	.LLST0
 2057 0b9b 1D       		.uleb128 0x1d
 2058 0b9c E7080000 		.4byte	0x8e7
 2059 0ba0 04000000 		.4byte	.LBB49
 2060 0ba4 82000000 		.4byte	.LBE49-.LBB49
 2061 0ba8 01       		.byte	0x1
 2062 0ba9 30       		.byte	0x30
 2063 0baa AD0C0000 		.4byte	0xcad
 2064 0bae 1E       		.uleb128 0x1e
 2065 0baf F8080000 		.4byte	0x8f8
 2066 0bb3 1F       		.uleb128 0x1f
 2067 0bb4 04000000 		.4byte	.LBB50
 2068 0bb8 82000000 		.4byte	.LBE50-.LBB50
 2069 0bbc 20       		.uleb128 0x20
 2070 0bbd 04090000 		.4byte	0x904
 2071 0bc1 1F000000 		.4byte	.LLST1
 2072 0bc5 1F       		.uleb128 0x1f
 2073 0bc6 0E000000 		.4byte	.LBB51
 2074 0bca 78000000 		.4byte	.LBE51-.LBB51
 2075 0bce 21       		.uleb128 0x21
 2076 0bcf 11090000 		.4byte	0x911
 2077 0bd3 02       		.uleb128 0x2
 2078 0bd4 91       		.byte	0x91
 2079 0bd5 68       		.sleb128 -24
 2080 0bd6 22       		.uleb128 0x22
 2081 0bd7 2F080000 		.4byte	0x82f
 2082 0bdb 26000000 		.4byte	.LBB52
 2083 0bdf 34000000 		.4byte	.LBE52-.LBB52
 2084 0be3 02       		.byte	0x2
 2085 0be4 6A01     		.2byte	0x16a
 2086 0be6 390C0000 		.4byte	0xc39
 2087 0bea 23       		.uleb128 0x23
 2088 0beb 4C080000 		.4byte	0x84c
 2089 0bef 02       		.uleb128 0x2
 2090 0bf0 91       		.byte	0x91
 2091 0bf1 6C       		.sleb128 -20
 2092 0bf2 1E       		.uleb128 0x1e
 2093 0bf3 40080000 		.4byte	0x840
 2094 0bf7 1F       		.uleb128 0x1f
 2095 0bf8 26000000 		.4byte	.LBB53
 2096 0bfc 34000000 		.4byte	.LBE53-.LBB53
 2097 0c00 20       		.uleb128 0x20
 2098 0c01 58080000 		.4byte	0x858
 2099 0c05 5F000000 		.4byte	.LLST2
 2100 0c09 20       		.uleb128 0x20
 2101 0c0a 64080000 		.4byte	0x864
 2102 0c0e 73000000 		.4byte	.LLST3
 2103 0c12 20       		.uleb128 0x20
 2104 0c13 70080000 		.4byte	0x870
 2105 0c17 A9000000 		.4byte	.LLST4
 2106 0c1b 1F       		.uleb128 0x1f
 2107 0c1c 3E000000 		.4byte	.LBB54
 2108 0c20 0A000000 		.4byte	.LBE54-.LBB54
 2109 0c24 20       		.uleb128 0x20
 2110 0c25 7D080000 		.4byte	0x87d
 2111 0c29 BC000000 		.4byte	.LLST5
 2112 0c2d 24       		.uleb128 0x24
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 68


 2113 0c2e 48000000 		.4byte	.LVL7
 2114 0c32 64100000 		.4byte	0x1064
 2115 0c36 00       		.byte	0
 2116 0c37 00       		.byte	0
 2117 0c38 00       		.byte	0
 2118 0c39 22       		.uleb128 0x22
 2119 0c3a 96080000 		.4byte	0x896
 2120 0c3e 5A000000 		.4byte	.LBB55
 2121 0c42 2C000000 		.4byte	.LBE55-.LBB55
 2122 0c46 02       		.byte	0x2
 2123 0c47 6F01     		.2byte	0x16f
 2124 0c49 9E0C0000 		.4byte	0xc9e
 2125 0c4d 25       		.uleb128 0x25
 2126 0c4e B1080000 		.4byte	0x8b1
 2127 0c52 D5000000 		.4byte	.LLST6
 2128 0c56 1E       		.uleb128 0x1e
 2129 0c57 A6080000 		.4byte	0x8a6
 2130 0c5b 1F       		.uleb128 0x1f
 2131 0c5c 5A000000 		.4byte	.LBB56
 2132 0c60 2C000000 		.4byte	.LBE56-.LBB56
 2133 0c64 20       		.uleb128 0x20
 2134 0c65 BC080000 		.4byte	0x8bc
 2135 0c69 E9000000 		.4byte	.LLST7
 2136 0c6d 1F       		.uleb128 0x1f
 2137 0c6e 60000000 		.4byte	.LBB57
 2138 0c72 26000000 		.4byte	.LBE57-.LBB57
 2139 0c76 20       		.uleb128 0x20
 2140 0c77 C8080000 		.4byte	0x8c8
 2141 0c7b 1F010000 		.4byte	.LLST8
 2142 0c7f 1F       		.uleb128 0x1f
 2143 0c80 6C000000 		.4byte	.LBB58
 2144 0c84 0A000000 		.4byte	.LBE58-.LBB58
 2145 0c88 20       		.uleb128 0x20
 2146 0c89 D4080000 		.4byte	0x8d4
 2147 0c8d 32010000 		.4byte	.LLST9
 2148 0c91 24       		.uleb128 0x24
 2149 0c92 76000000 		.4byte	.LVL15
 2150 0c96 64100000 		.4byte	0x1064
 2151 0c9a 00       		.byte	0
 2152 0c9b 00       		.byte	0
 2153 0c9c 00       		.byte	0
 2154 0c9d 00       		.byte	0
 2155 0c9e 26       		.uleb128 0x26
 2156 0c9f 1C000000 		.4byte	.LVL2
 2157 0ca3 27       		.uleb128 0x27
 2158 0ca4 01       		.uleb128 0x1
 2159 0ca5 50       		.byte	0x50
 2160 0ca6 02       		.uleb128 0x2
 2161 0ca7 91       		.byte	0x91
 2162 0ca8 68       		.sleb128 -24
 2163 0ca9 00       		.byte	0
 2164 0caa 00       		.byte	0
 2165 0cab 00       		.byte	0
 2166 0cac 00       		.byte	0
 2167 0cad 28       		.uleb128 0x28
 2168 0cae 8C000000 		.4byte	.LVL20
 2169 0cb2 70100000 		.4byte	0x1070
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 69


 2170 0cb6 27       		.uleb128 0x27
 2171 0cb7 01       		.uleb128 0x1
 2172 0cb8 50       		.byte	0x50
 2173 0cb9 01       		.uleb128 0x1
 2174 0cba 30       		.byte	0x30
 2175 0cbb 00       		.byte	0
 2176 0cbc 00       		.byte	0
 2177 0cbd 1B       		.uleb128 0x1b
 2178 0cbe D0000000 		.4byte	.LASF129
 2179 0cc2 01       		.byte	0x1
 2180 0cc3 41       		.byte	0x41
 2181 0cc4 00000000 		.4byte	.LFB181
 2182 0cc8 7C000000 		.4byte	.LFE181-.LFB181
 2183 0ccc 01       		.uleb128 0x1
 2184 0ccd 9C       		.byte	0x9c
 2185 0cce A80D0000 		.4byte	0xda8
 2186 0cd2 1C       		.uleb128 0x1c
 2187 0cd3 657600   		.ascii	"ev\000"
 2188 0cd6 01       		.byte	0x1
 2189 0cd7 41       		.byte	0x41
 2190 0cd8 0A020000 		.4byte	0x20a
 2191 0cdc 4B010000 		.4byte	.LLST10
 2192 0ce0 1F       		.uleb128 0x1f
 2193 0ce1 0A000000 		.4byte	.LBB59
 2194 0ce5 62000000 		.4byte	.LBE59-.LBB59
 2195 0ce9 29       		.uleb128 0x29
 2196 0cea 62050000 		.4byte	.LASF130
 2197 0cee 01       		.byte	0x1
 2198 0cef 46       		.byte	0x46
 2199 0cf0 FD030000 		.4byte	0x3fd
 2200 0cf4 90010000 		.4byte	.LLST11
 2201 0cf8 2A       		.uleb128 0x2a
 2202 0cf9 B5020000 		.4byte	.LASF131
 2203 0cfd 01       		.byte	0x1
 2204 0cfe 47       		.byte	0x47
 2205 0cff 71020000 		.4byte	0x271
 2206 0d03 02       		.uleb128 0x2
 2207 0d04 91       		.byte	0x91
 2208 0d05 64       		.sleb128 -28
 2209 0d06 1D       		.uleb128 0x1d
 2210 0d07 1F090000 		.4byte	0x91f
 2211 0d0b 12000000 		.4byte	.LBB60
 2212 0d0f 04000000 		.4byte	.LBE60-.LBB60
 2213 0d13 01       		.byte	0x1
 2214 0d14 4A       		.byte	0x4a
 2215 0d15 1F0D0000 		.4byte	0xd1f
 2216 0d19 1E       		.uleb128 0x1e
 2217 0d1a 2F090000 		.4byte	0x92f
 2218 0d1e 00       		.byte	0
 2219 0d1f 1D       		.uleb128 0x1d
 2220 0d20 4B090000 		.4byte	0x94b
 2221 0d24 1A000000 		.4byte	.LBB62
 2222 0d28 0C000000 		.4byte	.LBE62-.LBB62
 2223 0d2c 01       		.byte	0x1
 2224 0d2d 4B       		.byte	0x4b
 2225 0d2e 380D0000 		.4byte	0xd38
 2226 0d32 1E       		.uleb128 0x1e
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 70


 2227 0d33 5C090000 		.4byte	0x95c
 2228 0d37 00       		.byte	0
 2229 0d38 1D       		.uleb128 0x1d
 2230 0d39 69090000 		.4byte	0x969
 2231 0d3d 34000000 		.4byte	.LBB64
 2232 0d41 32000000 		.4byte	.LBE64-.LBB64
 2233 0d45 01       		.byte	0x1
 2234 0d46 5A       		.byte	0x5a
 2235 0d47 970D0000 		.4byte	0xd97
 2236 0d4b 1E       		.uleb128 0x1e
 2237 0d4c 86090000 		.4byte	0x986
 2238 0d50 1E       		.uleb128 0x1e
 2239 0d51 7A090000 		.4byte	0x97a
 2240 0d55 1F       		.uleb128 0x1f
 2241 0d56 34000000 		.4byte	.LBB65
 2242 0d5a 32000000 		.4byte	.LBE65-.LBB65
 2243 0d5e 20       		.uleb128 0x20
 2244 0d5f 92090000 		.4byte	0x992
 2245 0d63 A3010000 		.4byte	.LLST12
 2246 0d67 20       		.uleb128 0x20
 2247 0d68 9E090000 		.4byte	0x99e
 2248 0d6c B7010000 		.4byte	.LLST13
 2249 0d70 20       		.uleb128 0x20
 2250 0d71 AA090000 		.4byte	0x9aa
 2251 0d75 ED010000 		.4byte	.LLST14
 2252 0d79 1F       		.uleb128 0x1f
 2253 0d7a 4C000000 		.4byte	.LBB66
 2254 0d7e 0A000000 		.4byte	.LBE66-.LBB66
 2255 0d82 20       		.uleb128 0x20
 2256 0d83 B7090000 		.4byte	0x9b7
 2257 0d87 00020000 		.4byte	.LLST15
 2258 0d8b 24       		.uleb128 0x24
 2259 0d8c 56000000 		.4byte	.LVL32
 2260 0d90 64100000 		.4byte	0x1064
 2261 0d94 00       		.byte	0
 2262 0d95 00       		.byte	0
 2263 0d96 00       		.byte	0
 2264 0d97 28       		.uleb128 0x28
 2265 0d98 6C000000 		.4byte	.LVL37
 2266 0d9c 70100000 		.4byte	0x1070
 2267 0da0 27       		.uleb128 0x27
 2268 0da1 01       		.uleb128 0x1
 2269 0da2 50       		.byte	0x50
 2270 0da3 01       		.uleb128 0x1
 2271 0da4 31       		.byte	0x31
 2272 0da5 00       		.byte	0
 2273 0da6 00       		.byte	0
 2274 0da7 00       		.byte	0
 2275 0da8 2B       		.uleb128 0x2b
 2276 0da9 D2080000 		.4byte	.LASF132
 2277 0dad 01       		.byte	0x1
 2278 0dae 6D       		.byte	0x6d
 2279 0daf 00000000 		.4byte	.LFB182
 2280 0db3 70000000 		.4byte	.LFE182-.LFB182
 2281 0db7 01       		.uleb128 0x1
 2282 0db8 9C       		.byte	0x9c
 2283 0db9 BE0E0000 		.4byte	0xebe
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 71


 2284 0dbd 1C       		.uleb128 0x1c
 2285 0dbe 657600   		.ascii	"ev\000"
 2286 0dc1 01       		.byte	0x1
 2287 0dc2 6D       		.byte	0x6d
 2288 0dc3 0A020000 		.4byte	0x20a
 2289 0dc7 19020000 		.4byte	.LLST16
 2290 0dcb 29       		.uleb128 0x29
 2291 0dcc 62050000 		.4byte	.LASF130
 2292 0dd0 01       		.byte	0x1
 2293 0dd1 72       		.byte	0x72
 2294 0dd2 FD030000 		.4byte	0x3fd
 2295 0dd6 38020000 		.4byte	.LLST17
 2296 0dda 1A       		.uleb128 0x1a
 2297 0ddb E7060000 		.4byte	.LASF133
 2298 0ddf 01       		.byte	0x1
 2299 0de0 73       		.byte	0x73
 2300 0de1 A2000000 		.4byte	0xa2
 2301 0de5 29       		.uleb128 0x29
 2302 0de6 55090000 		.4byte	.LASF134
 2303 0dea 01       		.byte	0x1
 2304 0deb 75       		.byte	0x75
 2305 0dec 6A050000 		.4byte	0x56a
 2306 0df0 4B020000 		.4byte	.LLST18
 2307 0df4 1D       		.uleb128 0x1d
 2308 0df5 D0090000 		.4byte	0x9d0
 2309 0df9 06000000 		.4byte	.LBB67
 2310 0dfd 04000000 		.4byte	.LBE67-.LBB67
 2311 0e01 01       		.byte	0x1
 2312 0e02 79       		.byte	0x79
 2313 0e03 0D0E0000 		.4byte	0xe0d
 2314 0e07 1E       		.uleb128 0x1e
 2315 0e08 E0090000 		.4byte	0x9e0
 2316 0e0c 00       		.byte	0
 2317 0e0d 1D       		.uleb128 0x1d
 2318 0e0e 1A0A0000 		.4byte	0xa1a
 2319 0e12 12000000 		.4byte	.LBB69
 2320 0e16 04000000 		.4byte	.LBE69-.LBB69
 2321 0e1a 01       		.byte	0x1
 2322 0e1b 80       		.byte	0x80
 2323 0e1c 260E0000 		.4byte	0xe26
 2324 0e20 1E       		.uleb128 0x1e
 2325 0e21 2A0A0000 		.4byte	0xa2a
 2326 0e25 00       		.byte	0
 2327 0e26 1D       		.uleb128 0x1d
 2328 0e27 700A0000 		.4byte	0xa70
 2329 0e2b 1E000000 		.4byte	.LBB71
 2330 0e2f 32000000 		.4byte	.LBE71-.LBB71
 2331 0e33 01       		.byte	0x1
 2332 0e34 8A       		.byte	0x8a
 2333 0e35 820E0000 		.4byte	0xe82
 2334 0e39 1E       		.uleb128 0x1e
 2335 0e3a 8D0A0000 		.4byte	0xa8d
 2336 0e3e 1E       		.uleb128 0x1e
 2337 0e3f 810A0000 		.4byte	0xa81
 2338 0e43 1F       		.uleb128 0x1f
 2339 0e44 1E000000 		.4byte	.LBB72
 2340 0e48 32000000 		.4byte	.LBE72-.LBB72
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 72


 2341 0e4c 2C       		.uleb128 0x2c
 2342 0e4d 990A0000 		.4byte	0xa99
 2343 0e51 00       		.byte	0
 2344 0e52 20       		.uleb128 0x20
 2345 0e53 A50A0000 		.4byte	0xaa5
 2346 0e57 5E020000 		.4byte	.LLST19
 2347 0e5b 20       		.uleb128 0x20
 2348 0e5c B10A0000 		.4byte	0xab1
 2349 0e60 94020000 		.4byte	.LLST20
 2350 0e64 1F       		.uleb128 0x1f
 2351 0e65 36000000 		.4byte	.LBB73
 2352 0e69 0A000000 		.4byte	.LBE73-.LBB73
 2353 0e6d 20       		.uleb128 0x20
 2354 0e6e BE0A0000 		.4byte	0xabe
 2355 0e72 A7020000 		.4byte	.LLST21
 2356 0e76 24       		.uleb128 0x24
 2357 0e77 40000000 		.4byte	.LVL52
 2358 0e7b 64100000 		.4byte	0x1064
 2359 0e7f 00       		.byte	0
 2360 0e80 00       		.byte	0
 2361 0e81 00       		.byte	0
 2362 0e82 1D       		.uleb128 0x1d
 2363 0e83 360A0000 		.4byte	0xa36
 2364 0e87 56000000 		.4byte	.LBB74
 2365 0e8b 1A000000 		.4byte	.LBE74-.LBB74
 2366 0e8f 01       		.byte	0x1
 2367 0e90 8D       		.byte	0x8d
 2368 0e91 AE0E0000 		.4byte	0xeae
 2369 0e95 1E       		.uleb128 0x1e
 2370 0e96 470A0000 		.4byte	0xa47
 2371 0e9a 1F       		.uleb128 0x1f
 2372 0e9b 56000000 		.4byte	.LBB75
 2373 0e9f 1A000000 		.4byte	.LBE75-.LBB75
 2374 0ea3 20       		.uleb128 0x20
 2375 0ea4 530A0000 		.4byte	0xa53
 2376 0ea8 C0020000 		.4byte	.LLST22
 2377 0eac 00       		.byte	0
 2378 0ead 00       		.byte	0
 2379 0eae 28       		.uleb128 0x28
 2380 0eaf 56000000 		.4byte	.LVL57
 2381 0eb3 70100000 		.4byte	0x1070
 2382 0eb7 27       		.uleb128 0x27
 2383 0eb8 01       		.uleb128 0x1
 2384 0eb9 50       		.byte	0x50
 2385 0eba 01       		.uleb128 0x1
 2386 0ebb 32       		.byte	0x32
 2387 0ebc 00       		.byte	0
 2388 0ebd 00       		.byte	0
 2389 0ebe 2B       		.uleb128 0x2b
 2390 0ebf 9C090000 		.4byte	.LASF135
 2391 0ec3 01       		.byte	0x1
 2392 0ec4 9F       		.byte	0x9f
 2393 0ec5 00000000 		.4byte	.LFB183
 2394 0ec9 78000000 		.4byte	.LFE183-.LFB183
 2395 0ecd 01       		.uleb128 0x1
 2396 0ece 9C       		.byte	0x9c
 2397 0ecf BD0F0000 		.4byte	0xfbd
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 73


 2398 0ed3 1C       		.uleb128 0x1c
 2399 0ed4 657600   		.ascii	"ev\000"
 2400 0ed7 01       		.byte	0x1
 2401 0ed8 9F       		.byte	0x9f
 2402 0ed9 0A020000 		.4byte	0x20a
 2403 0edd D5020000 		.4byte	.LLST23
 2404 0ee1 1F       		.uleb128 0x1f
 2405 0ee2 08000000 		.4byte	.LBB76
 2406 0ee6 70000000 		.4byte	.LBE76-.LBB76
 2407 0eea 29       		.uleb128 0x29
 2408 0eeb 62050000 		.4byte	.LASF130
 2409 0eef 01       		.byte	0x1
 2410 0ef0 A6       		.byte	0xa6
 2411 0ef1 FD030000 		.4byte	0x3fd
 2412 0ef5 1A030000 		.4byte	.LLST24
 2413 0ef9 29       		.uleb128 0x29
 2414 0efa 56020000 		.4byte	.LASF136
 2415 0efe 01       		.byte	0x1
 2416 0eff AC       		.byte	0xac
 2417 0f00 D7060000 		.4byte	0x6d7
 2418 0f04 2D030000 		.4byte	.LLST25
 2419 0f08 1D       		.uleb128 0x1d
 2420 0f09 D0090000 		.4byte	0x9d0
 2421 0f0d 0C000000 		.4byte	.LBB77
 2422 0f11 04000000 		.4byte	.LBE77-.LBB77
 2423 0f15 01       		.byte	0x1
 2424 0f16 A9       		.byte	0xa9
 2425 0f17 210F0000 		.4byte	0xf21
 2426 0f1b 1E       		.uleb128 0x1e
 2427 0f1c E0090000 		.4byte	0x9e0
 2428 0f20 00       		.byte	0
 2429 0f21 1D       		.uleb128 0x1d
 2430 0f22 110B0000 		.4byte	0xb11
 2431 0f26 24000000 		.4byte	.LBB79
 2432 0f2a 32000000 		.4byte	.LBE79-.LBB79
 2433 0f2e 01       		.byte	0x1
 2434 0f2f B5       		.byte	0xb5
 2435 0f30 800F0000 		.4byte	0xf80
 2436 0f34 1E       		.uleb128 0x1e
 2437 0f35 2E0B0000 		.4byte	0xb2e
 2438 0f39 1E       		.uleb128 0x1e
 2439 0f3a 220B0000 		.4byte	0xb22
 2440 0f3e 1F       		.uleb128 0x1f
 2441 0f3f 24000000 		.4byte	.LBB80
 2442 0f43 32000000 		.4byte	.LBE80-.LBB80
 2443 0f47 20       		.uleb128 0x20
 2444 0f48 3A0B0000 		.4byte	0xb3a
 2445 0f4c 40030000 		.4byte	.LLST26
 2446 0f50 20       		.uleb128 0x20
 2447 0f51 460B0000 		.4byte	0xb46
 2448 0f55 54030000 		.4byte	.LLST27
 2449 0f59 20       		.uleb128 0x20
 2450 0f5a 520B0000 		.4byte	0xb52
 2451 0f5e 8A030000 		.4byte	.LLST28
 2452 0f62 1F       		.uleb128 0x1f
 2453 0f63 3C000000 		.4byte	.LBB81
 2454 0f67 0A000000 		.4byte	.LBE81-.LBB81
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 74


 2455 0f6b 20       		.uleb128 0x20
 2456 0f6c 5F0B0000 		.4byte	0xb5f
 2457 0f70 9D030000 		.4byte	.LLST29
 2458 0f74 24       		.uleb128 0x24
 2459 0f75 46000000 		.4byte	.LVL71
 2460 0f79 64100000 		.4byte	0x1064
 2461 0f7d 00       		.byte	0
 2462 0f7e 00       		.byte	0
 2463 0f7f 00       		.byte	0
 2464 0f80 1D       		.uleb128 0x1d
 2465 0f81 D70A0000 		.4byte	0xad7
 2466 0f85 5C000000 		.4byte	.LBB82
 2467 0f89 1C000000 		.4byte	.LBE82-.LBB82
 2468 0f8d 01       		.byte	0x1
 2469 0f8e B8       		.byte	0xb8
 2470 0f8f AC0F0000 		.4byte	0xfac
 2471 0f93 1E       		.uleb128 0x1e
 2472 0f94 E80A0000 		.4byte	0xae8
 2473 0f98 1F       		.uleb128 0x1f
 2474 0f99 5C000000 		.4byte	.LBB83
 2475 0f9d 1C000000 		.4byte	.LBE83-.LBB83
 2476 0fa1 20       		.uleb128 0x20
 2477 0fa2 F40A0000 		.4byte	0xaf4
 2478 0fa6 B6030000 		.4byte	.LLST30
 2479 0faa 00       		.byte	0
 2480 0fab 00       		.byte	0
 2481 0fac 28       		.uleb128 0x28
 2482 0fad 5C000000 		.4byte	.LVL76
 2483 0fb1 70100000 		.4byte	0x1070
 2484 0fb5 27       		.uleb128 0x27
 2485 0fb6 01       		.uleb128 0x1
 2486 0fb7 50       		.byte	0x50
 2487 0fb8 01       		.uleb128 0x1
 2488 0fb9 33       		.byte	0x33
 2489 0fba 00       		.byte	0
 2490 0fbb 00       		.byte	0
 2491 0fbc 00       		.byte	0
 2492 0fbd 1B       		.uleb128 0x1b
 2493 0fbe F6010000 		.4byte	.LASF137
 2494 0fc2 01       		.byte	0x1
 2495 0fc3 CB       		.byte	0xcb
 2496 0fc4 00000000 		.4byte	.LFB184
 2497 0fc8 0A000000 		.4byte	.LFE184-.LFB184
 2498 0fcc 01       		.uleb128 0x1
 2499 0fcd 9C       		.byte	0x9c
 2500 0fce F00F0000 		.4byte	0xff0
 2501 0fd2 1C       		.uleb128 0x1c
 2502 0fd3 657600   		.ascii	"ev\000"
 2503 0fd6 01       		.byte	0x1
 2504 0fd7 CB       		.byte	0xcb
 2505 0fd8 0A020000 		.4byte	0x20a
 2506 0fdc CB030000 		.4byte	.LLST31
 2507 0fe0 28       		.uleb128 0x28
 2508 0fe1 08000000 		.4byte	.LVL81
 2509 0fe5 70100000 		.4byte	0x1070
 2510 0fe9 27       		.uleb128 0x27
 2511 0fea 01       		.uleb128 0x1
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 75


 2512 0feb 50       		.byte	0x50
 2513 0fec 01       		.uleb128 0x1
 2514 0fed 34       		.byte	0x34
 2515 0fee 00       		.byte	0
 2516 0fef 00       		.byte	0
 2517 0ff0 2D       		.uleb128 0x2d
 2518 0ff1 E4030000 		.4byte	.LASF138
 2519 0ff5 13       		.byte	0x13
 2520 0ff6 40       		.byte	0x40
 2521 0ff7 EA000000 		.4byte	0xea
 2522 0ffb 2D       		.uleb128 0x2d
 2523 0ffc 13050000 		.4byte	.LASF139
 2524 1000 13       		.byte	0x13
 2525 1001 47       		.byte	0x47
 2526 1002 F5000000 		.4byte	0xf5
 2527 1006 2D       		.uleb128 0x2d
 2528 1007 3D050000 		.4byte	.LASF140
 2529 100b 13       		.byte	0x13
 2530 100c 4A       		.byte	0x4a
 2531 100d EA000000 		.4byte	0xea
 2532 1011 2D       		.uleb128 0x2d
 2533 1012 B0070000 		.4byte	.LASF141
 2534 1016 14       		.byte	0x14
 2535 1017 48       		.byte	0x48
 2536 1018 00010000 		.4byte	0x100
 2537 101c 2D       		.uleb128 0x2d
 2538 101d 36090000 		.4byte	.LASF142
 2539 1021 15       		.byte	0x15
 2540 1022 44       		.byte	0x44
 2541 1023 EA000000 		.4byte	0xea
 2542 1027 2E       		.uleb128 0x2e
 2543 1028 61010000 		.4byte	.LASF143
 2544 102c 16       		.byte	0x16
 2545 102d 1207     		.2byte	0x712
 2546 102f 33100000 		.4byte	0x1033
 2547 1033 2F       		.uleb128 0x2f
 2548 1034 97000000 		.4byte	0x97
 2549 1038 2D       		.uleb128 0x2d
 2550 1039 15030000 		.4byte	.LASF144
 2551 103d 17       		.byte	0x17
 2552 103e 2C       		.byte	0x2c
 2553 103f DD030000 		.4byte	0x3dd
 2554 1043 2D       		.uleb128 0x2d
 2555 1044 12070000 		.4byte	.LASF145
 2556 1048 17       		.byte	0x17
 2557 1049 3B       		.byte	0x3b
 2558 104a 4A050000 		.4byte	0x54a
 2559 104e 2D       		.uleb128 0x2d
 2560 104f 1F010000 		.4byte	.LASF146
 2561 1053 17       		.byte	0x17
 2562 1054 4A       		.byte	0x4a
 2563 1055 B7060000 		.4byte	0x6b7
 2564 1059 2D       		.uleb128 0x2d
 2565 105a 10020000 		.4byte	.LASF147
 2566 105e 17       		.byte	0x17
 2567 105f 68       		.byte	0x68
 2568 1060 24080000 		.4byte	0x824
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 76


 2569 1064 30       		.uleb128 0x30
 2570 1065 E9000000 		.4byte	.LASF148
 2571 1069 E9000000 		.4byte	.LASF148
 2572 106d 18       		.byte	0x18
 2573 106e 4A01     		.2byte	0x14a
 2574 1070 31       		.uleb128 0x31
 2575 1071 28030000 		.4byte	.LASF149
 2576 1075 28030000 		.4byte	.LASF149
 2577 1079 19       		.byte	0x19
 2578 107a 86       		.byte	0x86
 2579 107b 00       		.byte	0
 2580              		.section	.debug_abbrev,"",%progbits
 2581              	.Ldebug_abbrev0:
 2582 0000 01       		.uleb128 0x1
 2583 0001 11       		.uleb128 0x11
 2584 0002 01       		.byte	0x1
 2585 0003 25       		.uleb128 0x25
 2586 0004 0E       		.uleb128 0xe
 2587 0005 13       		.uleb128 0x13
 2588 0006 0B       		.uleb128 0xb
 2589 0007 03       		.uleb128 0x3
 2590 0008 0E       		.uleb128 0xe
 2591 0009 1B       		.uleb128 0x1b
 2592 000a 0E       		.uleb128 0xe
 2593 000b 55       		.uleb128 0x55
 2594 000c 17       		.uleb128 0x17
 2595 000d 11       		.uleb128 0x11
 2596 000e 01       		.uleb128 0x1
 2597 000f 10       		.uleb128 0x10
 2598 0010 17       		.uleb128 0x17
 2599 0011 00       		.byte	0
 2600 0012 00       		.byte	0
 2601 0013 02       		.uleb128 0x2
 2602 0014 24       		.uleb128 0x24
 2603 0015 00       		.byte	0
 2604 0016 0B       		.uleb128 0xb
 2605 0017 0B       		.uleb128 0xb
 2606 0018 3E       		.uleb128 0x3e
 2607 0019 0B       		.uleb128 0xb
 2608 001a 03       		.uleb128 0x3
 2609 001b 0E       		.uleb128 0xe
 2610 001c 00       		.byte	0
 2611 001d 00       		.byte	0
 2612 001e 03       		.uleb128 0x3
 2613 001f 16       		.uleb128 0x16
 2614 0020 00       		.byte	0
 2615 0021 03       		.uleb128 0x3
 2616 0022 0E       		.uleb128 0xe
 2617 0023 3A       		.uleb128 0x3a
 2618 0024 0B       		.uleb128 0xb
 2619 0025 3B       		.uleb128 0x3b
 2620 0026 0B       		.uleb128 0xb
 2621 0027 49       		.uleb128 0x49
 2622 0028 13       		.uleb128 0x13
 2623 0029 00       		.byte	0
 2624 002a 00       		.byte	0
 2625 002b 04       		.uleb128 0x4
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 77


 2626 002c 24       		.uleb128 0x24
 2627 002d 00       		.byte	0
 2628 002e 0B       		.uleb128 0xb
 2629 002f 0B       		.uleb128 0xb
 2630 0030 3E       		.uleb128 0x3e
 2631 0031 0B       		.uleb128 0xb
 2632 0032 03       		.uleb128 0x3
 2633 0033 08       		.uleb128 0x8
 2634 0034 00       		.byte	0
 2635 0035 00       		.byte	0
 2636 0036 05       		.uleb128 0x5
 2637 0037 16       		.uleb128 0x16
 2638 0038 00       		.byte	0
 2639 0039 03       		.uleb128 0x3
 2640 003a 0E       		.uleb128 0xe
 2641 003b 3A       		.uleb128 0x3a
 2642 003c 0B       		.uleb128 0xb
 2643 003d 3B       		.uleb128 0x3b
 2644 003e 05       		.uleb128 0x5
 2645 003f 49       		.uleb128 0x49
 2646 0040 13       		.uleb128 0x13
 2647 0041 00       		.byte	0
 2648 0042 00       		.byte	0
 2649 0043 06       		.uleb128 0x6
 2650 0044 04       		.uleb128 0x4
 2651 0045 01       		.byte	0x1
 2652 0046 0B       		.uleb128 0xb
 2653 0047 0B       		.uleb128 0xb
 2654 0048 49       		.uleb128 0x49
 2655 0049 13       		.uleb128 0x13
 2656 004a 3A       		.uleb128 0x3a
 2657 004b 0B       		.uleb128 0xb
 2658 004c 3B       		.uleb128 0x3b
 2659 004d 0B       		.uleb128 0xb
 2660 004e 01       		.uleb128 0x1
 2661 004f 13       		.uleb128 0x13
 2662 0050 00       		.byte	0
 2663 0051 00       		.byte	0
 2664 0052 07       		.uleb128 0x7
 2665 0053 28       		.uleb128 0x28
 2666 0054 00       		.byte	0
 2667 0055 03       		.uleb128 0x3
 2668 0056 0E       		.uleb128 0xe
 2669 0057 1C       		.uleb128 0x1c
 2670 0058 0B       		.uleb128 0xb
 2671 0059 00       		.byte	0
 2672 005a 00       		.byte	0
 2673 005b 08       		.uleb128 0x8
 2674 005c 28       		.uleb128 0x28
 2675 005d 00       		.byte	0
 2676 005e 03       		.uleb128 0x3
 2677 005f 0E       		.uleb128 0xe
 2678 0060 1C       		.uleb128 0x1c
 2679 0061 0D       		.uleb128 0xd
 2680 0062 00       		.byte	0
 2681 0063 00       		.byte	0
 2682 0064 09       		.uleb128 0x9
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 78


 2683 0065 01       		.uleb128 0x1
 2684 0066 01       		.byte	0x1
 2685 0067 49       		.uleb128 0x49
 2686 0068 13       		.uleb128 0x13
 2687 0069 01       		.uleb128 0x1
 2688 006a 13       		.uleb128 0x13
 2689 006b 00       		.byte	0
 2690 006c 00       		.byte	0
 2691 006d 0A       		.uleb128 0xa
 2692 006e 21       		.uleb128 0x21
 2693 006f 00       		.byte	0
 2694 0070 00       		.byte	0
 2695 0071 00       		.byte	0
 2696 0072 0B       		.uleb128 0xb
 2697 0073 13       		.uleb128 0x13
 2698 0074 01       		.byte	0x1
 2699 0075 0B       		.uleb128 0xb
 2700 0076 0B       		.uleb128 0xb
 2701 0077 3A       		.uleb128 0x3a
 2702 0078 0B       		.uleb128 0xb
 2703 0079 3B       		.uleb128 0x3b
 2704 007a 0B       		.uleb128 0xb
 2705 007b 01       		.uleb128 0x1
 2706 007c 13       		.uleb128 0x13
 2707 007d 00       		.byte	0
 2708 007e 00       		.byte	0
 2709 007f 0C       		.uleb128 0xc
 2710 0080 0D       		.uleb128 0xd
 2711 0081 00       		.byte	0
 2712 0082 03       		.uleb128 0x3
 2713 0083 0E       		.uleb128 0xe
 2714 0084 3A       		.uleb128 0x3a
 2715 0085 0B       		.uleb128 0xb
 2716 0086 3B       		.uleb128 0x3b
 2717 0087 0B       		.uleb128 0xb
 2718 0088 49       		.uleb128 0x49
 2719 0089 13       		.uleb128 0x13
 2720 008a 38       		.uleb128 0x38
 2721 008b 0B       		.uleb128 0xb
 2722 008c 00       		.byte	0
 2723 008d 00       		.byte	0
 2724 008e 0D       		.uleb128 0xd
 2725 008f 0F       		.uleb128 0xf
 2726 0090 00       		.byte	0
 2727 0091 0B       		.uleb128 0xb
 2728 0092 0B       		.uleb128 0xb
 2729 0093 49       		.uleb128 0x49
 2730 0094 13       		.uleb128 0x13
 2731 0095 00       		.byte	0
 2732 0096 00       		.byte	0
 2733 0097 0E       		.uleb128 0xe
 2734 0098 15       		.uleb128 0x15
 2735 0099 01       		.byte	0x1
 2736 009a 27       		.uleb128 0x27
 2737 009b 19       		.uleb128 0x19
 2738 009c 49       		.uleb128 0x49
 2739 009d 13       		.uleb128 0x13
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 79


 2740 009e 01       		.uleb128 0x1
 2741 009f 13       		.uleb128 0x13
 2742 00a0 00       		.byte	0
 2743 00a1 00       		.byte	0
 2744 00a2 0F       		.uleb128 0xf
 2745 00a3 05       		.uleb128 0x5
 2746 00a4 00       		.byte	0
 2747 00a5 49       		.uleb128 0x49
 2748 00a6 13       		.uleb128 0x13
 2749 00a7 00       		.byte	0
 2750 00a8 00       		.byte	0
 2751 00a9 10       		.uleb128 0x10
 2752 00aa 26       		.uleb128 0x26
 2753 00ab 00       		.byte	0
 2754 00ac 49       		.uleb128 0x49
 2755 00ad 13       		.uleb128 0x13
 2756 00ae 00       		.byte	0
 2757 00af 00       		.byte	0
 2758 00b0 11       		.uleb128 0x11
 2759 00b1 13       		.uleb128 0x13
 2760 00b2 01       		.byte	0x1
 2761 00b3 03       		.uleb128 0x3
 2762 00b4 0E       		.uleb128 0xe
 2763 00b5 0B       		.uleb128 0xb
 2764 00b6 0B       		.uleb128 0xb
 2765 00b7 3A       		.uleb128 0x3a
 2766 00b8 0B       		.uleb128 0xb
 2767 00b9 3B       		.uleb128 0x3b
 2768 00ba 0B       		.uleb128 0xb
 2769 00bb 01       		.uleb128 0x1
 2770 00bc 13       		.uleb128 0x13
 2771 00bd 00       		.byte	0
 2772 00be 00       		.byte	0
 2773 00bf 12       		.uleb128 0x12
 2774 00c0 0D       		.uleb128 0xd
 2775 00c1 00       		.byte	0
 2776 00c2 03       		.uleb128 0x3
 2777 00c3 08       		.uleb128 0x8
 2778 00c4 3A       		.uleb128 0x3a
 2779 00c5 0B       		.uleb128 0xb
 2780 00c6 3B       		.uleb128 0x3b
 2781 00c7 0B       		.uleb128 0xb
 2782 00c8 49       		.uleb128 0x49
 2783 00c9 13       		.uleb128 0x13
 2784 00ca 38       		.uleb128 0x38
 2785 00cb 0B       		.uleb128 0xb
 2786 00cc 00       		.byte	0
 2787 00cd 00       		.byte	0
 2788 00ce 13       		.uleb128 0x13
 2789 00cf 2E       		.uleb128 0x2e
 2790 00d0 01       		.byte	0x1
 2791 00d1 3F       		.uleb128 0x3f
 2792 00d2 19       		.uleb128 0x19
 2793 00d3 03       		.uleb128 0x3
 2794 00d4 0E       		.uleb128 0xe
 2795 00d5 3A       		.uleb128 0x3a
 2796 00d6 0B       		.uleb128 0xb
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 80


 2797 00d7 3B       		.uleb128 0x3b
 2798 00d8 05       		.uleb128 0x5
 2799 00d9 27       		.uleb128 0x27
 2800 00da 19       		.uleb128 0x19
 2801 00db 49       		.uleb128 0x49
 2802 00dc 13       		.uleb128 0x13
 2803 00dd 20       		.uleb128 0x20
 2804 00de 0B       		.uleb128 0xb
 2805 00df 01       		.uleb128 0x1
 2806 00e0 13       		.uleb128 0x13
 2807 00e1 00       		.byte	0
 2808 00e2 00       		.byte	0
 2809 00e3 14       		.uleb128 0x14
 2810 00e4 05       		.uleb128 0x5
 2811 00e5 00       		.byte	0
 2812 00e6 03       		.uleb128 0x3
 2813 00e7 0E       		.uleb128 0xe
 2814 00e8 3A       		.uleb128 0x3a
 2815 00e9 0B       		.uleb128 0xb
 2816 00ea 3B       		.uleb128 0x3b
 2817 00eb 05       		.uleb128 0x5
 2818 00ec 49       		.uleb128 0x49
 2819 00ed 13       		.uleb128 0x13
 2820 00ee 00       		.byte	0
 2821 00ef 00       		.byte	0
 2822 00f0 15       		.uleb128 0x15
 2823 00f1 34       		.uleb128 0x34
 2824 00f2 00       		.byte	0
 2825 00f3 03       		.uleb128 0x3
 2826 00f4 08       		.uleb128 0x8
 2827 00f5 3A       		.uleb128 0x3a
 2828 00f6 0B       		.uleb128 0xb
 2829 00f7 3B       		.uleb128 0x3b
 2830 00f8 05       		.uleb128 0x5
 2831 00f9 49       		.uleb128 0x49
 2832 00fa 13       		.uleb128 0x13
 2833 00fb 00       		.byte	0
 2834 00fc 00       		.byte	0
 2835 00fd 16       		.uleb128 0x16
 2836 00fe 34       		.uleb128 0x34
 2837 00ff 00       		.byte	0
 2838 0100 03       		.uleb128 0x3
 2839 0101 0E       		.uleb128 0xe
 2840 0102 3A       		.uleb128 0x3a
 2841 0103 0B       		.uleb128 0xb
 2842 0104 3B       		.uleb128 0x3b
 2843 0105 05       		.uleb128 0x5
 2844 0106 49       		.uleb128 0x49
 2845 0107 13       		.uleb128 0x13
 2846 0108 00       		.byte	0
 2847 0109 00       		.byte	0
 2848 010a 17       		.uleb128 0x17
 2849 010b 0B       		.uleb128 0xb
 2850 010c 01       		.byte	0x1
 2851 010d 00       		.byte	0
 2852 010e 00       		.byte	0
 2853 010f 18       		.uleb128 0x18
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 81


 2854 0110 2E       		.uleb128 0x2e
 2855 0111 01       		.byte	0x1
 2856 0112 3F       		.uleb128 0x3f
 2857 0113 19       		.uleb128 0x19
 2858 0114 03       		.uleb128 0x3
 2859 0115 0E       		.uleb128 0xe
 2860 0116 3A       		.uleb128 0x3a
 2861 0117 0B       		.uleb128 0xb
 2862 0118 3B       		.uleb128 0x3b
 2863 0119 0B       		.uleb128 0xb
 2864 011a 27       		.uleb128 0x27
 2865 011b 19       		.uleb128 0x19
 2866 011c 49       		.uleb128 0x49
 2867 011d 13       		.uleb128 0x13
 2868 011e 20       		.uleb128 0x20
 2869 011f 0B       		.uleb128 0xb
 2870 0120 01       		.uleb128 0x1
 2871 0121 13       		.uleb128 0x13
 2872 0122 00       		.byte	0
 2873 0123 00       		.byte	0
 2874 0124 19       		.uleb128 0x19
 2875 0125 05       		.uleb128 0x5
 2876 0126 00       		.byte	0
 2877 0127 03       		.uleb128 0x3
 2878 0128 0E       		.uleb128 0xe
 2879 0129 3A       		.uleb128 0x3a
 2880 012a 0B       		.uleb128 0xb
 2881 012b 3B       		.uleb128 0x3b
 2882 012c 0B       		.uleb128 0xb
 2883 012d 49       		.uleb128 0x49
 2884 012e 13       		.uleb128 0x13
 2885 012f 00       		.byte	0
 2886 0130 00       		.byte	0
 2887 0131 1A       		.uleb128 0x1a
 2888 0132 34       		.uleb128 0x34
 2889 0133 00       		.byte	0
 2890 0134 03       		.uleb128 0x3
 2891 0135 0E       		.uleb128 0xe
 2892 0136 3A       		.uleb128 0x3a
 2893 0137 0B       		.uleb128 0xb
 2894 0138 3B       		.uleb128 0x3b
 2895 0139 0B       		.uleb128 0xb
 2896 013a 49       		.uleb128 0x49
 2897 013b 13       		.uleb128 0x13
 2898 013c 00       		.byte	0
 2899 013d 00       		.byte	0
 2900 013e 1B       		.uleb128 0x1b
 2901 013f 2E       		.uleb128 0x2e
 2902 0140 01       		.byte	0x1
 2903 0141 3F       		.uleb128 0x3f
 2904 0142 19       		.uleb128 0x19
 2905 0143 03       		.uleb128 0x3
 2906 0144 0E       		.uleb128 0xe
 2907 0145 3A       		.uleb128 0x3a
 2908 0146 0B       		.uleb128 0xb
 2909 0147 3B       		.uleb128 0x3b
 2910 0148 0B       		.uleb128 0xb
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 82


 2911 0149 27       		.uleb128 0x27
 2912 014a 19       		.uleb128 0x19
 2913 014b 11       		.uleb128 0x11
 2914 014c 01       		.uleb128 0x1
 2915 014d 12       		.uleb128 0x12
 2916 014e 06       		.uleb128 0x6
 2917 014f 40       		.uleb128 0x40
 2918 0150 18       		.uleb128 0x18
 2919 0151 9742     		.uleb128 0x2117
 2920 0153 19       		.uleb128 0x19
 2921 0154 01       		.uleb128 0x1
 2922 0155 13       		.uleb128 0x13
 2923 0156 00       		.byte	0
 2924 0157 00       		.byte	0
 2925 0158 1C       		.uleb128 0x1c
 2926 0159 05       		.uleb128 0x5
 2927 015a 00       		.byte	0
 2928 015b 03       		.uleb128 0x3
 2929 015c 08       		.uleb128 0x8
 2930 015d 3A       		.uleb128 0x3a
 2931 015e 0B       		.uleb128 0xb
 2932 015f 3B       		.uleb128 0x3b
 2933 0160 0B       		.uleb128 0xb
 2934 0161 49       		.uleb128 0x49
 2935 0162 13       		.uleb128 0x13
 2936 0163 02       		.uleb128 0x2
 2937 0164 17       		.uleb128 0x17
 2938 0165 00       		.byte	0
 2939 0166 00       		.byte	0
 2940 0167 1D       		.uleb128 0x1d
 2941 0168 1D       		.uleb128 0x1d
 2942 0169 01       		.byte	0x1
 2943 016a 31       		.uleb128 0x31
 2944 016b 13       		.uleb128 0x13
 2945 016c 11       		.uleb128 0x11
 2946 016d 01       		.uleb128 0x1
 2947 016e 12       		.uleb128 0x12
 2948 016f 06       		.uleb128 0x6
 2949 0170 58       		.uleb128 0x58
 2950 0171 0B       		.uleb128 0xb
 2951 0172 59       		.uleb128 0x59
 2952 0173 0B       		.uleb128 0xb
 2953 0174 01       		.uleb128 0x1
 2954 0175 13       		.uleb128 0x13
 2955 0176 00       		.byte	0
 2956 0177 00       		.byte	0
 2957 0178 1E       		.uleb128 0x1e
 2958 0179 05       		.uleb128 0x5
 2959 017a 00       		.byte	0
 2960 017b 31       		.uleb128 0x31
 2961 017c 13       		.uleb128 0x13
 2962 017d 00       		.byte	0
 2963 017e 00       		.byte	0
 2964 017f 1F       		.uleb128 0x1f
 2965 0180 0B       		.uleb128 0xb
 2966 0181 01       		.byte	0x1
 2967 0182 11       		.uleb128 0x11
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 83


 2968 0183 01       		.uleb128 0x1
 2969 0184 12       		.uleb128 0x12
 2970 0185 06       		.uleb128 0x6
 2971 0186 00       		.byte	0
 2972 0187 00       		.byte	0
 2973 0188 20       		.uleb128 0x20
 2974 0189 34       		.uleb128 0x34
 2975 018a 00       		.byte	0
 2976 018b 31       		.uleb128 0x31
 2977 018c 13       		.uleb128 0x13
 2978 018d 02       		.uleb128 0x2
 2979 018e 17       		.uleb128 0x17
 2980 018f 00       		.byte	0
 2981 0190 00       		.byte	0
 2982 0191 21       		.uleb128 0x21
 2983 0192 34       		.uleb128 0x34
 2984 0193 00       		.byte	0
 2985 0194 31       		.uleb128 0x31
 2986 0195 13       		.uleb128 0x13
 2987 0196 02       		.uleb128 0x2
 2988 0197 18       		.uleb128 0x18
 2989 0198 00       		.byte	0
 2990 0199 00       		.byte	0
 2991 019a 22       		.uleb128 0x22
 2992 019b 1D       		.uleb128 0x1d
 2993 019c 01       		.byte	0x1
 2994 019d 31       		.uleb128 0x31
 2995 019e 13       		.uleb128 0x13
 2996 019f 11       		.uleb128 0x11
 2997 01a0 01       		.uleb128 0x1
 2998 01a1 12       		.uleb128 0x12
 2999 01a2 06       		.uleb128 0x6
 3000 01a3 58       		.uleb128 0x58
 3001 01a4 0B       		.uleb128 0xb
 3002 01a5 59       		.uleb128 0x59
 3003 01a6 05       		.uleb128 0x5
 3004 01a7 01       		.uleb128 0x1
 3005 01a8 13       		.uleb128 0x13
 3006 01a9 00       		.byte	0
 3007 01aa 00       		.byte	0
 3008 01ab 23       		.uleb128 0x23
 3009 01ac 05       		.uleb128 0x5
 3010 01ad 00       		.byte	0
 3011 01ae 31       		.uleb128 0x31
 3012 01af 13       		.uleb128 0x13
 3013 01b0 02       		.uleb128 0x2
 3014 01b1 18       		.uleb128 0x18
 3015 01b2 00       		.byte	0
 3016 01b3 00       		.byte	0
 3017 01b4 24       		.uleb128 0x24
 3018 01b5 898201   		.uleb128 0x4109
 3019 01b8 00       		.byte	0
 3020 01b9 11       		.uleb128 0x11
 3021 01ba 01       		.uleb128 0x1
 3022 01bb 31       		.uleb128 0x31
 3023 01bc 13       		.uleb128 0x13
 3024 01bd 00       		.byte	0
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 84


 3025 01be 00       		.byte	0
 3026 01bf 25       		.uleb128 0x25
 3027 01c0 05       		.uleb128 0x5
 3028 01c1 00       		.byte	0
 3029 01c2 31       		.uleb128 0x31
 3030 01c3 13       		.uleb128 0x13
 3031 01c4 02       		.uleb128 0x2
 3032 01c5 17       		.uleb128 0x17
 3033 01c6 00       		.byte	0
 3034 01c7 00       		.byte	0
 3035 01c8 26       		.uleb128 0x26
 3036 01c9 898201   		.uleb128 0x4109
 3037 01cc 01       		.byte	0x1
 3038 01cd 11       		.uleb128 0x11
 3039 01ce 01       		.uleb128 0x1
 3040 01cf 00       		.byte	0
 3041 01d0 00       		.byte	0
 3042 01d1 27       		.uleb128 0x27
 3043 01d2 8A8201   		.uleb128 0x410a
 3044 01d5 00       		.byte	0
 3045 01d6 02       		.uleb128 0x2
 3046 01d7 18       		.uleb128 0x18
 3047 01d8 9142     		.uleb128 0x2111
 3048 01da 18       		.uleb128 0x18
 3049 01db 00       		.byte	0
 3050 01dc 00       		.byte	0
 3051 01dd 28       		.uleb128 0x28
 3052 01de 898201   		.uleb128 0x4109
 3053 01e1 01       		.byte	0x1
 3054 01e2 11       		.uleb128 0x11
 3055 01e3 01       		.uleb128 0x1
 3056 01e4 31       		.uleb128 0x31
 3057 01e5 13       		.uleb128 0x13
 3058 01e6 00       		.byte	0
 3059 01e7 00       		.byte	0
 3060 01e8 29       		.uleb128 0x29
 3061 01e9 34       		.uleb128 0x34
 3062 01ea 00       		.byte	0
 3063 01eb 03       		.uleb128 0x3
 3064 01ec 0E       		.uleb128 0xe
 3065 01ed 3A       		.uleb128 0x3a
 3066 01ee 0B       		.uleb128 0xb
 3067 01ef 3B       		.uleb128 0x3b
 3068 01f0 0B       		.uleb128 0xb
 3069 01f1 49       		.uleb128 0x49
 3070 01f2 13       		.uleb128 0x13
 3071 01f3 02       		.uleb128 0x2
 3072 01f4 17       		.uleb128 0x17
 3073 01f5 00       		.byte	0
 3074 01f6 00       		.byte	0
 3075 01f7 2A       		.uleb128 0x2a
 3076 01f8 34       		.uleb128 0x34
 3077 01f9 00       		.byte	0
 3078 01fa 03       		.uleb128 0x3
 3079 01fb 0E       		.uleb128 0xe
 3080 01fc 3A       		.uleb128 0x3a
 3081 01fd 0B       		.uleb128 0xb
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 85


 3082 01fe 3B       		.uleb128 0x3b
 3083 01ff 0B       		.uleb128 0xb
 3084 0200 49       		.uleb128 0x49
 3085 0201 13       		.uleb128 0x13
 3086 0202 02       		.uleb128 0x2
 3087 0203 18       		.uleb128 0x18
 3088 0204 00       		.byte	0
 3089 0205 00       		.byte	0
 3090 0206 2B       		.uleb128 0x2b
 3091 0207 2E       		.uleb128 0x2e
 3092 0208 01       		.byte	0x1
 3093 0209 3F       		.uleb128 0x3f
 3094 020a 19       		.uleb128 0x19
 3095 020b 03       		.uleb128 0x3
 3096 020c 0E       		.uleb128 0xe
 3097 020d 3A       		.uleb128 0x3a
 3098 020e 0B       		.uleb128 0xb
 3099 020f 3B       		.uleb128 0x3b
 3100 0210 0B       		.uleb128 0xb
 3101 0211 27       		.uleb128 0x27
 3102 0212 19       		.uleb128 0x19
 3103 0213 11       		.uleb128 0x11
 3104 0214 01       		.uleb128 0x1
 3105 0215 12       		.uleb128 0x12
 3106 0216 06       		.uleb128 0x6
 3107 0217 40       		.uleb128 0x40
 3108 0218 18       		.uleb128 0x18
 3109 0219 9642     		.uleb128 0x2116
 3110 021b 19       		.uleb128 0x19
 3111 021c 01       		.uleb128 0x1
 3112 021d 13       		.uleb128 0x13
 3113 021e 00       		.byte	0
 3114 021f 00       		.byte	0
 3115 0220 2C       		.uleb128 0x2c
 3116 0221 34       		.uleb128 0x34
 3117 0222 00       		.byte	0
 3118 0223 31       		.uleb128 0x31
 3119 0224 13       		.uleb128 0x13
 3120 0225 1C       		.uleb128 0x1c
 3121 0226 0B       		.uleb128 0xb
 3122 0227 00       		.byte	0
 3123 0228 00       		.byte	0
 3124 0229 2D       		.uleb128 0x2d
 3125 022a 34       		.uleb128 0x34
 3126 022b 00       		.byte	0
 3127 022c 03       		.uleb128 0x3
 3128 022d 0E       		.uleb128 0xe
 3129 022e 3A       		.uleb128 0x3a
 3130 022f 0B       		.uleb128 0xb
 3131 0230 3B       		.uleb128 0x3b
 3132 0231 0B       		.uleb128 0xb
 3133 0232 49       		.uleb128 0x49
 3134 0233 13       		.uleb128 0x13
 3135 0234 3F       		.uleb128 0x3f
 3136 0235 19       		.uleb128 0x19
 3137 0236 3C       		.uleb128 0x3c
 3138 0237 19       		.uleb128 0x19
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 86


 3139 0238 00       		.byte	0
 3140 0239 00       		.byte	0
 3141 023a 2E       		.uleb128 0x2e
 3142 023b 34       		.uleb128 0x34
 3143 023c 00       		.byte	0
 3144 023d 03       		.uleb128 0x3
 3145 023e 0E       		.uleb128 0xe
 3146 023f 3A       		.uleb128 0x3a
 3147 0240 0B       		.uleb128 0xb
 3148 0241 3B       		.uleb128 0x3b
 3149 0242 05       		.uleb128 0x5
 3150 0243 49       		.uleb128 0x49
 3151 0244 13       		.uleb128 0x13
 3152 0245 3F       		.uleb128 0x3f
 3153 0246 19       		.uleb128 0x19
 3154 0247 3C       		.uleb128 0x3c
 3155 0248 19       		.uleb128 0x19
 3156 0249 00       		.byte	0
 3157 024a 00       		.byte	0
 3158 024b 2F       		.uleb128 0x2f
 3159 024c 35       		.uleb128 0x35
 3160 024d 00       		.byte	0
 3161 024e 49       		.uleb128 0x49
 3162 024f 13       		.uleb128 0x13
 3163 0250 00       		.byte	0
 3164 0251 00       		.byte	0
 3165 0252 30       		.uleb128 0x30
 3166 0253 2E       		.uleb128 0x2e
 3167 0254 00       		.byte	0
 3168 0255 3F       		.uleb128 0x3f
 3169 0256 19       		.uleb128 0x19
 3170 0257 3C       		.uleb128 0x3c
 3171 0258 19       		.uleb128 0x19
 3172 0259 6E       		.uleb128 0x6e
 3173 025a 0E       		.uleb128 0xe
 3174 025b 03       		.uleb128 0x3
 3175 025c 0E       		.uleb128 0xe
 3176 025d 3A       		.uleb128 0x3a
 3177 025e 0B       		.uleb128 0xb
 3178 025f 3B       		.uleb128 0x3b
 3179 0260 05       		.uleb128 0x5
 3180 0261 00       		.byte	0
 3181 0262 00       		.byte	0
 3182 0263 31       		.uleb128 0x31
 3183 0264 2E       		.uleb128 0x2e
 3184 0265 00       		.byte	0
 3185 0266 3F       		.uleb128 0x3f
 3186 0267 19       		.uleb128 0x19
 3187 0268 3C       		.uleb128 0x3c
 3188 0269 19       		.uleb128 0x19
 3189 026a 6E       		.uleb128 0x6e
 3190 026b 0E       		.uleb128 0xe
 3191 026c 03       		.uleb128 0x3
 3192 026d 0E       		.uleb128 0xe
 3193 026e 3A       		.uleb128 0x3a
 3194 026f 0B       		.uleb128 0xb
 3195 0270 3B       		.uleb128 0x3b
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 87


 3196 0271 0B       		.uleb128 0xb
 3197 0272 00       		.byte	0
 3198 0273 00       		.byte	0
 3199 0274 00       		.byte	0
 3200              		.section	.debug_loc,"",%progbits
 3201              	.Ldebug_loc0:
 3202              	.LLST0:
 3203 0000 00000000 		.4byte	.LVL0
 3204 0004 04000000 		.4byte	.LVL1
 3205 0008 0100     		.2byte	0x1
 3206 000a 50       		.byte	0x50
 3207 000b 04000000 		.4byte	.LVL1
 3208 000f 94000000 		.4byte	.LFE180
 3209 0013 0200     		.2byte	0x2
 3210 0015 30       		.byte	0x30
 3211 0016 9F       		.byte	0x9f
 3212 0017 00000000 		.4byte	0
 3213 001b 00000000 		.4byte	0
 3214              	.LLST1:
 3215 001f 04000000 		.4byte	.LVL1
 3216 0023 1C000000 		.4byte	.LVL2
 3217 0027 0200     		.2byte	0x2
 3218 0029 30       		.byte	0x30
 3219 002a 9F       		.byte	0x9f
 3220 002b 1C000000 		.4byte	.LVL2
 3221 002f 3E000000 		.4byte	.LVL6
 3222 0033 0100     		.2byte	0x1
 3223 0035 50       		.byte	0x50
 3224 0036 4C000000 		.4byte	.LVL9
 3225 003a 4E000000 		.4byte	.LVL10
 3226 003e 0100     		.2byte	0x1
 3227 0040 50       		.byte	0x50
 3228 0041 5A000000 		.4byte	.LVL11
 3229 0045 6C000000 		.4byte	.LVL14
 3230 0049 0100     		.2byte	0x1
 3231 004b 50       		.byte	0x50
 3232 004c 7A000000 		.4byte	.LVL17
 3233 0050 7C000000 		.4byte	.LVL18
 3234 0054 0100     		.2byte	0x1
 3235 0056 50       		.byte	0x50
 3236 0057 00000000 		.4byte	0
 3237 005b 00000000 		.4byte	0
 3238              	.LLST2:
 3239 005f 26000000 		.4byte	.LVL4
 3240 0063 5A000000 		.4byte	.LVL11
 3241 0067 0200     		.2byte	0x2
 3242 0069 30       		.byte	0x30
 3243 006a 9F       		.byte	0x9f
 3244 006b 00000000 		.4byte	0
 3245 006f 00000000 		.4byte	0
 3246              	.LLST3:
 3247 0073 26000000 		.4byte	.LVL4
 3248 0077 3E000000 		.4byte	.LVL6
 3249 007b 0200     		.2byte	0x2
 3250 007d 30       		.byte	0x30
 3251 007e 9F       		.byte	0x9f
 3252 007f 3E000000 		.4byte	.LVL6
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 88


 3253 0083 4C000000 		.4byte	.LVL9
 3254 0087 0100     		.2byte	0x1
 3255 0089 54       		.byte	0x54
 3256 008a 4C000000 		.4byte	.LVL9
 3257 008e 4E000000 		.4byte	.LVL10
 3258 0092 0200     		.2byte	0x2
 3259 0094 30       		.byte	0x30
 3260 0095 9F       		.byte	0x9f
 3261 0096 4E000000 		.4byte	.LVL10
 3262 009a 5A000000 		.4byte	.LVL11
 3263 009e 0100     		.2byte	0x1
 3264 00a0 54       		.byte	0x54
 3265 00a1 00000000 		.4byte	0
 3266 00a5 00000000 		.4byte	0
 3267              	.LLST4:
 3268 00a9 36000000 		.4byte	.LVL5
 3269 00ad 5A000000 		.4byte	.LVL11
 3270 00b1 0100     		.2byte	0x1
 3271 00b3 55       		.byte	0x55
 3272 00b4 00000000 		.4byte	0
 3273 00b8 00000000 		.4byte	0
 3274              	.LLST5:
 3275 00bc 3E000000 		.4byte	.LVL6
 3276 00c0 47000000 		.4byte	.LVL7-1
 3277 00c4 0700     		.2byte	0x7
 3278 00c6 74       		.byte	0x74
 3279 00c7 00       		.sleb128 0
 3280 00c8 32       		.byte	0x32
 3281 00c9 24       		.byte	0x24
 3282 00ca 75       		.byte	0x75
 3283 00cb 00       		.sleb128 0
 3284 00cc 22       		.byte	0x22
 3285 00cd 00000000 		.4byte	0
 3286 00d1 00000000 		.4byte	0
 3287              	.LLST6:
 3288 00d5 5A000000 		.4byte	.LVL11
 3289 00d9 86000000 		.4byte	.LVL19
 3290 00dd 0200     		.2byte	0x2
 3291 00df 33       		.byte	0x33
 3292 00e0 9F       		.byte	0x9f
 3293 00e1 00000000 		.4byte	0
 3294 00e5 00000000 		.4byte	0
 3295              	.LLST7:
 3296 00e9 60000000 		.4byte	.LVL12
 3297 00ed 6C000000 		.4byte	.LVL14
 3298 00f1 0200     		.2byte	0x2
 3299 00f3 30       		.byte	0x30
 3300 00f4 9F       		.byte	0x9f
 3301 00f5 6C000000 		.4byte	.LVL14
 3302 00f9 7A000000 		.4byte	.LVL17
 3303 00fd 0100     		.2byte	0x1
 3304 00ff 54       		.byte	0x54
 3305 0100 7A000000 		.4byte	.LVL17
 3306 0104 7C000000 		.4byte	.LVL18
 3307 0108 0200     		.2byte	0x2
 3308 010a 30       		.byte	0x30
 3309 010b 9F       		.byte	0x9f
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 89


 3310 010c 7C000000 		.4byte	.LVL18
 3311 0110 86000000 		.4byte	.LVL19
 3312 0114 0100     		.2byte	0x1
 3313 0116 54       		.byte	0x54
 3314 0117 00000000 		.4byte	0
 3315 011b 00000000 		.4byte	0
 3316              	.LLST8:
 3317 011f 64000000 		.4byte	.LVL13
 3318 0123 86000000 		.4byte	.LVL19
 3319 0127 0100     		.2byte	0x1
 3320 0129 55       		.byte	0x55
 3321 012a 00000000 		.4byte	0
 3322 012e 00000000 		.4byte	0
 3323              	.LLST9:
 3324 0132 6C000000 		.4byte	.LVL14
 3325 0136 75000000 		.4byte	.LVL15-1
 3326 013a 0700     		.2byte	0x7
 3327 013c 74       		.byte	0x74
 3328 013d 00       		.sleb128 0
 3329 013e 32       		.byte	0x32
 3330 013f 24       		.byte	0x24
 3331 0140 75       		.byte	0x75
 3332 0141 00       		.sleb128 0
 3333 0142 22       		.byte	0x22
 3334 0143 00000000 		.4byte	0
 3335 0147 00000000 		.4byte	0
 3336              	.LLST10:
 3337 014b 00000000 		.4byte	.LVL21
 3338 014f 4C000000 		.4byte	.LVL31
 3339 0153 0100     		.2byte	0x1
 3340 0155 50       		.byte	0x50
 3341 0156 4C000000 		.4byte	.LVL31
 3342 015a 5A000000 		.4byte	.LVL34
 3343 015e 0400     		.2byte	0x4
 3344 0160 F3       		.byte	0xf3
 3345 0161 01       		.uleb128 0x1
 3346 0162 50       		.byte	0x50
 3347 0163 9F       		.byte	0x9f
 3348 0164 5A000000 		.4byte	.LVL34
 3349 0168 5C000000 		.4byte	.LVL35
 3350 016c 0100     		.2byte	0x1
 3351 016e 50       		.byte	0x50
 3352 016f 5C000000 		.4byte	.LVL35
 3353 0173 70000000 		.4byte	.LVL38
 3354 0177 0400     		.2byte	0x4
 3355 0179 F3       		.byte	0xf3
 3356 017a 01       		.uleb128 0x1
 3357 017b 50       		.byte	0x50
 3358 017c 9F       		.byte	0x9f
 3359 017d 70000000 		.4byte	.LVL38
 3360 0181 7C000000 		.4byte	.LFE181
 3361 0185 0100     		.2byte	0x1
 3362 0187 50       		.byte	0x50
 3363 0188 00000000 		.4byte	0
 3364 018c 00000000 		.4byte	0
 3365              	.LLST11:
 3366 0190 38000000 		.4byte	.LVL28
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 90


 3367 0194 3C000000 		.4byte	.LVL29
 3368 0198 0100     		.2byte	0x1
 3369 019a 51       		.byte	0x51
 3370 019b 00000000 		.4byte	0
 3371 019f 00000000 		.4byte	0
 3372              	.LLST12:
 3373 01a3 34000000 		.4byte	.LVL27
 3374 01a7 70000000 		.4byte	.LVL38
 3375 01ab 0200     		.2byte	0x2
 3376 01ad 30       		.byte	0x30
 3377 01ae 9F       		.byte	0x9f
 3378 01af 00000000 		.4byte	0
 3379 01b3 00000000 		.4byte	0
 3380              	.LLST13:
 3381 01b7 34000000 		.4byte	.LVL27
 3382 01bb 4C000000 		.4byte	.LVL31
 3383 01bf 0200     		.2byte	0x2
 3384 01c1 30       		.byte	0x30
 3385 01c2 9F       		.byte	0x9f
 3386 01c3 4C000000 		.4byte	.LVL31
 3387 01c7 5A000000 		.4byte	.LVL34
 3388 01cb 0100     		.2byte	0x1
 3389 01cd 54       		.byte	0x54
 3390 01ce 5A000000 		.4byte	.LVL34
 3391 01d2 5C000000 		.4byte	.LVL35
 3392 01d6 0200     		.2byte	0x2
 3393 01d8 30       		.byte	0x30
 3394 01d9 9F       		.byte	0x9f
 3395 01da 5C000000 		.4byte	.LVL35
 3396 01de 66000000 		.4byte	.LVL36
 3397 01e2 0100     		.2byte	0x1
 3398 01e4 54       		.byte	0x54
 3399 01e5 00000000 		.4byte	0
 3400 01e9 00000000 		.4byte	0
 3401              	.LLST14:
 3402 01ed 44000000 		.4byte	.LVL30
 3403 01f1 66000000 		.4byte	.LVL36
 3404 01f5 0100     		.2byte	0x1
 3405 01f7 55       		.byte	0x55
 3406 01f8 00000000 		.4byte	0
 3407 01fc 00000000 		.4byte	0
 3408              	.LLST15:
 3409 0200 4C000000 		.4byte	.LVL31
 3410 0204 55000000 		.4byte	.LVL32-1
 3411 0208 0700     		.2byte	0x7
 3412 020a 74       		.byte	0x74
 3413 020b 00       		.sleb128 0
 3414 020c 32       		.byte	0x32
 3415 020d 24       		.byte	0x24
 3416 020e 75       		.byte	0x75
 3417 020f 00       		.sleb128 0
 3418 0210 22       		.byte	0x22
 3419 0211 00000000 		.4byte	0
 3420 0215 00000000 		.4byte	0
 3421              	.LLST16:
 3422 0219 00000000 		.4byte	.LVL39
 3423 021d 02000000 		.4byte	.LVL40
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 91


 3424 0221 0100     		.2byte	0x1
 3425 0223 50       		.byte	0x50
 3426 0224 02000000 		.4byte	.LVL40
 3427 0228 70000000 		.4byte	.LFE182
 3428 022c 0200     		.2byte	0x2
 3429 022e 30       		.byte	0x30
 3430 022f 9F       		.byte	0x9f
 3431 0230 00000000 		.4byte	0
 3432 0234 00000000 		.4byte	0
 3433              	.LLST17:
 3434 0238 1C000000 		.4byte	.LVL46
 3435 023c 22000000 		.4byte	.LVL48
 3436 0240 0100     		.2byte	0x1
 3437 0242 51       		.byte	0x51
 3438 0243 00000000 		.4byte	0
 3439 0247 00000000 		.4byte	0
 3440              	.LLST18:
 3441 024b 22000000 		.4byte	.LVL48
 3442 024f 26000000 		.4byte	.LVL49
 3443 0253 0100     		.2byte	0x1
 3444 0255 53       		.byte	0x53
 3445 0256 00000000 		.4byte	0
 3446 025a 00000000 		.4byte	0
 3447              	.LLST19:
 3448 025e 1E000000 		.4byte	.LVL47
 3449 0262 36000000 		.4byte	.LVL51
 3450 0266 0200     		.2byte	0x2
 3451 0268 30       		.byte	0x30
 3452 0269 9F       		.byte	0x9f
 3453 026a 36000000 		.4byte	.LVL51
 3454 026e 44000000 		.4byte	.LVL54
 3455 0272 0100     		.2byte	0x1
 3456 0274 54       		.byte	0x54
 3457 0275 44000000 		.4byte	.LVL54
 3458 0279 46000000 		.4byte	.LVL55
 3459 027d 0200     		.2byte	0x2
 3460 027f 30       		.byte	0x30
 3461 0280 9F       		.byte	0x9f
 3462 0281 46000000 		.4byte	.LVL55
 3463 0285 50000000 		.4byte	.LVL56
 3464 0289 0100     		.2byte	0x1
 3465 028b 54       		.byte	0x54
 3466 028c 00000000 		.4byte	0
 3467 0290 00000000 		.4byte	0
 3468              	.LLST20:
 3469 0294 2E000000 		.4byte	.LVL50
 3470 0298 50000000 		.4byte	.LVL56
 3471 029c 0100     		.2byte	0x1
 3472 029e 55       		.byte	0x55
 3473 029f 00000000 		.4byte	0
 3474 02a3 00000000 		.4byte	0
 3475              	.LLST21:
 3476 02a7 36000000 		.4byte	.LVL51
 3477 02ab 3F000000 		.4byte	.LVL52-1
 3478 02af 0700     		.2byte	0x7
 3479 02b1 74       		.byte	0x74
 3480 02b2 00       		.sleb128 0
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 92


 3481 02b3 32       		.byte	0x32
 3482 02b4 24       		.byte	0x24
 3483 02b5 75       		.byte	0x75
 3484 02b6 00       		.sleb128 0
 3485 02b7 22       		.byte	0x22
 3486 02b8 00000000 		.4byte	0
 3487 02bc 00000000 		.4byte	0
 3488              	.LLST22:
 3489 02c0 56000000 		.4byte	.LVL57
 3490 02c4 66000000 		.4byte	.LVL58
 3491 02c8 0300     		.2byte	0x3
 3492 02ca 09       		.byte	0x9
 3493 02cb FF       		.byte	0xff
 3494 02cc 9F       		.byte	0x9f
 3495 02cd 00000000 		.4byte	0
 3496 02d1 00000000 		.4byte	0
 3497              	.LLST23:
 3498 02d5 00000000 		.4byte	.LVL59
 3499 02d9 3C000000 		.4byte	.LVL70
 3500 02dd 0100     		.2byte	0x1
 3501 02df 50       		.byte	0x50
 3502 02e0 3C000000 		.4byte	.LVL70
 3503 02e4 4A000000 		.4byte	.LVL73
 3504 02e8 0400     		.2byte	0x4
 3505 02ea F3       		.byte	0xf3
 3506 02eb 01       		.uleb128 0x1
 3507 02ec 50       		.byte	0x50
 3508 02ed 9F       		.byte	0x9f
 3509 02ee 4A000000 		.4byte	.LVL73
 3510 02f2 4C000000 		.4byte	.LVL74
 3511 02f6 0100     		.2byte	0x1
 3512 02f8 50       		.byte	0x50
 3513 02f9 4C000000 		.4byte	.LVL74
 3514 02fd 6E000000 		.4byte	.LVL78
 3515 0301 0400     		.2byte	0x4
 3516 0303 F3       		.byte	0xf3
 3517 0304 01       		.uleb128 0x1
 3518 0305 50       		.byte	0x50
 3519 0306 9F       		.byte	0x9f
 3520 0307 6E000000 		.4byte	.LVL78
 3521 030b 78000000 		.4byte	.LFE183
 3522 030f 0100     		.2byte	0x1
 3523 0311 50       		.byte	0x50
 3524 0312 00000000 		.4byte	0
 3525 0316 00000000 		.4byte	0
 3526              	.LLST24:
 3527 031a 1C000000 		.4byte	.LVL64
 3528 031e 1E000000 		.4byte	.LVL65
 3529 0322 0100     		.2byte	0x1
 3530 0324 53       		.byte	0x53
 3531 0325 00000000 		.4byte	0
 3532 0329 00000000 		.4byte	0
 3533              	.LLST25:
 3534 032d 28000000 		.4byte	.LVL67
 3535 0331 2C000000 		.4byte	.LVL68
 3536 0335 0100     		.2byte	0x1
 3537 0337 51       		.byte	0x51
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 93


 3538 0338 00000000 		.4byte	0
 3539 033c 00000000 		.4byte	0
 3540              	.LLST26:
 3541 0340 24000000 		.4byte	.LVL66
 3542 0344 6E000000 		.4byte	.LVL78
 3543 0348 0200     		.2byte	0x2
 3544 034a 30       		.byte	0x30
 3545 034b 9F       		.byte	0x9f
 3546 034c 00000000 		.4byte	0
 3547 0350 00000000 		.4byte	0
 3548              	.LLST27:
 3549 0354 24000000 		.4byte	.LVL66
 3550 0358 3C000000 		.4byte	.LVL70
 3551 035c 0200     		.2byte	0x2
 3552 035e 30       		.byte	0x30
 3553 035f 9F       		.byte	0x9f
 3554 0360 3C000000 		.4byte	.LVL70
 3555 0364 4A000000 		.4byte	.LVL73
 3556 0368 0100     		.2byte	0x1
 3557 036a 54       		.byte	0x54
 3558 036b 4A000000 		.4byte	.LVL73
 3559 036f 4C000000 		.4byte	.LVL74
 3560 0373 0200     		.2byte	0x2
 3561 0375 30       		.byte	0x30
 3562 0376 9F       		.byte	0x9f
 3563 0377 4C000000 		.4byte	.LVL74
 3564 037b 56000000 		.4byte	.LVL75
 3565 037f 0100     		.2byte	0x1
 3566 0381 54       		.byte	0x54
 3567 0382 00000000 		.4byte	0
 3568 0386 00000000 		.4byte	0
 3569              	.LLST28:
 3570 038a 34000000 		.4byte	.LVL69
 3571 038e 56000000 		.4byte	.LVL75
 3572 0392 0100     		.2byte	0x1
 3573 0394 55       		.byte	0x55
 3574 0395 00000000 		.4byte	0
 3575 0399 00000000 		.4byte	0
 3576              	.LLST29:
 3577 039d 3C000000 		.4byte	.LVL70
 3578 03a1 45000000 		.4byte	.LVL71-1
 3579 03a5 0700     		.2byte	0x7
 3580 03a7 74       		.byte	0x74
 3581 03a8 00       		.sleb128 0
 3582 03a9 32       		.byte	0x32
 3583 03aa 24       		.byte	0x24
 3584 03ab 75       		.byte	0x75
 3585 03ac 00       		.sleb128 0
 3586 03ad 22       		.byte	0x22
 3587 03ae 00000000 		.4byte	0
 3588 03b2 00000000 		.4byte	0
 3589              	.LLST30:
 3590 03b6 5C000000 		.4byte	.LVL76
 3591 03ba 6C000000 		.4byte	.LVL77
 3592 03be 0300     		.2byte	0x3
 3593 03c0 09       		.byte	0x9
 3594 03c1 FF       		.byte	0xff
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 94


 3595 03c2 9F       		.byte	0x9f
 3596 03c3 00000000 		.4byte	0
 3597 03c7 00000000 		.4byte	0
 3598              	.LLST31:
 3599 03cb 00000000 		.4byte	.LVL79
 3600 03cf 04000000 		.4byte	.LVL80
 3601 03d3 0100     		.2byte	0x1
 3602 03d5 50       		.byte	0x50
 3603 03d6 04000000 		.4byte	.LVL80
 3604 03da 0A000000 		.4byte	.LFE184
 3605 03de 0400     		.2byte	0x4
 3606 03e0 F3       		.byte	0xf3
 3607 03e1 01       		.uleb128 0x1
 3608 03e2 50       		.byte	0x50
 3609 03e3 9F       		.byte	0x9f
 3610 03e4 00000000 		.4byte	0
 3611 03e8 00000000 		.4byte	0
 3612              		.section	.debug_aranges,"",%progbits
 3613 0000 3C000000 		.4byte	0x3c
 3614 0004 0200     		.2byte	0x2
 3615 0006 00000000 		.4byte	.Ldebug_info0
 3616 000a 04       		.byte	0x4
 3617 000b 00       		.byte	0
 3618 000c 0000     		.2byte	0
 3619 000e 0000     		.2byte	0
 3620 0010 00000000 		.4byte	.LFB180
 3621 0014 94000000 		.4byte	.LFE180-.LFB180
 3622 0018 00000000 		.4byte	.LFB181
 3623 001c 7C000000 		.4byte	.LFE181-.LFB181
 3624 0020 00000000 		.4byte	.LFB182
 3625 0024 70000000 		.4byte	.LFE182-.LFB182
 3626 0028 00000000 		.4byte	.LFB183
 3627 002c 78000000 		.4byte	.LFE183-.LFB183
 3628 0030 00000000 		.4byte	.LFB184
 3629 0034 0A000000 		.4byte	.LFE184-.LFB184
 3630 0038 00000000 		.4byte	0
 3631 003c 00000000 		.4byte	0
 3632              		.section	.debug_ranges,"",%progbits
 3633              	.Ldebug_ranges0:
 3634 0000 00000000 		.4byte	.LFB180
 3635 0004 94000000 		.4byte	.LFE180
 3636 0008 00000000 		.4byte	.LFB181
 3637 000c 7C000000 		.4byte	.LFE181
 3638 0010 00000000 		.4byte	.LFB182
 3639 0014 70000000 		.4byte	.LFE182
 3640 0018 00000000 		.4byte	.LFB183
 3641 001c 78000000 		.4byte	.LFE183
 3642 0020 00000000 		.4byte	.LFB184
 3643 0024 0A000000 		.4byte	.LFE184
 3644 0028 00000000 		.4byte	0
 3645 002c 00000000 		.4byte	0
 3646              		.section	.debug_line,"",%progbits
 3647              	.Ldebug_line0:
 3648 0000 C0040000 		.section	.debug_str,"MS",%progbits,1
 3648      0200AD03 
 3648      00000201 
 3648      FB0E0D00 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 95


 3648      01010101 
 3649              	.LASF41:
 3650 0000 52435F45 		.ascii	"RC_ERROR_TIME_OUT\000"
 3650      52524F52 
 3650      5F54494D 
 3650      455F4F55 
 3650      5400
 3651              	.LASF95:
 3652 0012 656E6769 		.ascii	"engineValue\000"
 3652      6E655661 
 3652      6C756500 
 3653              	.LASF123:
 3654 001e 5254455F 		.ascii	"RTE_SC_SPEED_getAge\000"
 3654      53435F53 
 3654      50454544 
 3654      5F676574 
 3654      41676500 
 3655              	.LASF79:
 3656 0032 7265736F 		.ascii	"resource\000"
 3656      75726365 
 3656      00
 3657              	.LASF107:
 3658 003b 53435F42 		.ascii	"SC_BREAKLIGHT_cfg_s\000"
 3658      5245414B 
 3658      4C494748 
 3658      545F6366 
 3658      675F7300 
 3659              	.LASF108:
 3660 004f 53435F42 		.ascii	"SC_BREAKLIGHT_cfg_t\000"
 3660      5245414B 
 3660      4C494748 
 3660      545F6366 
 3660      675F7400 
 3661              	.LASF18:
 3662 0063 73697A65 		.ascii	"size_t\000"
 3662      5F7400
 3663              	.LASF99:
 3664 006a 53435F45 		.ascii	"SC_ENGINE_cfg_s\000"
 3664      4E47494E 
 3664      455F6366 
 3664      675F7300 
 3665              	.LASF100:
 3666 007a 53435F45 		.ascii	"SC_ENGINE_cfg_t\000"
 3666      4E47494E 
 3666      455F6366 
 3666      675F7400 
 3667              	.LASF113:
 3668 008a 70546173 		.ascii	"pTaskArray\000"
 3668      6B417272 
 3668      617900
 3669              	.LASF59:
 3670 0095 5265736F 		.ascii	"ResourceType\000"
 3670      75726365 
 3670      54797065 
 3670      00
 3671              	.LASF128:
 3672 00a2 47415350 		.ascii	"GASPEDAL_readJoystick_run\000"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 96


 3672      4544414C 
 3672      5F726561 
 3672      644A6F79 
 3672      73746963 
 3673              	.LASF4:
 3674 00bc 5F5F7569 		.ascii	"__uint8_t\000"
 3674      6E74385F 
 3674      7400
 3675              	.LASF56:
 3676 00c6 52435F74 		.ascii	"RC_t\000"
 3676      00
 3677              	.LASF114:
 3678 00cb 7461736B 		.ascii	"task\000"
 3678      00
 3679              	.LASF129:
 3680 00d0 47415350 		.ascii	"GASPEDAL_calcControl_run\000"
 3680      4544414C 
 3680      5F63616C 
 3680      63436F6E 
 3680      74726F6C 
 3681              	.LASF148:
 3682 00e9 45455F6F 		.ascii	"EE_oo_SetEvent\000"
 3682      6F5F5365 
 3682      74457665 
 3682      6E7400
 3683              	.LASF51:
 3684 00f8 52435F45 		.ascii	"RC_ERROR_BAD_DATA\000"
 3684      52524F52 
 3684      5F424144 
 3684      5F444154 
 3684      4100
 3685              	.LASF97:
 3686 010a 53435F45 		.ascii	"SC_ENGINE_driverIn_t\000"
 3686      4E47494E 
 3686      455F6472 
 3686      69766572 
 3686      496E5F74 
 3687              	.LASF146:
 3688 011f 534F5F45 		.ascii	"SO_ENGINE_signal\000"
 3688      4E47494E 
 3688      455F7369 
 3688      676E616C 
 3688      00
 3689              	.LASF124:
 3690 0130 5254455F 		.ascii	"RTE_SC_ENGINE_pushPort\000"
 3690      53435F45 
 3690      4E47494E 
 3690      455F7075 
 3690      7368506F 
 3691              	.LASF118:
 3692 0147 5254455F 		.ascii	"RTE_SC_JOYSTICK_getStatus\000"
 3692      53435F4A 
 3692      4F595354 
 3692      49434B5F 
 3692      67657453 
 3693              	.LASF143:
 3694 0161 49544D5F 		.ascii	"ITM_RxBuffer\000"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 97


 3694      52784275 
 3694      66666572 
 3694      00
 3695              	.LASF91:
 3696 016e 53435F53 		.ascii	"SC_SPEED_cfg_s\000"
 3696      50454544 
 3696      5F636667 
 3696      5F7300
 3697              	.LASF92:
 3698 017d 53435F53 		.ascii	"SC_SPEED_cfg_t\000"
 3698      50454544 
 3698      5F636667 
 3698      5F7400
 3699              	.LASF9:
 3700 018c 6C6F6E67 		.ascii	"long long int\000"
 3700      206C6F6E 
 3700      6720696E 
 3700      7400
 3701              	.LASF0:
 3702 019a 7369676E 		.ascii	"signed char\000"
 3702      65642063 
 3702      68617200 
 3703              	.LASF26:
 3704 01a6 4576656E 		.ascii	"EventMaskType\000"
 3704      744D6173 
 3704      6B547970 
 3704      6500
 3705              	.LASF72:
 3706 01b4 65764F6E 		.ascii	"evOnUpdate\000"
 3706      55706461 
 3706      746500
 3707              	.LASF125:
 3708 01bf 5254455F 		.ascii	"RTE_SC_ENGINE_set\000"
 3708      53435F45 
 3708      4E47494E 
 3708      455F7365 
 3708      7400
 3709              	.LASF115:
 3710 01d1 5254455F 		.ascii	"RTE_SC_JOYSTICK_set\000"
 3710      53435F4A 
 3710      4F595354 
 3710      49434B5F 
 3710      73657400 
 3711              	.LASF103:
 3712 01e5 62726561 		.ascii	"breakLightStatus\000"
 3712      6B4C6967 
 3712      68745374 
 3712      61747573 
 3712      00
 3713              	.LASF137:
 3714 01f6 47415350 		.ascii	"GASPEDAL_HMI_run\000"
 3714      4544414C 
 3714      5F484D49 
 3714      5F72756E 
 3714      00
 3715              	.LASF6:
 3716 0207 6C6F6E67 		.ascii	"long int\000"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 98


 3716      20696E74 
 3716      00
 3717              	.LASF147:
 3718 0210 534F5F42 		.ascii	"SO_BREAKLIGHT_signal\000"
 3718      5245414B 
 3718      4C494748 
 3718      545F7369 
 3718      676E616C 
 3719              	.LASF117:
 3720 0225 5254455F 		.ascii	"RTE_SC_JOYSTICK_pullPort\000"
 3720      53435F4A 
 3720      4F595354 
 3720      49434B5F 
 3720      70756C6C 
 3721              	.LASF2:
 3722 023e 73686F72 		.ascii	"short int\000"
 3722      7420696E 
 3722      7400
 3723              	.LASF42:
 3724 0248 52435F45 		.ascii	"RC_ERROR_OPEN\000"
 3724      52524F52 
 3724      5F4F5045 
 3724      4E00
 3725              	.LASF136:
 3726 0256 6272616B 		.ascii	"brakeLight\000"
 3726      654C6967 
 3726      687400
 3727              	.LASF16:
 3728 0261 646F7562 		.ascii	"double\000"
 3728      6C6500
 3729              	.LASF120:
 3730 0268 5254455F 		.ascii	"RTE_SC_SPEED_set\000"
 3730      53435F53 
 3730      50454544 
 3730      5F736574 
 3730      00
 3731              	.LASF62:
 3732 0279 5254455F 		.ascii	"RTE_SIGNALSTATUS_VALID\000"
 3732      5349474E 
 3732      414C5354 
 3732      41545553 
 3732      5F56414C 
 3733              	.LASF3:
 3734 0290 73686F72 		.ascii	"short unsigned int\000"
 3734      7420756E 
 3734      7369676E 
 3734      65642069 
 3734      6E7400
 3735              	.LASF74:
 3736 02a3 6F6E5570 		.ascii	"onUpdateTaskCount\000"
 3736      64617465 
 3736      5461736B 
 3736      436F756E 
 3736      7400
 3737              	.LASF131:
 3738 02b5 6A6F7973 		.ascii	"joystickSignal\000"
 3738      7469636B 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 99


 3738      5369676E 
 3738      616C00
 3739              	.LASF7:
 3740 02c4 5F5F7569 		.ascii	"__uint32_t\000"
 3740      6E743332 
 3740      5F7400
 3741              	.LASF24:
 3742 02cf 45455F54 		.ascii	"EE_TID\000"
 3742      494400
 3743              	.LASF83:
 3744 02d6 76616C75 		.ascii	"value\000"
 3744      6500
 3745              	.LASF93:
 3746 02dc 53435F53 		.ascii	"SC_SPEED_s\000"
 3746      50454544 
 3746      5F7300
 3747              	.LASF94:
 3748 02e7 53435F53 		.ascii	"SC_SPEED_t\000"
 3748      50454544 
 3748      5F7400
 3749              	.LASF39:
 3750 02f2 52435F45 		.ascii	"RC_ERROR_BUFFER_EMTPY\000"
 3750      52524F52 
 3750      5F425546 
 3750      4645525F 
 3750      454D5450 
 3751              	.LASF11:
 3752 0308 756E7369 		.ascii	"unsigned int\000"
 3752      676E6564 
 3752      20696E74 
 3752      00
 3753              	.LASF144:
 3754 0315 534F5F4A 		.ascii	"SO_JOYSTICK_signal\000"
 3754      4F595354 
 3754      49434B5F 
 3754      7369676E 
 3754      616C00
 3755              	.LASF149:
 3756 0328 57445F41 		.ascii	"WD_Alive\000"
 3756      6C697665 
 3756      00
 3757              	.LASF80:
 3758 0331 53435F4A 		.ascii	"SC_JOYSTICK_cfg_t\000"
 3758      4F595354 
 3758      49434B5F 
 3758      6366675F 
 3758      7400
 3759              	.LASF54:
 3760 0343 52435F45 		.ascii	"RC_ERROR_UNKNOWN\000"
 3760      52524F52 
 3760      5F554E4B 
 3760      4E4F574E 
 3760      00
 3761              	.LASF22:
 3762 0354 45455F55 		.ascii	"EE_UREG\000"
 3762      52454700 
 3763              	.LASF71:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 100


 3764 035c 6F757444 		.ascii	"outDriver\000"
 3764      72697665 
 3764      7200
 3765              	.LASF43:
 3766 0366 52435F45 		.ascii	"RC_ERROR_CHECKSUM\000"
 3766      52524F52 
 3766      5F434845 
 3766      434B5355 
 3766      4D00
 3767              	.LASF8:
 3768 0378 6C6F6E67 		.ascii	"long unsigned int\000"
 3768      20756E73 
 3768      69676E65 
 3768      6420696E 
 3768      7400
 3769              	.LASF32:
 3770 038a 52435F45 		.ascii	"RC_ERROR_NULL\000"
 3770      52524F52 
 3770      5F4E554C 
 3770      4C00
 3771              	.LASF58:
 3772 0398 5254455F 		.ascii	"RTE_event\000"
 3772      6576656E 
 3772      7400
 3773              	.LASF30:
 3774 03a2 52435F53 		.ascii	"RC_SUCCESS\000"
 3774      55434345 
 3774      535300
 3775              	.LASF121:
 3776 03ad 5254455F 		.ascii	"RTE_SC_SPEED_getStatus\000"
 3776      53435F53 
 3776      50454544 
 3776      5F676574 
 3776      53746174 
 3777              	.LASF10:
 3778 03c4 6C6F6E67 		.ascii	"long long unsigned int\000"
 3778      206C6F6E 
 3778      6720756E 
 3778      7369676E 
 3778      65642069 
 3779              	.LASF25:
 3780 03db 5461736B 		.ascii	"TaskType\000"
 3780      54797065 
 3780      00
 3781              	.LASF138:
 3782 03e4 45455F6F 		.ascii	"EE_oo_IRQ_disable_count\000"
 3782      6F5F4952 
 3782      515F6469 
 3782      7361626C 
 3782      655F636F 
 3783              	.LASF38:
 3784 03fc 52435F45 		.ascii	"RC_ERROR_BUFFER_FULL\000"
 3784      52524F52 
 3784      5F425546 
 3784      4645525F 
 3784      46554C4C 
 3785              	.LASF48:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 101


 3786 0411 52435F45 		.ascii	"RC_ERROR_WRITE_FAILS\000"
 3786      52524F52 
 3786      5F575249 
 3786      54455F46 
 3786      41494C53 
 3787              	.LASF60:
 3788 0426 5254455F 		.ascii	"RTE_SIGNALSTATUS_STARTUP\000"
 3788      5349474E 
 3788      414C5354 
 3788      41545553 
 3788      5F535441 
 3789              	.LASF50:
 3790 043f 52435F45 		.ascii	"RC_ERROR_BAD_PARAM\000"
 3790      52524F52 
 3790      5F424144 
 3790      5F504152 
 3790      414D00
 3791              	.LASF49:
 3792 0452 52435F45 		.ascii	"RC_ERROR_NOT_MATCH\000"
 3792      52524F52 
 3792      5F4E4F54 
 3792      5F4D4154 
 3792      434800
 3793              	.LASF98:
 3794 0465 53435F45 		.ascii	"SC_ENGINE_driverOut_t\000"
 3794      4E47494E 
 3794      455F6472 
 3794      69766572 
 3794      4F75745F 
 3795              	.LASF90:
 3796 047b 53435F53 		.ascii	"SC_SPEED_driverOut_t\000"
 3796      50454544 
 3796      5F647269 
 3796      7665724F 
 3796      75745F74 
 3797              	.LASF89:
 3798 0490 53435F53 		.ascii	"SC_SPEED_driverIn_t\000"
 3798      50454544 
 3798      5F647269 
 3798      76657249 
 3798      6E5F7400 
 3799              	.LASF105:
 3800 04a4 53435F42 		.ascii	"SC_BREAKLIGHT_driverIn_t\000"
 3800      5245414B 
 3800      4C494748 
 3800      545F6472 
 3800      69766572 
 3801              	.LASF68:
 3802 04bd 53435F4A 		.ascii	"SC_JOYSTICK_driverIn_t\000"
 3802      4F595354 
 3802      49434B5F 
 3802      64726976 
 3802      6572496E 
 3803              	.LASF67:
 3804 04d4 53435F4A 		.ascii	"SC_JOYSTICK_data_t\000"
 3804      4F595354 
 3804      49434B5F 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 102


 3804      64617461 
 3804      5F7400
 3805              	.LASF27:
 3806 04e7 73697A65 		.ascii	"sizetype\000"
 3806      74797065 
 3806      00
 3807              	.LASF63:
 3808 04f0 5254455F 		.ascii	"RTE_SIGNALSTATUS_INVALID\000"
 3808      5349474E 
 3808      414C5354 
 3808      41545553 
 3808      5F494E56 
 3809              	.LASF29:
 3810 0509 626F6F6C 		.ascii	"boolean_t\000"
 3810      65616E5F 
 3810      7400
 3811              	.LASF139:
 3812 0513 45455F6F 		.ascii	"EE_oo_IRQ_suspend_status\000"
 3812      6F5F4952 
 3812      515F7375 
 3812      7370656E 
 3812      645F7374 
 3813              	.LASF46:
 3814 052c 52435F45 		.ascii	"RC_ERROR_INVALID\000"
 3814      52524F52 
 3814      5F494E56 
 3814      414C4944 
 3814      00
 3815              	.LASF140:
 3816 053d 45455F41 		.ascii	"EE_ApplicationMode\000"
 3816      70706C69 
 3816      63617469 
 3816      6F6E4D6F 
 3816      646500
 3817              	.LASF52:
 3818 0550 52435F45 		.ascii	"RC_ERROR_CANCELED\000"
 3818      52524F52 
 3818      5F43414E 
 3818      43454C45 
 3818      4400
 3819              	.LASF130:
 3820 0562 73706565 		.ascii	"speedSignal\000"
 3820      64536967 
 3820      6E616C00 
 3821              	.LASF37:
 3822 056e 52435F45 		.ascii	"RC_ERROR_UNDERRUN\000"
 3822      52524F52 
 3822      5F554E44 
 3822      45525255 
 3822      4E00
 3823              	.LASF47:
 3824 0580 52435F45 		.ascii	"RC_ERROR_READ_FAILS\000"
 3824      52524F52 
 3824      5F524541 
 3824      445F4641 
 3824      494C5300 
 3825              	.LASF106:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 103


 3826 0594 53435F42 		.ascii	"SC_BREAKLIGHT_driverOut_t\000"
 3826      5245414B 
 3826      4C494748 
 3826      545F6472 
 3826      69766572 
 3827              	.LASF152:
 3828 05ae 433A5C55 		.ascii	"C:\\Users\\vboxuser\\Documents\\GitHub\\EAA_GasPeda"
 3828      73657273 
 3828      5C76626F 
 3828      78757365 
 3828      725C446F 
 3829 05dc 6C5C4C61 		.ascii	"l\\Lab 1\\GasPedal.cydsn\000"
 3829      6220315C 
 3829      47617350 
 3829      6564616C 
 3829      2E637964 
 3830              	.LASF119:
 3831 05f3 5254455F 		.ascii	"RTE_SC_JOYSTICK_get\000"
 3831      53435F4A 
 3831      4F595354 
 3831      49434B5F 
 3831      67657400 
 3832              	.LASF70:
 3833 0607 696E4472 		.ascii	"inDriver\000"
 3833      69766572 
 3833      00
 3834              	.LASF31:
 3835 0610 52435F45 		.ascii	"RC_ERROR\000"
 3835      52524F52 
 3835      00
 3836              	.LASF15:
 3837 0619 666C6F61 		.ascii	"float\000"
 3837      7400
 3838              	.LASF122:
 3839 061f 5254455F 		.ascii	"RTE_SC_SPEED_get\000"
 3839      53435F53 
 3839      50454544 
 3839      5F676574 
 3839      00
 3840              	.LASF40:
 3841 0630 52435F45 		.ascii	"RC_ERROR_BUSY\000"
 3841      52524F52 
 3841      5F425553 
 3841      5900
 3842              	.LASF127:
 3843 063e 5254455F 		.ascii	"RTE_SC_BREAKLIGHT_set\000"
 3843      53435F42 
 3843      5245414B 
 3843      4C494748 
 3843      545F7365 
 3844              	.LASF76:
 3845 0654 6F6E4572 		.ascii	"onErrorTaskCount\000"
 3845      726F7254 
 3845      61736B43 
 3845      6F756E74 
 3845      00
 3846              	.LASF45:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 104


 3847 0665 52435F45 		.ascii	"RC_ERROR_WRITE_ONLY\000"
 3847      52524F52 
 3847      5F575249 
 3847      54455F4F 
 3847      4E4C5900 
 3848              	.LASF13:
 3849 0679 696E7433 		.ascii	"int32_t\000"
 3849      325F7400 
 3850              	.LASF1:
 3851 0681 756E7369 		.ascii	"unsigned char\000"
 3851      676E6564 
 3851      20636861 
 3851      7200
 3852              	.LASF81:
 3853 068f 53435F4A 		.ascii	"SC_JOYSTICK_cfg_s\000"
 3853      4F595354 
 3853      49434B5F 
 3853      6366675F 
 3853      7300
 3854              	.LASF126:
 3855 06a1 5254455F 		.ascii	"RTE_SC_BREAKLIGHT_pushPort\000"
 3855      53435F42 
 3855      5245414B 
 3855      4C494748 
 3855      545F7075 
 3856              	.LASF69:
 3857 06bc 53435F4A 		.ascii	"SC_JOYSTICK_driverOut_t\000"
 3857      4F595354 
 3857      49434B5F 
 3857      64726976 
 3857      65724F75 
 3858              	.LASF151:
 3859 06d4 6173775C 		.ascii	"asw\\swc_gaspedal.c\000"
 3859      7377635F 
 3859      67617370 
 3859      6564616C 
 3859      2E6300
 3860              	.LASF133:
 3861 06e7 73706565 		.ascii	"speedSignalAge\000"
 3861      64536967 
 3861      6E616C41 
 3861      676500
 3862              	.LASF75:
 3863 06f6 6F6E5570 		.ascii	"onUpdateTasks\000"
 3863      64617465 
 3863      5461736B 
 3863      7300
 3864              	.LASF33:
 3865 0704 52435F45 		.ascii	"RC_ERROR_ZERO\000"
 3865      52524F52 
 3865      5F5A4552 
 3865      4F00
 3866              	.LASF145:
 3867 0712 534F5F53 		.ascii	"SO_SPEED_signal\000"
 3867      50454544 
 3867      5F736967 
 3867      6E616C00 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 105


 3868              	.LASF150:
 3869 0722 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3869      43313120 
 3869      352E342E 
 3869      31203230 
 3869      31363036 
 3870 0755 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3870      20726576 
 3870      6973696F 
 3870      6E203233 
 3870      37373135 
 3871 0788 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 3871      66756E63 
 3871      74696F6E 
 3871      2D736563 
 3871      74696F6E 
 3872              	.LASF141:
 3873 07b0 45455F73 		.ascii	"EE_std_endcycle_next_tid\000"
 3873      74645F65 
 3873      6E646379 
 3873      636C655F 
 3873      6E657874 
 3874              	.LASF73:
 3875 07c9 65764F6E 		.ascii	"evOnError\000"
 3875      4572726F 
 3875      7200
 3876              	.LASF85:
 3877 07d3 70536967 		.ascii	"pSigCfg\000"
 3877      43666700 
 3878              	.LASF82:
 3879 07db 53435F4A 		.ascii	"SC_JOYSTICK_s\000"
 3879      4F595354 
 3879      49434B5F 
 3879      7300
 3880              	.LASF86:
 3881 07e9 53435F4A 		.ascii	"SC_JOYSTICK_t\000"
 3881      4F595354 
 3881      49434B5F 
 3881      7400
 3882              	.LASF14:
 3883 07f7 75696E74 		.ascii	"uint32_t\000"
 3883      33325F74 
 3883      00
 3884              	.LASF111:
 3885 0800 7369676E 		.ascii	"signal\000"
 3885      616C00
 3886              	.LASF53:
 3887 0807 52435F45 		.ascii	"RC_ERROR_INVALID_STATE\000"
 3887      52524F52 
 3887      5F494E56 
 3887      414C4944 
 3887      5F535441 
 3888              	.LASF88:
 3889 081e 53435F53 		.ascii	"SC_SPEED_data_t\000"
 3889      50454544 
 3889      5F646174 
 3889      615F7400 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 106


 3890              	.LASF44:
 3891 082e 52435F45 		.ascii	"RC_ERROR_READ_ONLY\000"
 3891      52524F52 
 3891      5F524541 
 3891      445F4F4E 
 3891      4C5900
 3892              	.LASF19:
 3893 0841 6C6F6E67 		.ascii	"long double\000"
 3893      20646F75 
 3893      626C6500 
 3894              	.LASF17:
 3895 084d 63686172 		.ascii	"char\000"
 3895      00
 3896              	.LASF61:
 3897 0852 5254455F 		.ascii	"RTE_SIGNALSTATUS_INITIALIZED\000"
 3897      5349474E 
 3897      414C5354 
 3897      41545553 
 3897      5F494E49 
 3898              	.LASF78:
 3899 086f 7265736F 		.ascii	"resourceActive\000"
 3899      75726365 
 3899      41637469 
 3899      766500
 3900              	.LASF104:
 3901 087e 53435F42 		.ascii	"SC_BREAKLIGHT_data_t\000"
 3901      5245414B 
 3901      4C494748 
 3901      545F6461 
 3901      74615F74 
 3902              	.LASF5:
 3903 0893 5F5F696E 		.ascii	"__int32_t\000"
 3903      7433325F 
 3903      7400
 3904              	.LASF55:
 3905 089d 52435F45 		.ascii	"RC_ERROR_NOT_IMPLEMENTED\000"
 3905      52524F52 
 3905      5F4E4F54 
 3905      5F494D50 
 3905      4C454D45 
 3906              	.LASF87:
 3907 08b6 73706565 		.ascii	"speedValue\000"
 3907      6456616C 
 3907      756500
 3908              	.LASF36:
 3909 08c1 52435F45 		.ascii	"RC_ERROR_OVERRUN\000"
 3909      52524F52 
 3909      5F4F5645 
 3909      5252554E 
 3909      00
 3910              	.LASF132:
 3911 08d2 47415350 		.ascii	"GASPEDAL_setEngine_run\000"
 3911      4544414C 
 3911      5F736574 
 3911      456E6769 
 3911      6E655F72 
 3912              	.LASF64:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 107


 3913 08e9 5254455F 		.ascii	"RTE_signalStatus_t\000"
 3913      7369676E 
 3913      616C5374 
 3913      61747573 
 3913      5F7400
 3914              	.LASF34:
 3915 08fc 52435F45 		.ascii	"RC_ERROR_MEMORY\000"
 3915      52524F52 
 3915      5F4D454D 
 3915      4F525900 
 3916              	.LASF66:
 3917 090c 79506F73 		.ascii	"yPos\000"
 3917      00
 3918              	.LASF57:
 3919 0911 5461736B 		.ascii	"TaskTypeArray\000"
 3919      54797065 
 3919      41727261 
 3919      7900
 3920              	.LASF112:
 3921 091f 7461736B 		.ascii	"taskNum\000"
 3921      4E756D00 
 3922              	.LASF28:
 3923 0927 73696E74 		.ascii	"sint8_t\000"
 3923      385F7400 
 3924              	.LASF84:
 3925 092f 73746174 		.ascii	"status\000"
 3925      757300
 3926              	.LASF142:
 3927 0936 45455F49 		.ascii	"EE_IRQ_nesting_level\000"
 3927      52515F6E 
 3927      65737469 
 3927      6E675F6C 
 3927      6576656C 
 3928              	.LASF21:
 3929 094b 45455F55 		.ascii	"EE_UINT32\000"
 3929      494E5433 
 3929      3200
 3930              	.LASF134:
 3931 0955 656E6769 		.ascii	"engineSignal\000"
 3931      6E655369 
 3931      676E616C 
 3931      00
 3932              	.LASF35:
 3933 0962 52435F45 		.ascii	"RC_ERROR_RANGE\000"
 3933      52524F52 
 3933      5F52414E 
 3933      474500
 3934              	.LASF20:
 3935 0971 45455F49 		.ascii	"EE_INT32\000"
 3935      4E543332 
 3935      00
 3936              	.LASF12:
 3937 097a 75696E74 		.ascii	"uint8_t\000"
 3937      385F7400 
 3938              	.LASF116:
 3939 0982 5254455F 		.ascii	"RTE_SC_JOYSTICK_setStatus\000"
 3939      53435F4A 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccSpBAQy.s 			page 108


 3939      4F595354 
 3939      49434B5F 
 3939      73657453 
 3940              	.LASF135:
 3941 099c 47415350 		.ascii	"GASPEDAL_setBrakeLight_run\000"
 3941      4544414C 
 3941      5F736574 
 3941      4272616B 
 3941      654C6967 
 3942              	.LASF96:
 3943 09b7 53435F45 		.ascii	"SC_ENGINE_data_t\000"
 3943      4E47494E 
 3943      455F6461 
 3943      74615F74 
 3943      00
 3944              	.LASF65:
 3945 09c8 78506F73 		.ascii	"xPos\000"
 3945      00
 3946              	.LASF109:
 3947 09cd 53435F42 		.ascii	"SC_BREAKLIGHT_s\000"
 3947      5245414B 
 3947      4C494748 
 3947      545F7300 
 3948              	.LASF110:
 3949 09dd 53435F42 		.ascii	"SC_BREAKLIGHT_t\000"
 3949      5245414B 
 3949      4C494748 
 3949      545F7400 
 3950              	.LASF77:
 3951 09ed 6F6E4572 		.ascii	"onErrorTasks\000"
 3951      726F7254 
 3951      61736B73 
 3951      00
 3952              	.LASF23:
 3953 09fa 45455F46 		.ascii	"EE_FREG\000"
 3953      52454700 
 3954              	.LASF101:
 3955 0a02 53435F45 		.ascii	"SC_ENGINE_s\000"
 3955      4E47494E 
 3955      455F7300 
 3956              	.LASF102:
 3957 0a0e 53435F45 		.ascii	"SC_ENGINE_t\000"
 3957      4E47494E 
 3957      455F7400 
 3958              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
