
/*
 * Filename: sc_breakpedal_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 *
 * Description: Signalclass for breakPedal(ISR button)
 */

#ifndef _H_DEFINE_SC_BREAKPEDAL_TYPE
#define _H_DEFINE_SC_BREAKPEDAL_TYPE

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SC_BREAKPEDAL_INCLUDES */

/* USER CODE END SC_BREAKPEDAL_INCLUDES */



/**********************************************************************
 *       Type Definition for SC_BREAKPEDAL signal    
 **********************************************************************/

/* USER CODE START SC_BREAKPEDAL_USERDEFINITIONS */
#include "button.h"
/* USER CODE END SC_BREAKPEDAL_USERDEFINITIONS */

typedef 
/* USER CODE START SC_BREAKPEDAL_SIGNALDATADEFINITION */
struct
{
	boolean_t breakPedalPressed;
} 
/* USER CODE END SC_BREAKPEDAL_SIGNALDATADEFINITION */
SC_BREAKPEDAL_data_t;

/* USER CODE START InitSC_BREAKPEDAL */

#define SC_BREAKPEDAL_INIT_DATA ((SC_BREAKPEDAL_data_t){0})
/* USER CODE END InitSC_BREAKPEDAL */


/**
 * Default IN driver API
 * \param SC_BREAKPEDAL_data_t *const data : [OUT] scaled data read from the driver
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_BREAKPEDAL_driverIn(SC_BREAKPEDAL_data_t *const data);




/* USER CODE START SC_BREAKPEDAL_USERFUNCTIONS */

/* USER CODE END SC_BREAKPEDAL_USERFUNCTIONS */


#endif