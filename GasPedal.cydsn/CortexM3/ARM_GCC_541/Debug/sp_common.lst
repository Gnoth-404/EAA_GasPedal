ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"sp_common.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RTE_timertick_sp_common_tick,"ax",%progbits
  20              		.align	2
  21              		.global	RTE_timertick_sp_common_tick
  22              		.thumb
  23              		.thumb_func
  24              		.type	RTE_timertick_sp_common_tick, %function
  25              	RTE_timertick_sp_common_tick:
  26              	.LFB180:
  27              		.file 1 "bsw\\rte\\sp_common.c"
   1:bsw\rte/sp_common.c **** /*
   2:bsw\rte/sp_common.c ****  * Filename: sp_common.c
   3:bsw\rte/sp_common.c ****  *
   4:bsw\rte/sp_common.c ****  * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
   5:bsw\rte/sp_common.c ****  *
   6:bsw\rte/sp_common.c ****  * description: Common PSOC Signal Pool
   7:bsw\rte/sp_common.c ****  * endaddr: ADR_SP_COMMON_END
   8:bsw\rte/sp_common.c ****  * name: sp_common
   9:bsw\rte/sp_common.c ****  * shortname: common
  10:bsw\rte/sp_common.c ****  * startaddr: ADR_SP_COMMON_START
  11:bsw\rte/sp_common.c ****  *
  12:bsw\rte/sp_common.c ****  */
  13:bsw\rte/sp_common.c **** 
  14:bsw\rte/sp_common.c **** #include "project.h"
  15:bsw\rte/sp_common.c **** #include "global.h"
  16:bsw\rte/sp_common.c **** #include "rte.h"
  17:bsw\rte/sp_common.c **** #include "rte_types.h"
  18:bsw\rte/sp_common.c **** #include "sp_common.h"
  19:bsw\rte/sp_common.c **** 
  20:bsw\rte/sp_common.c **** 
  21:bsw\rte/sp_common.c **** 
  22:bsw\rte/sp_common.c **** /* USER CODE START SP_COMMON_INCLUDE */
  23:bsw\rte/sp_common.c **** 
  24:bsw\rte/sp_common.c **** /* USER CODE END SP_COMMON_INCLUDE */
  25:bsw\rte/sp_common.c **** 
  26:bsw\rte/sp_common.c **** #include "sc_joystick.h"
  27:bsw\rte/sp_common.c **** #include "sc_joystick_type.h"
  28:bsw\rte/sp_common.c **** #include "sc_speed.h"
  29:bsw\rte/sp_common.c **** #include "sc_speed_type.h"
  30:bsw\rte/sp_common.c **** #include "sc_engine.h"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 2


  31:bsw\rte/sp_common.c **** #include "sc_engine_type.h"
  32:bsw\rte/sp_common.c **** #include "sc_breakpedal.h"
  33:bsw\rte/sp_common.c **** #include "sc_breakpedal_type.h"
  34:bsw\rte/sp_common.c **** #include "sc_breaklight.h"
  35:bsw\rte/sp_common.c **** #include "sc_breaklight_type.h"
  36:bsw\rte/sp_common.c **** #include "sc_screen.h"
  37:bsw\rte/sp_common.c **** #include "sc_screen_type.h"
  38:bsw\rte/sp_common.c **** 
  39:bsw\rte/sp_common.c **** 
  40:bsw\rte/sp_common.c **** 
  41:bsw\rte/sp_common.c **** /* signal configuration */
  42:bsw\rte/sp_common.c **** /*
  43:bsw\rte/sp_common.c ****  * description: Joystick input signal
  44:bsw\rte/sp_common.c ****  * indriver: default
  45:bsw\rte/sp_common.c ****  * name: so_joystick
  46:bsw\rte/sp_common.c ****  * onDataError: 0
  47:bsw\rte/sp_common.c ****  * onDataUpdate: ev_joystick_onData
  48:bsw\rte/sp_common.c ****  * outdriver: 0
  49:bsw\rte/sp_common.c ****  * resource: None
  50:bsw\rte/sp_common.c ****  * shortname: joystick
  51:bsw\rte/sp_common.c ****  * signalclass: sc_joystick
  52:bsw\rte/sp_common.c ****  * signalpool: sp_common
  53:bsw\rte/sp_common.c ****  */
  54:bsw\rte/sp_common.c **** 
  55:bsw\rte/sp_common.c **** 
  56:bsw\rte/sp_common.c **** /* The following array contains the receiving tasks for onUpdate signal events */
  57:bsw\rte/sp_common.c **** const TaskTypeArray so_joystick_updTasks = { tsk_control };
  58:bsw\rte/sp_common.c ****  
  59:bsw\rte/sp_common.c **** 
  60:bsw\rte/sp_common.c **** static const SC_JOYSTICK_cfg_t SO_JOYSTICK_cfg = 
  61:bsw\rte/sp_common.c **** {
  62:bsw\rte/sp_common.c ****    /* indriver           */  SC_JOYSTICK_driverIn,
  63:bsw\rte/sp_common.c ****    /* outdriver          */  0,
  64:bsw\rte/sp_common.c **** 
  65:bsw\rte/sp_common.c ****    /* onUpdate           */  ev_joystick_onData,
  66:bsw\rte/sp_common.c ****    /* onError            */  0,
  67:bsw\rte/sp_common.c ****    /* taskCount onUpdate */  1,
  68:bsw\rte/sp_common.c ****    /* task list onUpdate */  &so_joystick_updTasks,
  69:bsw\rte/sp_common.c ****    /* taskCount onError  */  0,
  70:bsw\rte/sp_common.c ****    /* task list onError  */  NULL,
  71:bsw\rte/sp_common.c **** 
  72:bsw\rte/sp_common.c ****    /* resource active    */  FALSE,
  73:bsw\rte/sp_common.c ****    /* resource           */  0,
  74:bsw\rte/sp_common.c ****    
  75:bsw\rte/sp_common.c **** }; /* configuration so_joystick */
  76:bsw\rte/sp_common.c **** 
  77:bsw\rte/sp_common.c **** 
  78:bsw\rte/sp_common.c **** /* signal data */
  79:bsw\rte/sp_common.c **** 
  80:bsw\rte/sp_common.c **** SC_JOYSTICK_t SO_JOYSTICK_signal= 
  81:bsw\rte/sp_common.c **** {
  82:bsw\rte/sp_common.c ****    /* init value    */  SC_JOYSTICK_INIT_DATA,
  83:bsw\rte/sp_common.c ****    /* status        */  RTE_SIGNALSTATUS_STARTUP,
  84:bsw\rte/sp_common.c ****    /* age           */  0,
  85:bsw\rte/sp_common.c ****    /* cfg           */  &SO_JOYSTICK_cfg,
  86:bsw\rte/sp_common.c **** }; /* data so_joystick */
  87:bsw\rte/sp_common.c **** 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 3


  88:bsw\rte/sp_common.c **** /* signal configuration */
  89:bsw\rte/sp_common.c **** /*
  90:bsw\rte/sp_common.c ****  * description: Calculated speed signal
  91:bsw\rte/sp_common.c ****  * indriver: 0
  92:bsw\rte/sp_common.c ****  * name: so_speed
  93:bsw\rte/sp_common.c ****  * onDataError: 0
  94:bsw\rte/sp_common.c ****  * onDataUpdate: ev_speed_onData
  95:bsw\rte/sp_common.c ****  * outdriver: 0
  96:bsw\rte/sp_common.c ****  * resource: None
  97:bsw\rte/sp_common.c ****  * shortname: speed
  98:bsw\rte/sp_common.c ****  * signalclass: sc_speed
  99:bsw\rte/sp_common.c ****  * signalpool: sp_common
 100:bsw\rte/sp_common.c ****  */
 101:bsw\rte/sp_common.c **** 
 102:bsw\rte/sp_common.c **** 
 103:bsw\rte/sp_common.c **** /* The following array contains the receiving tasks for onUpdate signal events */
 104:bsw\rte/sp_common.c **** const TaskTypeArray so_speed_updTasks = { tsk_io };
 105:bsw\rte/sp_common.c ****  
 106:bsw\rte/sp_common.c **** 
 107:bsw\rte/sp_common.c **** static const SC_SPEED_cfg_t SO_SPEED_cfg = 
 108:bsw\rte/sp_common.c **** {
 109:bsw\rte/sp_common.c ****    /* indriver           */  0,
 110:bsw\rte/sp_common.c ****    /* outdriver          */  0,
 111:bsw\rte/sp_common.c **** 
 112:bsw\rte/sp_common.c ****    /* onUpdate           */  ev_speed_onData,
 113:bsw\rte/sp_common.c ****    /* onError            */  0,
 114:bsw\rte/sp_common.c ****    /* taskCount onUpdate */  1,
 115:bsw\rte/sp_common.c ****    /* task list onUpdate */  &so_speed_updTasks,
 116:bsw\rte/sp_common.c ****    /* taskCount onError  */  0,
 117:bsw\rte/sp_common.c ****    /* task list onError  */  NULL,
 118:bsw\rte/sp_common.c **** 
 119:bsw\rte/sp_common.c ****    /* resource active    */  FALSE,
 120:bsw\rte/sp_common.c ****    /* resource           */  0,
 121:bsw\rte/sp_common.c ****    
 122:bsw\rte/sp_common.c **** }; /* configuration so_speed */
 123:bsw\rte/sp_common.c **** 
 124:bsw\rte/sp_common.c **** 
 125:bsw\rte/sp_common.c **** /* signal data */
 126:bsw\rte/sp_common.c **** 
 127:bsw\rte/sp_common.c **** SC_SPEED_t SO_SPEED_signal= 
 128:bsw\rte/sp_common.c **** {
 129:bsw\rte/sp_common.c ****    /* init value    */  SC_SPEED_INIT_DATA,
 130:bsw\rte/sp_common.c ****    /* status        */  RTE_SIGNALSTATUS_STARTUP,
 131:bsw\rte/sp_common.c ****    /* age           */  0,
 132:bsw\rte/sp_common.c ****    /* cfg           */  &SO_SPEED_cfg,
 133:bsw\rte/sp_common.c **** }; /* data so_speed */
 134:bsw\rte/sp_common.c **** 
 135:bsw\rte/sp_common.c **** /* signal configuration */
 136:bsw\rte/sp_common.c **** /*
 137:bsw\rte/sp_common.c ****  * description: A speed signal expored to hardware
 138:bsw\rte/sp_common.c ****  * indriver: 0
 139:bsw\rte/sp_common.c ****  * name: so_engine
 140:bsw\rte/sp_common.c ****  * onDataError: 0
 141:bsw\rte/sp_common.c ****  * onDataUpdate: 0
 142:bsw\rte/sp_common.c ****  * outdriver: default
 143:bsw\rte/sp_common.c ****  * resource: None
 144:bsw\rte/sp_common.c ****  * shortname: engine
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 4


 145:bsw\rte/sp_common.c ****  * signalclass: sc_engine
 146:bsw\rte/sp_common.c ****  * signalpool: sp_common
 147:bsw\rte/sp_common.c ****  */
 148:bsw\rte/sp_common.c **** 
 149:bsw\rte/sp_common.c ****  
 150:bsw\rte/sp_common.c **** 
 151:bsw\rte/sp_common.c **** static const SC_ENGINE_cfg_t SO_ENGINE_cfg = 
 152:bsw\rte/sp_common.c **** {
 153:bsw\rte/sp_common.c ****    /* indriver           */  0,
 154:bsw\rte/sp_common.c ****    /* outdriver          */  SC_ENGINE_driverOut,
 155:bsw\rte/sp_common.c **** 
 156:bsw\rte/sp_common.c ****    /* onUpdate           */  0,
 157:bsw\rte/sp_common.c ****    /* onError            */  0,
 158:bsw\rte/sp_common.c ****    /* taskCount onUpdate */  0,
 159:bsw\rte/sp_common.c ****    /* task list onUpdate */  NULL,
 160:bsw\rte/sp_common.c ****    /* taskCount onError  */  0,
 161:bsw\rte/sp_common.c ****    /* task list onError  */  NULL,
 162:bsw\rte/sp_common.c **** 
 163:bsw\rte/sp_common.c ****    /* resource active    */  FALSE,
 164:bsw\rte/sp_common.c ****    /* resource           */  0,
 165:bsw\rte/sp_common.c ****    
 166:bsw\rte/sp_common.c **** }; /* configuration so_engine */
 167:bsw\rte/sp_common.c **** 
 168:bsw\rte/sp_common.c **** 
 169:bsw\rte/sp_common.c **** /* signal data */
 170:bsw\rte/sp_common.c **** 
 171:bsw\rte/sp_common.c **** SC_ENGINE_t SO_ENGINE_signal= 
 172:bsw\rte/sp_common.c **** {
 173:bsw\rte/sp_common.c ****    /* init value    */  SC_ENGINE_INIT_DATA,
 174:bsw\rte/sp_common.c ****    /* status        */  RTE_SIGNALSTATUS_STARTUP,
 175:bsw\rte/sp_common.c ****    /* age           */  0,
 176:bsw\rte/sp_common.c ****    /* cfg           */  &SO_ENGINE_cfg,
 177:bsw\rte/sp_common.c **** }; /* data so_engine */
 178:bsw\rte/sp_common.c **** 
 179:bsw\rte/sp_common.c **** /* signal configuration */
 180:bsw\rte/sp_common.c **** /*
 181:bsw\rte/sp_common.c ****  * description: Break pedal signal object
 182:bsw\rte/sp_common.c ****  * indriver: default
 183:bsw\rte/sp_common.c ****  * name: so_breakPedal
 184:bsw\rte/sp_common.c ****  * onDataError: 0
 185:bsw\rte/sp_common.c ****  * onDataUpdate: ev_breakpedal_onData
 186:bsw\rte/sp_common.c ****  * outdriver: 0
 187:bsw\rte/sp_common.c ****  * resource: None
 188:bsw\rte/sp_common.c ****  * shortname: breakPedal
 189:bsw\rte/sp_common.c ****  * signalclass: sc_breakPedal
 190:bsw\rte/sp_common.c ****  * signalpool: sp_common
 191:bsw\rte/sp_common.c ****  */
 192:bsw\rte/sp_common.c **** 
 193:bsw\rte/sp_common.c **** 
 194:bsw\rte/sp_common.c **** /* The following array contains the receiving tasks for onUpdate signal events */
 195:bsw\rte/sp_common.c **** const TaskTypeArray so_breakPedal_updTasks = { tsk_control, tsk_io };
 196:bsw\rte/sp_common.c ****  
 197:bsw\rte/sp_common.c **** 
 198:bsw\rte/sp_common.c **** static const SC_BREAKPEDAL_cfg_t SO_BREAKPEDAL_cfg = 
 199:bsw\rte/sp_common.c **** {
 200:bsw\rte/sp_common.c ****    /* indriver           */  SC_BREAKPEDAL_driverIn,
 201:bsw\rte/sp_common.c ****    /* outdriver          */  0,
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 5


 202:bsw\rte/sp_common.c **** 
 203:bsw\rte/sp_common.c ****    /* onUpdate           */  ev_breakpedal_onData,
 204:bsw\rte/sp_common.c ****    /* onError            */  0,
 205:bsw\rte/sp_common.c ****    /* taskCount onUpdate */  2,
 206:bsw\rte/sp_common.c ****    /* task list onUpdate */  &so_breakPedal_updTasks,
 207:bsw\rte/sp_common.c ****    /* taskCount onError  */  0,
 208:bsw\rte/sp_common.c ****    /* task list onError  */  NULL,
 209:bsw\rte/sp_common.c **** 
 210:bsw\rte/sp_common.c ****    /* resource active    */  FALSE,
 211:bsw\rte/sp_common.c ****    /* resource           */  0,
 212:bsw\rte/sp_common.c ****    
 213:bsw\rte/sp_common.c **** }; /* configuration so_breakpedal */
 214:bsw\rte/sp_common.c **** 
 215:bsw\rte/sp_common.c **** 
 216:bsw\rte/sp_common.c **** /* signal data */
 217:bsw\rte/sp_common.c **** 
 218:bsw\rte/sp_common.c **** SC_BREAKPEDAL_t SO_BREAKPEDAL_signal= 
 219:bsw\rte/sp_common.c **** {
 220:bsw\rte/sp_common.c ****    /* init value    */  SC_BREAKPEDAL_INIT_DATA,
 221:bsw\rte/sp_common.c ****    /* status        */  RTE_SIGNALSTATUS_STARTUP,
 222:bsw\rte/sp_common.c ****    /* age           */  0,
 223:bsw\rte/sp_common.c ****    /* cfg           */  &SO_BREAKPEDAL_cfg,
 224:bsw\rte/sp_common.c **** }; /* data so_breakpedal */
 225:bsw\rte/sp_common.c **** 
 226:bsw\rte/sp_common.c **** /* signal configuration */
 227:bsw\rte/sp_common.c **** /*
 228:bsw\rte/sp_common.c ****  * description: A Signal
 229:bsw\rte/sp_common.c ****  * indriver: 0
 230:bsw\rte/sp_common.c ****  * name: so_breakLight
 231:bsw\rte/sp_common.c ****  * onDataError: 0
 232:bsw\rte/sp_common.c ****  * onDataUpdate: 0
 233:bsw\rte/sp_common.c ****  * outdriver: default
 234:bsw\rte/sp_common.c ****  * resource: None
 235:bsw\rte/sp_common.c ****  * shortname: breakLight
 236:bsw\rte/sp_common.c ****  * signalclass: sc_breakLight
 237:bsw\rte/sp_common.c ****  * signalpool: sp_common
 238:bsw\rte/sp_common.c ****  */
 239:bsw\rte/sp_common.c **** 
 240:bsw\rte/sp_common.c ****  
 241:bsw\rte/sp_common.c **** 
 242:bsw\rte/sp_common.c **** static const SC_BREAKLIGHT_cfg_t SO_BREAKLIGHT_cfg = 
 243:bsw\rte/sp_common.c **** {
 244:bsw\rte/sp_common.c ****    /* indriver           */  0,
 245:bsw\rte/sp_common.c ****    /* outdriver          */  SC_BREAKLIGHT_driverOut,
 246:bsw\rte/sp_common.c **** 
 247:bsw\rte/sp_common.c ****    /* onUpdate           */  0,
 248:bsw\rte/sp_common.c ****    /* onError            */  0,
 249:bsw\rte/sp_common.c ****    /* taskCount onUpdate */  0,
 250:bsw\rte/sp_common.c ****    /* task list onUpdate */  NULL,
 251:bsw\rte/sp_common.c ****    /* taskCount onError  */  0,
 252:bsw\rte/sp_common.c ****    /* task list onError  */  NULL,
 253:bsw\rte/sp_common.c **** 
 254:bsw\rte/sp_common.c ****    /* resource active    */  FALSE,
 255:bsw\rte/sp_common.c ****    /* resource           */  0,
 256:bsw\rte/sp_common.c ****    
 257:bsw\rte/sp_common.c **** }; /* configuration so_breaklight */
 258:bsw\rte/sp_common.c **** 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 6


 259:bsw\rte/sp_common.c **** 
 260:bsw\rte/sp_common.c **** /* signal data */
 261:bsw\rte/sp_common.c **** 
 262:bsw\rte/sp_common.c **** SC_BREAKLIGHT_t SO_BREAKLIGHT_signal= 
 263:bsw\rte/sp_common.c **** {
 264:bsw\rte/sp_common.c ****    /* init value    */  SC_BREAKLIGHT_INIT_DATA,
 265:bsw\rte/sp_common.c ****    /* status        */  RTE_SIGNALSTATUS_STARTUP,
 266:bsw\rte/sp_common.c ****    /* age           */  0,
 267:bsw\rte/sp_common.c ****    /* cfg           */  &SO_BREAKLIGHT_cfg,
 268:bsw\rte/sp_common.c **** }; /* data so_breaklight */
 269:bsw\rte/sp_common.c **** 
 270:bsw\rte/sp_common.c **** /* signal configuration */
 271:bsw\rte/sp_common.c **** /*
 272:bsw\rte/sp_common.c ****  * description: A signal for displaying debugging task
 273:bsw\rte/sp_common.c ****  * indriver: 0
 274:bsw\rte/sp_common.c ****  * name: so_screen
 275:bsw\rte/sp_common.c ****  * onDataError: 0
 276:bsw\rte/sp_common.c ****  * onDataUpdate: ev_screen_onData
 277:bsw\rte/sp_common.c ****  * outdriver: default
 278:bsw\rte/sp_common.c ****  * resource: None
 279:bsw\rte/sp_common.c ****  * shortname: screen
 280:bsw\rte/sp_common.c ****  * signalclass: sc_screen
 281:bsw\rte/sp_common.c ****  * signalpool: sp_common
 282:bsw\rte/sp_common.c ****  */
 283:bsw\rte/sp_common.c **** 
 284:bsw\rte/sp_common.c **** 
 285:bsw\rte/sp_common.c **** /* The following array contains the receiving tasks for onUpdate signal events */
 286:bsw\rte/sp_common.c **** const TaskTypeArray so_screen_updTasks = { tsk_control, tsk_tft };
 287:bsw\rte/sp_common.c ****  
 288:bsw\rte/sp_common.c **** 
 289:bsw\rte/sp_common.c **** static const SC_SCREEN_cfg_t SO_SCREEN_cfg = 
 290:bsw\rte/sp_common.c **** {
 291:bsw\rte/sp_common.c ****    /* indriver           */  0,
 292:bsw\rte/sp_common.c ****    /* outdriver          */  SC_SCREEN_driverOut,
 293:bsw\rte/sp_common.c **** 
 294:bsw\rte/sp_common.c ****    /* onUpdate           */  ev_screen_onData,
 295:bsw\rte/sp_common.c ****    /* onError            */  0,
 296:bsw\rte/sp_common.c ****    /* taskCount onUpdate */  2,
 297:bsw\rte/sp_common.c ****    /* task list onUpdate */  &so_screen_updTasks,
 298:bsw\rte/sp_common.c ****    /* taskCount onError  */  0,
 299:bsw\rte/sp_common.c ****    /* task list onError  */  NULL,
 300:bsw\rte/sp_common.c **** 
 301:bsw\rte/sp_common.c ****    /* resource active    */  FALSE,
 302:bsw\rte/sp_common.c ****    /* resource           */  0,
 303:bsw\rte/sp_common.c ****    
 304:bsw\rte/sp_common.c **** }; /* configuration so_screen */
 305:bsw\rte/sp_common.c **** 
 306:bsw\rte/sp_common.c **** 
 307:bsw\rte/sp_common.c **** /* signal data */
 308:bsw\rte/sp_common.c **** 
 309:bsw\rte/sp_common.c **** SC_SCREEN_t SO_SCREEN_signal= 
 310:bsw\rte/sp_common.c **** {
 311:bsw\rte/sp_common.c ****    /* init value    */  SC_SCREEN_INIT_DATA,
 312:bsw\rte/sp_common.c ****    /* status        */  RTE_SIGNALSTATUS_STARTUP,
 313:bsw\rte/sp_common.c ****    /* age           */  0,
 314:bsw\rte/sp_common.c ****    /* cfg           */  &SO_SCREEN_cfg,
 315:bsw\rte/sp_common.c **** }; /* data so_screen */
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 7


 316:bsw\rte/sp_common.c **** 
 317:bsw\rte/sp_common.c **** 
 318:bsw\rte/sp_common.c **** 
 319:bsw\rte/sp_common.c **** /*
 320:bsw\rte/sp_common.c ****  * Increments the age of the signals in this pool 
 321:bsw\rte/sp_common.c ****  */
 322:bsw\rte/sp_common.c **** void RTE_timertick_sp_common_tick(uint32_t tick){
  28              		.loc 1 322 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              	.LBB26:
  35              	.LBB27:
  36              		.file 2 "bsw\\rte\\sc_joystick.h"
   1:bsw\rte/sc_joystick.h **** 
   2:bsw\rte/sc_joystick.h **** 
   3:bsw\rte/sc_joystick.h **** /**
   4:bsw\rte/sc_joystick.h ****  *  file    SC_JOYSTICK_signal.h
   5:bsw\rte/sc_joystick.h ****  *
   6:bsw\rte/sc_joystick.h ****  *  brief   signal base class for signal sc_joystick
   7:bsw\rte/sc_joystick.h ****  *
   8:bsw\rte/sc_joystick.h ****  *  author  Autogenerated, Peter Fromm       <peter.fromm@h-da.de>
   9:bsw\rte/sc_joystick.h ****  *
  10:bsw\rte/sc_joystick.h ****  * description: Joystick signal class
  11:bsw\rte/sc_joystick.h ****  * name: sc_joystick
  12:bsw\rte/sc_joystick.h ****  * shortname: joystick
  13:bsw\rte/sc_joystick.h ****  *
  14:bsw\rte/sc_joystick.h ****  */
  15:bsw\rte/sc_joystick.h **** 
  16:bsw\rte/sc_joystick.h **** 
  17:bsw\rte/sc_joystick.h **** 
  18:bsw\rte/sc_joystick.h **** #ifndef SC_JOYSTICK_SIGNAL_H_INCLUDED
  19:bsw\rte/sc_joystick.h **** #define SC_JOYSTICK_SIGNAL_H_INCLUDED
  20:bsw\rte/sc_joystick.h **** 
  21:bsw\rte/sc_joystick.h **** /*================================================[ public includes  ]=============================
  22:bsw\rte/sc_joystick.h **** #include "global.h"
  23:bsw\rte/sc_joystick.h **** #include "project.h"
  24:bsw\rte/sc_joystick.h **** #include "rte.h"
  25:bsw\rte/sc_joystick.h **** #include "rte_types.h"
  26:bsw\rte/sc_joystick.h **** 
  27:bsw\rte/sc_joystick.h **** #include "sc_joystick_type.h"
  28:bsw\rte/sc_joystick.h **** 
  29:bsw\rte/sc_joystick.h **** 
  30:bsw\rte/sc_joystick.h **** /**************************************************************************************************
  31:bsw\rte/sc_joystick.h **** /* The driver API block																						*/
  32:bsw\rte/sc_joystick.h **** /**************************************************************************************************
  33:bsw\rte/sc_joystick.h ****                                                                                                    
  34:bsw\rte/sc_joystick.h **** /**
  35:bsw\rte/sc_joystick.h ****  *  Definition of function types for driver interfaces.
  36:bsw\rte/sc_joystick.h ****  *  I-Port
  37:bsw\rte/sc_joystick.h ****  */
  38:bsw\rte/sc_joystick.h **** typedef RC_t (*SC_JOYSTICK_driverIn_t)(SC_JOYSTICK_data_t * const);
  39:bsw\rte/sc_joystick.h **** 
  40:bsw\rte/sc_joystick.h **** /**
  41:bsw\rte/sc_joystick.h ****  *  Definition of function types for driver interfaces.
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 8


  42:bsw\rte/sc_joystick.h ****  *  O-Port
  43:bsw\rte/sc_joystick.h ****  */
  44:bsw\rte/sc_joystick.h **** typedef RC_t (*SC_JOYSTICK_driverOut_t)( const SC_JOYSTICK_data_t * const);
  45:bsw\rte/sc_joystick.h **** 
  46:bsw\rte/sc_joystick.h **** 
  47:bsw\rte/sc_joystick.h **** /**************************************************************************************************
  48:bsw\rte/sc_joystick.h **** /* The signal configuration API block																				*/
  49:bsw\rte/sc_joystick.h **** /**************************************************************************************************
  50:bsw\rte/sc_joystick.h **** 
  51:bsw\rte/sc_joystick.h **** /**
  52:bsw\rte/sc_joystick.h ****  * Instances of the struct SC_JOYSTICK_cfg_t represent the signal object configuration.
  53:bsw\rte/sc_joystick.h ****  */
  54:bsw\rte/sc_joystick.h **** struct SC_JOYSTICK_cfg_s
  55:bsw\rte/sc_joystick.h **** {
  56:bsw\rte/sc_joystick.h ****     /**
  57:bsw\rte/sc_joystick.h ****      * Function pointer to the input driver
  58:bsw\rte/sc_joystick.h ****      */
  59:bsw\rte/sc_joystick.h ****     SC_JOYSTICK_driverIn_t const inDriver;
  60:bsw\rte/sc_joystick.h **** 
  61:bsw\rte/sc_joystick.h ****     /**
  62:bsw\rte/sc_joystick.h ****      * Function pointer to the output driver table
  63:bsw\rte/sc_joystick.h ****      */
  64:bsw\rte/sc_joystick.h ****    SC_JOYSTICK_driverOut_t const outDriver;
  65:bsw\rte/sc_joystick.h ****    
  66:bsw\rte/sc_joystick.h ****     /**
  67:bsw\rte/sc_joystick.h ****      * Event onUpdate
  68:bsw\rte/sc_joystick.h ****      */
  69:bsw\rte/sc_joystick.h ****     EventMaskType const evOnUpdate;
  70:bsw\rte/sc_joystick.h ****     
  71:bsw\rte/sc_joystick.h ****     
  72:bsw\rte/sc_joystick.h ****     /**
  73:bsw\rte/sc_joystick.h ****      * Event onError
  74:bsw\rte/sc_joystick.h ****      */
  75:bsw\rte/sc_joystick.h ****     EventMaskType const evOnError;
  76:bsw\rte/sc_joystick.h ****     
  77:bsw\rte/sc_joystick.h ****     /**
  78:bsw\rte/sc_joystick.h ****      * Task Count onUpdate
  79:bsw\rte/sc_joystick.h ****      */
  80:bsw\rte/sc_joystick.h ****     size_t const onUpdateTaskCount;
  81:bsw\rte/sc_joystick.h **** 
  82:bsw\rte/sc_joystick.h ****     /**
  83:bsw\rte/sc_joystick.h ****      * Task List onUpdate
  84:bsw\rte/sc_joystick.h ****      */
  85:bsw\rte/sc_joystick.h ****     TaskTypeArray* const onUpdateTasks;
  86:bsw\rte/sc_joystick.h ****     
  87:bsw\rte/sc_joystick.h ****     /**
  88:bsw\rte/sc_joystick.h ****      * Task Count onError
  89:bsw\rte/sc_joystick.h ****      */
  90:bsw\rte/sc_joystick.h ****     size_t const onErrorTaskCount;
  91:bsw\rte/sc_joystick.h **** 
  92:bsw\rte/sc_joystick.h ****     /**
  93:bsw\rte/sc_joystick.h ****      * Task List onError
  94:bsw\rte/sc_joystick.h ****      */
  95:bsw\rte/sc_joystick.h ****     TaskTypeArray* const onErrorTasks;
  96:bsw\rte/sc_joystick.h **** 	
  97:bsw\rte/sc_joystick.h **** 	
  98:bsw\rte/sc_joystick.h **** 	/**
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 9


  99:bsw\rte/sc_joystick.h **** 	 * Ressourse is active? We need an additional boolean as a ressource value 0 is valid.
 100:bsw\rte/sc_joystick.h **** 	 */
 101:bsw\rte/sc_joystick.h **** 	 boolean_t const resourceActive;
 102:bsw\rte/sc_joystick.h **** 	 
 103:bsw\rte/sc_joystick.h **** 	/**
 104:bsw\rte/sc_joystick.h **** 	 * Ressourse 
 105:bsw\rte/sc_joystick.h **** 	 */
 106:bsw\rte/sc_joystick.h **** 	 ResourceType const resource;
 107:bsw\rte/sc_joystick.h **** 
 108:bsw\rte/sc_joystick.h **** };                                                                                                 
 109:bsw\rte/sc_joystick.h **** typedef const struct SC_JOYSTICK_cfg_s SC_JOYSTICK_cfg_t;
 110:bsw\rte/sc_joystick.h ****                               
 111:bsw\rte/sc_joystick.h **** /**************************************************************************************************
 112:bsw\rte/sc_joystick.h **** /* The data interface block																							*/
 113:bsw\rte/sc_joystick.h **** /**************************************************************************************************
 114:bsw\rte/sc_joystick.h **** 
 115:bsw\rte/sc_joystick.h ****                                                                                                    
 116:bsw\rte/sc_joystick.h **** 							  
 117:bsw\rte/sc_joystick.h **** /**
 118:bsw\rte/sc_joystick.h ****  * Instances of the struct SC_JOYSTICK_t represent the signal objects.
 119:bsw\rte/sc_joystick.h ****  * A signal object contains the current application value 'value' as well as relevant meta data.
 120:bsw\rte/sc_joystick.h ****  */
 121:bsw\rte/sc_joystick.h **** struct SC_JOYSTICK_s
 122:bsw\rte/sc_joystick.h **** {                                                                                                  
 123:bsw\rte/sc_joystick.h **** 
 124:bsw\rte/sc_joystick.h **** 	/**
 125:bsw\rte/sc_joystick.h **** 	 * Data buffer for the application value
 126:bsw\rte/sc_joystick.h **** 	 */
 127:bsw\rte/sc_joystick.h ****     SC_JOYSTICK_data_t value;
 128:bsw\rte/sc_joystick.h **** 
 129:bsw\rte/sc_joystick.h ****     /**
 130:bsw\rte/sc_joystick.h ****      * Current signal status
 131:bsw\rte/sc_joystick.h ****      */
 132:bsw\rte/sc_joystick.h ****     RTE_signalStatus_t status;
 133:bsw\rte/sc_joystick.h **** 
 134:bsw\rte/sc_joystick.h ****     /**
 135:bsw\rte/sc_joystick.h ****      * Current age of the signal (in calling cycles)
 136:bsw\rte/sc_joystick.h ****      */
 137:bsw\rte/sc_joystick.h ****     uint32_t age;
 138:bsw\rte/sc_joystick.h **** 
 139:bsw\rte/sc_joystick.h ****     /**
 140:bsw\rte/sc_joystick.h ****      * Pointer to the signal configuration
 141:bsw\rte/sc_joystick.h ****      */
 142:bsw\rte/sc_joystick.h **** 	const SC_JOYSTICK_cfg_t * const    pSigCfg;
 143:bsw\rte/sc_joystick.h **** 
 144:bsw\rte/sc_joystick.h **** };                                                                                                 
 145:bsw\rte/sc_joystick.h **** typedef struct SC_JOYSTICK_s SC_JOYSTICK_t;
 146:bsw\rte/sc_joystick.h **** 
 147:bsw\rte/sc_joystick.h **** /**************************************************************************************************
 148:bsw\rte/sc_joystick.h **** /* Signal initialisation   																							*/
 149:bsw\rte/sc_joystick.h **** /**************************************************************************************************
 150:bsw\rte/sc_joystick.h **** 
 151:bsw\rte/sc_joystick.h **** /**
 152:bsw\rte/sc_joystick.h ****  * Initializes a signal instance with a passed init value.
 153:bsw\rte/sc_joystick.h ****  * Depending on the configured conversion or scaling function the raw_value will be calculated.
 154:bsw\rte/sc_joystick.h ****  * Signal status will change from RTE_SIGNALSTATUS_STARTUP to RTE_SIGNALSTATUS_INITIALIZED.
 155:bsw\rte/sc_joystick.h ****  *
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 10


 156:bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object which will be initialised
 157:bsw\rte/sc_joystick.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 158:bsw\rte/sc_joystick.h ****  *
 159:bsw\rte/sc_joystick.h ****  **/
 160:bsw\rte/sc_joystick.h **** inline RC_t RTE_SC_JOYSTICK_init( SC_JOYSTICK_t * const signal )
 161:bsw\rte/sc_joystick.h **** {                                                                                                  
 162:bsw\rte/sc_joystick.h **** 
 163:bsw\rte/sc_joystick.h ****    RC_t ret = RC_SUCCESS;
 164:bsw\rte/sc_joystick.h **** 
 165:bsw\rte/sc_joystick.h ****    //Set value and raw value
 166:bsw\rte/sc_joystick.h ****    signal->value  = SC_JOYSTICK_INIT_DATA;
 167:bsw\rte/sc_joystick.h ****    signal->age    = 0;
 168:bsw\rte/sc_joystick.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 169:bsw\rte/sc_joystick.h **** 
 170:bsw\rte/sc_joystick.h ****    return ret;
 171:bsw\rte/sc_joystick.h **** }
 172:bsw\rte/sc_joystick.h **** 
 173:bsw\rte/sc_joystick.h **** /**************************************************************************************************
 174:bsw\rte/sc_joystick.h **** /* Status and timeout control																						*/
 175:bsw\rte/sc_joystick.h **** /**************************************************************************************************
 176:bsw\rte/sc_joystick.h **** 
 177:bsw\rte/sc_joystick.h **** /**
 178:bsw\rte/sc_joystick.h ****  *  Returns the current signal status of the passed signal instance.
 179:bsw\rte/sc_joystick.h ****  *
 180:bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 181:bsw\rte/sc_joystick.h ****  * @return  sig_status_t: The current signal status
 182:bsw\rte/sc_joystick.h ****  *
 183:bsw\rte/sc_joystick.h ****  **/
 184:bsw\rte/sc_joystick.h **** inline RTE_signalStatus_t RTE_SC_JOYSTICK_getStatus( const SC_JOYSTICK_t * const signal )
 185:bsw\rte/sc_joystick.h **** {
 186:bsw\rte/sc_joystick.h ****    return signal->status;
 187:bsw\rte/sc_joystick.h **** }
 188:bsw\rte/sc_joystick.h **** 
 189:bsw\rte/sc_joystick.h **** 
 190:bsw\rte/sc_joystick.h **** /**
 191:bsw\rte/sc_joystick.h ****  *  Sets a new signal status of the passed signal instance by passing the new status.
 192:bsw\rte/sc_joystick.h ****  *
 193:bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 194:bsw\rte/sc_joystick.h ****  * @param  const sig_status_t status: New signal status
 195:bsw\rte/sc_joystick.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 196:bsw\rte/sc_joystick.h ****  *
 197:bsw\rte/sc_joystick.h ****  */
 198:bsw\rte/sc_joystick.h **** inline RC_t RTE_SC_JOYSTICK_setStatus( SC_JOYSTICK_t * const signal, const RTE_signalStatus_t statu
 199:bsw\rte/sc_joystick.h **** {
 200:bsw\rte/sc_joystick.h ****    signal->status = status;
 201:bsw\rte/sc_joystick.h ****    size_t taskNum=0;
 202:bsw\rte/sc_joystick.h ****    
 203:bsw\rte/sc_joystick.h ****    //Fire error events in case of invalid state
 204:bsw\rte/sc_joystick.h ****    if (signal->status == RTE_SIGNALSTATUS_INVALID)
 205:bsw\rte/sc_joystick.h ****    {
 206:bsw\rte/sc_joystick.h **** 	    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 207:bsw\rte/sc_joystick.h **** 		TaskTypeArray* pTaskArray = signal->pSigCfg->onErrorTasks;
 208:bsw\rte/sc_joystick.h **** 
 209:bsw\rte/sc_joystick.h **** 		if (0 != signal->pSigCfg->evOnError && NULL != pTaskArray){
 210:bsw\rte/sc_joystick.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 211:bsw\rte/sc_joystick.h **** 				TaskType task = (*pTaskArray)[taskNum];
 212:bsw\rte/sc_joystick.h **** 				SetEvent( task, signal->pSigCfg->evOnError);
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 11


 213:bsw\rte/sc_joystick.h **** 			}
 214:bsw\rte/sc_joystick.h **** 		}
 215:bsw\rte/sc_joystick.h ****    }
 216:bsw\rte/sc_joystick.h ****    
 217:bsw\rte/sc_joystick.h ****    return RC_SUCCESS;
 218:bsw\rte/sc_joystick.h **** }
 219:bsw\rte/sc_joystick.h **** 
 220:bsw\rte/sc_joystick.h **** 
 221:bsw\rte/sc_joystick.h **** /**
 222:bsw\rte/sc_joystick.h ****  * Returns the count of refreshing trials (refresh, set or set_raw) that failed.
 223:bsw\rte/sc_joystick.h ****  * Prerquisite: The signal is refreshed cyclically
 224:bsw\rte/sc_joystick.h ****  *
 225:bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 226:bsw\rte/sc_joystick.h ****  * @return uint32_t: Number of cycles since the signal has been updated for the last time
 227:bsw\rte/sc_joystick.h ****  */
 228:bsw\rte/sc_joystick.h **** inline uint32_t RTE_SC_JOYSTICK_getAge( const SC_JOYSTICK_t * const signal )
 229:bsw\rte/sc_joystick.h **** {
 230:bsw\rte/sc_joystick.h ****    return signal->age;
 231:bsw\rte/sc_joystick.h **** }
 232:bsw\rte/sc_joystick.h **** 
 233:bsw\rte/sc_joystick.h **** /**
 234:bsw\rte/sc_joystick.h ****  * Should be called by application or driver if no new value can be provided.
 235:bsw\rte/sc_joystick.h ****  * @param  SC_JOYSTICK_t * const signal: Pointer to the signal object
 236:bsw\rte/sc_joystick.h ****  * @param uint32_t increment: incrementvalue, typically in [ms]
 237:bsw\rte/sc_joystick.h ****  * @return void
 238:bsw\rte/sc_joystick.h ****  */
 239:bsw\rte/sc_joystick.h **** inline void RTE_SC_JOYSTICK_incAge(  SC_JOYSTICK_t * const signal , uint32_t increment)
 240:bsw\rte/sc_joystick.h **** {
 241:bsw\rte/sc_joystick.h **** 	   //Hack....
 242:bsw\rte/sc_joystick.h **** 	   if ( 0xFFFF0000 > (signal->age + increment) )
  37              		.loc 2 242 0
  38 0000 184B     		ldr	r3, .L8
  39 0002 5B68     		ldr	r3, [r3, #4]
  40 0004 0344     		add	r3, r3, r0
  41 0006 13F1011F 		cmn	r3, #65537
  42 000a 01D8     		bhi	.L2
 243:bsw\rte/sc_joystick.h **** 	   {
 244:bsw\rte/sc_joystick.h **** 	      signal->age += increment;
  43              		.loc 2 244 0
  44 000c 154A     		ldr	r2, .L8
  45 000e 5360     		str	r3, [r2, #4]
  46              	.L2:
  47              	.LVL1:
  48              	.LBE27:
  49              	.LBE26:
  50              	.LBB28:
  51              	.LBB29:
  52              		.file 3 "bsw\\rte\\sc_speed.h"
   1:bsw\rte/sc_speed.h **** 
   2:bsw\rte/sc_speed.h **** 
   3:bsw\rte/sc_speed.h **** /**
   4:bsw\rte/sc_speed.h ****  *  file    SC_SPEED_signal.h
   5:bsw\rte/sc_speed.h ****  *
   6:bsw\rte/sc_speed.h ****  *  brief   signal base class for signal sc_speed
   7:bsw\rte/sc_speed.h ****  *
   8:bsw\rte/sc_speed.h ****  *  author  Autogenerated, Peter Fromm       <peter.fromm@h-da.de>
   9:bsw\rte/sc_speed.h ****  *
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 12


  10:bsw\rte/sc_speed.h ****  * description: Speed signal class
  11:bsw\rte/sc_speed.h ****  * name: sc_speed
  12:bsw\rte/sc_speed.h ****  * shortname: speed
  13:bsw\rte/sc_speed.h ****  *
  14:bsw\rte/sc_speed.h ****  */
  15:bsw\rte/sc_speed.h **** 
  16:bsw\rte/sc_speed.h **** 
  17:bsw\rte/sc_speed.h **** 
  18:bsw\rte/sc_speed.h **** #ifndef SC_SPEED_SIGNAL_H_INCLUDED
  19:bsw\rte/sc_speed.h **** #define SC_SPEED_SIGNAL_H_INCLUDED
  20:bsw\rte/sc_speed.h **** 
  21:bsw\rte/sc_speed.h **** /*================================================[ public includes  ]=============================
  22:bsw\rte/sc_speed.h **** #include "global.h"
  23:bsw\rte/sc_speed.h **** #include "project.h"
  24:bsw\rte/sc_speed.h **** #include "rte.h"
  25:bsw\rte/sc_speed.h **** #include "rte_types.h"
  26:bsw\rte/sc_speed.h **** 
  27:bsw\rte/sc_speed.h **** #include "sc_speed_type.h"
  28:bsw\rte/sc_speed.h **** 
  29:bsw\rte/sc_speed.h **** 
  30:bsw\rte/sc_speed.h **** /**************************************************************************************************
  31:bsw\rte/sc_speed.h **** /* The driver API block																						*/
  32:bsw\rte/sc_speed.h **** /**************************************************************************************************
  33:bsw\rte/sc_speed.h ****                                                                                                    
  34:bsw\rte/sc_speed.h **** /**
  35:bsw\rte/sc_speed.h ****  *  Definition of function types for driver interfaces.
  36:bsw\rte/sc_speed.h ****  *  I-Port
  37:bsw\rte/sc_speed.h ****  */
  38:bsw\rte/sc_speed.h **** typedef RC_t (*SC_SPEED_driverIn_t)(SC_SPEED_data_t * const);
  39:bsw\rte/sc_speed.h **** 
  40:bsw\rte/sc_speed.h **** /**
  41:bsw\rte/sc_speed.h ****  *  Definition of function types for driver interfaces.
  42:bsw\rte/sc_speed.h ****  *  O-Port
  43:bsw\rte/sc_speed.h ****  */
  44:bsw\rte/sc_speed.h **** typedef RC_t (*SC_SPEED_driverOut_t)( const SC_SPEED_data_t * const);
  45:bsw\rte/sc_speed.h **** 
  46:bsw\rte/sc_speed.h **** 
  47:bsw\rte/sc_speed.h **** /**************************************************************************************************
  48:bsw\rte/sc_speed.h **** /* The signal configuration API block																				*/
  49:bsw\rte/sc_speed.h **** /**************************************************************************************************
  50:bsw\rte/sc_speed.h **** 
  51:bsw\rte/sc_speed.h **** /**
  52:bsw\rte/sc_speed.h ****  * Instances of the struct SC_SPEED_cfg_t represent the signal object configuration.
  53:bsw\rte/sc_speed.h ****  */
  54:bsw\rte/sc_speed.h **** struct SC_SPEED_cfg_s
  55:bsw\rte/sc_speed.h **** {
  56:bsw\rte/sc_speed.h ****     /**
  57:bsw\rte/sc_speed.h ****      * Function pointer to the input driver
  58:bsw\rte/sc_speed.h ****      */
  59:bsw\rte/sc_speed.h ****     SC_SPEED_driverIn_t const inDriver;
  60:bsw\rte/sc_speed.h **** 
  61:bsw\rte/sc_speed.h ****     /**
  62:bsw\rte/sc_speed.h ****      * Function pointer to the output driver table
  63:bsw\rte/sc_speed.h ****      */
  64:bsw\rte/sc_speed.h ****    SC_SPEED_driverOut_t const outDriver;
  65:bsw\rte/sc_speed.h ****    
  66:bsw\rte/sc_speed.h ****     /**
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 13


  67:bsw\rte/sc_speed.h ****      * Event onUpdate
  68:bsw\rte/sc_speed.h ****      */
  69:bsw\rte/sc_speed.h ****     EventMaskType const evOnUpdate;
  70:bsw\rte/sc_speed.h ****     
  71:bsw\rte/sc_speed.h ****     
  72:bsw\rte/sc_speed.h ****     /**
  73:bsw\rte/sc_speed.h ****      * Event onError
  74:bsw\rte/sc_speed.h ****      */
  75:bsw\rte/sc_speed.h ****     EventMaskType const evOnError;
  76:bsw\rte/sc_speed.h ****     
  77:bsw\rte/sc_speed.h ****     /**
  78:bsw\rte/sc_speed.h ****      * Task Count onUpdate
  79:bsw\rte/sc_speed.h ****      */
  80:bsw\rte/sc_speed.h ****     size_t const onUpdateTaskCount;
  81:bsw\rte/sc_speed.h **** 
  82:bsw\rte/sc_speed.h ****     /**
  83:bsw\rte/sc_speed.h ****      * Task List onUpdate
  84:bsw\rte/sc_speed.h ****      */
  85:bsw\rte/sc_speed.h ****     TaskTypeArray* const onUpdateTasks;
  86:bsw\rte/sc_speed.h ****     
  87:bsw\rte/sc_speed.h ****     /**
  88:bsw\rte/sc_speed.h ****      * Task Count onError
  89:bsw\rte/sc_speed.h ****      */
  90:bsw\rte/sc_speed.h ****     size_t const onErrorTaskCount;
  91:bsw\rte/sc_speed.h **** 
  92:bsw\rte/sc_speed.h ****     /**
  93:bsw\rte/sc_speed.h ****      * Task List onError
  94:bsw\rte/sc_speed.h ****      */
  95:bsw\rte/sc_speed.h ****     TaskTypeArray* const onErrorTasks;
  96:bsw\rte/sc_speed.h **** 	
  97:bsw\rte/sc_speed.h **** 	
  98:bsw\rte/sc_speed.h **** 	/**
  99:bsw\rte/sc_speed.h **** 	 * Ressourse is active? We need an additional boolean as a ressource value 0 is valid.
 100:bsw\rte/sc_speed.h **** 	 */
 101:bsw\rte/sc_speed.h **** 	 boolean_t const resourceActive;
 102:bsw\rte/sc_speed.h **** 	 
 103:bsw\rte/sc_speed.h **** 	/**
 104:bsw\rte/sc_speed.h **** 	 * Ressourse 
 105:bsw\rte/sc_speed.h **** 	 */
 106:bsw\rte/sc_speed.h **** 	 ResourceType const resource;
 107:bsw\rte/sc_speed.h **** 
 108:bsw\rte/sc_speed.h **** };                                                                                                 
 109:bsw\rte/sc_speed.h **** typedef const struct SC_SPEED_cfg_s SC_SPEED_cfg_t;
 110:bsw\rte/sc_speed.h ****                               
 111:bsw\rte/sc_speed.h **** /**************************************************************************************************
 112:bsw\rte/sc_speed.h **** /* The data interface block																							*/
 113:bsw\rte/sc_speed.h **** /**************************************************************************************************
 114:bsw\rte/sc_speed.h **** 
 115:bsw\rte/sc_speed.h ****                                                                                                    
 116:bsw\rte/sc_speed.h **** 							  
 117:bsw\rte/sc_speed.h **** /**
 118:bsw\rte/sc_speed.h ****  * Instances of the struct SC_SPEED_t represent the signal objects.
 119:bsw\rte/sc_speed.h ****  * A signal object contains the current application value 'value' as well as relevant meta data.
 120:bsw\rte/sc_speed.h ****  */
 121:bsw\rte/sc_speed.h **** struct SC_SPEED_s
 122:bsw\rte/sc_speed.h **** {                                                                                                  
 123:bsw\rte/sc_speed.h **** 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 14


 124:bsw\rte/sc_speed.h **** 	/**
 125:bsw\rte/sc_speed.h **** 	 * Data buffer for the application value
 126:bsw\rte/sc_speed.h **** 	 */
 127:bsw\rte/sc_speed.h ****     SC_SPEED_data_t value;
 128:bsw\rte/sc_speed.h **** 
 129:bsw\rte/sc_speed.h ****     /**
 130:bsw\rte/sc_speed.h ****      * Current signal status
 131:bsw\rte/sc_speed.h ****      */
 132:bsw\rte/sc_speed.h ****     RTE_signalStatus_t status;
 133:bsw\rte/sc_speed.h **** 
 134:bsw\rte/sc_speed.h ****     /**
 135:bsw\rte/sc_speed.h ****      * Current age of the signal (in calling cycles)
 136:bsw\rte/sc_speed.h ****      */
 137:bsw\rte/sc_speed.h ****     uint32_t age;
 138:bsw\rte/sc_speed.h **** 
 139:bsw\rte/sc_speed.h ****     /**
 140:bsw\rte/sc_speed.h ****      * Pointer to the signal configuration
 141:bsw\rte/sc_speed.h ****      */
 142:bsw\rte/sc_speed.h **** 	const SC_SPEED_cfg_t * const    pSigCfg;
 143:bsw\rte/sc_speed.h **** 
 144:bsw\rte/sc_speed.h **** };                                                                                                 
 145:bsw\rte/sc_speed.h **** typedef struct SC_SPEED_s SC_SPEED_t;
 146:bsw\rte/sc_speed.h **** 
 147:bsw\rte/sc_speed.h **** /**************************************************************************************************
 148:bsw\rte/sc_speed.h **** /* Signal initialisation   																							*/
 149:bsw\rte/sc_speed.h **** /**************************************************************************************************
 150:bsw\rte/sc_speed.h **** 
 151:bsw\rte/sc_speed.h **** /**
 152:bsw\rte/sc_speed.h ****  * Initializes a signal instance with a passed init value.
 153:bsw\rte/sc_speed.h ****  * Depending on the configured conversion or scaling function the raw_value will be calculated.
 154:bsw\rte/sc_speed.h ****  * Signal status will change from RTE_SIGNALSTATUS_STARTUP to RTE_SIGNALSTATUS_INITIALIZED.
 155:bsw\rte/sc_speed.h ****  *
 156:bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object which will be initialised
 157:bsw\rte/sc_speed.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 158:bsw\rte/sc_speed.h ****  *
 159:bsw\rte/sc_speed.h ****  **/
 160:bsw\rte/sc_speed.h **** inline RC_t RTE_SC_SPEED_init( SC_SPEED_t * const signal )
 161:bsw\rte/sc_speed.h **** {                                                                                                  
 162:bsw\rte/sc_speed.h **** 
 163:bsw\rte/sc_speed.h ****    RC_t ret = RC_SUCCESS;
 164:bsw\rte/sc_speed.h **** 
 165:bsw\rte/sc_speed.h ****    //Set value and raw value
 166:bsw\rte/sc_speed.h ****    signal->value  = SC_SPEED_INIT_DATA;
 167:bsw\rte/sc_speed.h ****    signal->age    = 0;
 168:bsw\rte/sc_speed.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 169:bsw\rte/sc_speed.h **** 
 170:bsw\rte/sc_speed.h ****    return ret;
 171:bsw\rte/sc_speed.h **** }
 172:bsw\rte/sc_speed.h **** 
 173:bsw\rte/sc_speed.h **** /**************************************************************************************************
 174:bsw\rte/sc_speed.h **** /* Status and timeout control																						*/
 175:bsw\rte/sc_speed.h **** /**************************************************************************************************
 176:bsw\rte/sc_speed.h **** 
 177:bsw\rte/sc_speed.h **** /**
 178:bsw\rte/sc_speed.h ****  *  Returns the current signal status of the passed signal instance.
 179:bsw\rte/sc_speed.h ****  *
 180:bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 15


 181:bsw\rte/sc_speed.h ****  * @return  sig_status_t: The current signal status
 182:bsw\rte/sc_speed.h ****  *
 183:bsw\rte/sc_speed.h ****  **/
 184:bsw\rte/sc_speed.h **** inline RTE_signalStatus_t RTE_SC_SPEED_getStatus( const SC_SPEED_t * const signal )
 185:bsw\rte/sc_speed.h **** {
 186:bsw\rte/sc_speed.h ****    return signal->status;
 187:bsw\rte/sc_speed.h **** }
 188:bsw\rte/sc_speed.h **** 
 189:bsw\rte/sc_speed.h **** 
 190:bsw\rte/sc_speed.h **** /**
 191:bsw\rte/sc_speed.h ****  *  Sets a new signal status of the passed signal instance by passing the new status.
 192:bsw\rte/sc_speed.h ****  *
 193:bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
 194:bsw\rte/sc_speed.h ****  * @param  const sig_status_t status: New signal status
 195:bsw\rte/sc_speed.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 196:bsw\rte/sc_speed.h ****  *
 197:bsw\rte/sc_speed.h ****  */
 198:bsw\rte/sc_speed.h **** inline RC_t RTE_SC_SPEED_setStatus( SC_SPEED_t * const signal, const RTE_signalStatus_t status )
 199:bsw\rte/sc_speed.h **** {
 200:bsw\rte/sc_speed.h ****    signal->status = status;
 201:bsw\rte/sc_speed.h ****    size_t taskNum=0;
 202:bsw\rte/sc_speed.h ****    
 203:bsw\rte/sc_speed.h ****    //Fire error events in case of invalid state
 204:bsw\rte/sc_speed.h ****    if (signal->status == RTE_SIGNALSTATUS_INVALID)
 205:bsw\rte/sc_speed.h ****    {
 206:bsw\rte/sc_speed.h **** 	    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 207:bsw\rte/sc_speed.h **** 		TaskTypeArray* pTaskArray = signal->pSigCfg->onErrorTasks;
 208:bsw\rte/sc_speed.h **** 
 209:bsw\rte/sc_speed.h **** 		if (0 != signal->pSigCfg->evOnError && NULL != pTaskArray){
 210:bsw\rte/sc_speed.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 211:bsw\rte/sc_speed.h **** 				TaskType task = (*pTaskArray)[taskNum];
 212:bsw\rte/sc_speed.h **** 				SetEvent( task, signal->pSigCfg->evOnError);
 213:bsw\rte/sc_speed.h **** 			}
 214:bsw\rte/sc_speed.h **** 		}
 215:bsw\rte/sc_speed.h ****    }
 216:bsw\rte/sc_speed.h ****    
 217:bsw\rte/sc_speed.h ****    return RC_SUCCESS;
 218:bsw\rte/sc_speed.h **** }
 219:bsw\rte/sc_speed.h **** 
 220:bsw\rte/sc_speed.h **** 
 221:bsw\rte/sc_speed.h **** /**
 222:bsw\rte/sc_speed.h ****  * Returns the count of refreshing trials (refresh, set or set_raw) that failed.
 223:bsw\rte/sc_speed.h ****  * Prerquisite: The signal is refreshed cyclically
 224:bsw\rte/sc_speed.h ****  *
 225:bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
 226:bsw\rte/sc_speed.h ****  * @return uint32_t: Number of cycles since the signal has been updated for the last time
 227:bsw\rte/sc_speed.h ****  */
 228:bsw\rte/sc_speed.h **** inline uint32_t RTE_SC_SPEED_getAge( const SC_SPEED_t * const signal )
 229:bsw\rte/sc_speed.h **** {
 230:bsw\rte/sc_speed.h ****    return signal->age;
 231:bsw\rte/sc_speed.h **** }
 232:bsw\rte/sc_speed.h **** 
 233:bsw\rte/sc_speed.h **** /**
 234:bsw\rte/sc_speed.h ****  * Should be called by application or driver if no new value can be provided.
 235:bsw\rte/sc_speed.h ****  * @param  SC_SPEED_t * const signal: Pointer to the signal object
 236:bsw\rte/sc_speed.h ****  * @param uint32_t increment: incrementvalue, typically in [ms]
 237:bsw\rte/sc_speed.h ****  * @return void
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 16


 238:bsw\rte/sc_speed.h ****  */
 239:bsw\rte/sc_speed.h **** inline void RTE_SC_SPEED_incAge(  SC_SPEED_t * const signal , uint32_t increment)
 240:bsw\rte/sc_speed.h **** {
 241:bsw\rte/sc_speed.h **** 	   //Hack....
 242:bsw\rte/sc_speed.h **** 	   if ( 0xFFFF0000 > (signal->age + increment) )
  53              		.loc 3 242 0
  54 0010 144B     		ldr	r3, .L8
  55 0012 1B69     		ldr	r3, [r3, #16]
  56 0014 0344     		add	r3, r3, r0
  57 0016 13F1011F 		cmn	r3, #65537
  58 001a 01D8     		bhi	.L3
 243:bsw\rte/sc_speed.h **** 	   {
 244:bsw\rte/sc_speed.h **** 	      signal->age += increment;
  59              		.loc 3 244 0
  60 001c 114A     		ldr	r2, .L8
  61 001e 1361     		str	r3, [r2, #16]
  62              	.L3:
  63              	.LVL2:
  64              	.LBE29:
  65              	.LBE28:
  66              	.LBB30:
  67              	.LBB31:
  68              		.file 4 "bsw\\rte\\sc_engine.h"
   1:bsw\rte/sc_engine.h **** 
   2:bsw\rte/sc_engine.h **** 
   3:bsw\rte/sc_engine.h **** /**
   4:bsw\rte/sc_engine.h ****  *  file    SC_ENGINE_signal.h
   5:bsw\rte/sc_engine.h ****  *
   6:bsw\rte/sc_engine.h ****  *  brief   signal base class for signal sc_engine
   7:bsw\rte/sc_engine.h ****  *
   8:bsw\rte/sc_engine.h ****  *  author  Autogenerated, Peter Fromm       <peter.fromm@h-da.de>
   9:bsw\rte/sc_engine.h ****  *
  10:bsw\rte/sc_engine.h ****  * description: Engine signal class
  11:bsw\rte/sc_engine.h ****  * name: sc_engine
  12:bsw\rte/sc_engine.h ****  * shortname: engine
  13:bsw\rte/sc_engine.h ****  *
  14:bsw\rte/sc_engine.h ****  */
  15:bsw\rte/sc_engine.h **** 
  16:bsw\rte/sc_engine.h **** 
  17:bsw\rte/sc_engine.h **** 
  18:bsw\rte/sc_engine.h **** #ifndef SC_ENGINE_SIGNAL_H_INCLUDED
  19:bsw\rte/sc_engine.h **** #define SC_ENGINE_SIGNAL_H_INCLUDED
  20:bsw\rte/sc_engine.h **** 
  21:bsw\rte/sc_engine.h **** /*================================================[ public includes  ]=============================
  22:bsw\rte/sc_engine.h **** #include "global.h"
  23:bsw\rte/sc_engine.h **** #include "project.h"
  24:bsw\rte/sc_engine.h **** #include "rte.h"
  25:bsw\rte/sc_engine.h **** #include "rte_types.h"
  26:bsw\rte/sc_engine.h **** 
  27:bsw\rte/sc_engine.h **** #include "sc_engine_type.h"
  28:bsw\rte/sc_engine.h **** 
  29:bsw\rte/sc_engine.h **** 
  30:bsw\rte/sc_engine.h **** /**************************************************************************************************
  31:bsw\rte/sc_engine.h **** /* The driver API block																						*/
  32:bsw\rte/sc_engine.h **** /**************************************************************************************************
  33:bsw\rte/sc_engine.h ****                                                                                                    
  34:bsw\rte/sc_engine.h **** /**
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 17


  35:bsw\rte/sc_engine.h ****  *  Definition of function types for driver interfaces.
  36:bsw\rte/sc_engine.h ****  *  I-Port
  37:bsw\rte/sc_engine.h ****  */
  38:bsw\rte/sc_engine.h **** typedef RC_t (*SC_ENGINE_driverIn_t)(SC_ENGINE_data_t * const);
  39:bsw\rte/sc_engine.h **** 
  40:bsw\rte/sc_engine.h **** /**
  41:bsw\rte/sc_engine.h ****  *  Definition of function types for driver interfaces.
  42:bsw\rte/sc_engine.h ****  *  O-Port
  43:bsw\rte/sc_engine.h ****  */
  44:bsw\rte/sc_engine.h **** typedef RC_t (*SC_ENGINE_driverOut_t)( const SC_ENGINE_data_t * const);
  45:bsw\rte/sc_engine.h **** 
  46:bsw\rte/sc_engine.h **** 
  47:bsw\rte/sc_engine.h **** /**************************************************************************************************
  48:bsw\rte/sc_engine.h **** /* The signal configuration API block																				*/
  49:bsw\rte/sc_engine.h **** /**************************************************************************************************
  50:bsw\rte/sc_engine.h **** 
  51:bsw\rte/sc_engine.h **** /**
  52:bsw\rte/sc_engine.h ****  * Instances of the struct SC_ENGINE_cfg_t represent the signal object configuration.
  53:bsw\rte/sc_engine.h ****  */
  54:bsw\rte/sc_engine.h **** struct SC_ENGINE_cfg_s
  55:bsw\rte/sc_engine.h **** {
  56:bsw\rte/sc_engine.h ****     /**
  57:bsw\rte/sc_engine.h ****      * Function pointer to the input driver
  58:bsw\rte/sc_engine.h ****      */
  59:bsw\rte/sc_engine.h ****     SC_ENGINE_driverIn_t const inDriver;
  60:bsw\rte/sc_engine.h **** 
  61:bsw\rte/sc_engine.h ****     /**
  62:bsw\rte/sc_engine.h ****      * Function pointer to the output driver table
  63:bsw\rte/sc_engine.h ****      */
  64:bsw\rte/sc_engine.h ****    SC_ENGINE_driverOut_t const outDriver;
  65:bsw\rte/sc_engine.h ****    
  66:bsw\rte/sc_engine.h ****     /**
  67:bsw\rte/sc_engine.h ****      * Event onUpdate
  68:bsw\rte/sc_engine.h ****      */
  69:bsw\rte/sc_engine.h ****     EventMaskType const evOnUpdate;
  70:bsw\rte/sc_engine.h ****     
  71:bsw\rte/sc_engine.h ****     
  72:bsw\rte/sc_engine.h ****     /**
  73:bsw\rte/sc_engine.h ****      * Event onError
  74:bsw\rte/sc_engine.h ****      */
  75:bsw\rte/sc_engine.h ****     EventMaskType const evOnError;
  76:bsw\rte/sc_engine.h ****     
  77:bsw\rte/sc_engine.h ****     /**
  78:bsw\rte/sc_engine.h ****      * Task Count onUpdate
  79:bsw\rte/sc_engine.h ****      */
  80:bsw\rte/sc_engine.h ****     size_t const onUpdateTaskCount;
  81:bsw\rte/sc_engine.h **** 
  82:bsw\rte/sc_engine.h ****     /**
  83:bsw\rte/sc_engine.h ****      * Task List onUpdate
  84:bsw\rte/sc_engine.h ****      */
  85:bsw\rte/sc_engine.h ****     TaskTypeArray* const onUpdateTasks;
  86:bsw\rte/sc_engine.h ****     
  87:bsw\rte/sc_engine.h ****     /**
  88:bsw\rte/sc_engine.h ****      * Task Count onError
  89:bsw\rte/sc_engine.h ****      */
  90:bsw\rte/sc_engine.h ****     size_t const onErrorTaskCount;
  91:bsw\rte/sc_engine.h **** 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 18


  92:bsw\rte/sc_engine.h ****     /**
  93:bsw\rte/sc_engine.h ****      * Task List onError
  94:bsw\rte/sc_engine.h ****      */
  95:bsw\rte/sc_engine.h ****     TaskTypeArray* const onErrorTasks;
  96:bsw\rte/sc_engine.h **** 	
  97:bsw\rte/sc_engine.h **** 	
  98:bsw\rte/sc_engine.h **** 	/**
  99:bsw\rte/sc_engine.h **** 	 * Ressourse is active? We need an additional boolean as a ressource value 0 is valid.
 100:bsw\rte/sc_engine.h **** 	 */
 101:bsw\rte/sc_engine.h **** 	 boolean_t const resourceActive;
 102:bsw\rte/sc_engine.h **** 	 
 103:bsw\rte/sc_engine.h **** 	/**
 104:bsw\rte/sc_engine.h **** 	 * Ressourse 
 105:bsw\rte/sc_engine.h **** 	 */
 106:bsw\rte/sc_engine.h **** 	 ResourceType const resource;
 107:bsw\rte/sc_engine.h **** 
 108:bsw\rte/sc_engine.h **** };                                                                                                 
 109:bsw\rte/sc_engine.h **** typedef const struct SC_ENGINE_cfg_s SC_ENGINE_cfg_t;
 110:bsw\rte/sc_engine.h ****                               
 111:bsw\rte/sc_engine.h **** /**************************************************************************************************
 112:bsw\rte/sc_engine.h **** /* The data interface block																							*/
 113:bsw\rte/sc_engine.h **** /**************************************************************************************************
 114:bsw\rte/sc_engine.h **** 
 115:bsw\rte/sc_engine.h ****                                                                                                    
 116:bsw\rte/sc_engine.h **** 							  
 117:bsw\rte/sc_engine.h **** /**
 118:bsw\rte/sc_engine.h ****  * Instances of the struct SC_ENGINE_t represent the signal objects.
 119:bsw\rte/sc_engine.h ****  * A signal object contains the current application value 'value' as well as relevant meta data.
 120:bsw\rte/sc_engine.h ****  */
 121:bsw\rte/sc_engine.h **** struct SC_ENGINE_s
 122:bsw\rte/sc_engine.h **** {                                                                                                  
 123:bsw\rte/sc_engine.h **** 
 124:bsw\rte/sc_engine.h **** 	/**
 125:bsw\rte/sc_engine.h **** 	 * Data buffer for the application value
 126:bsw\rte/sc_engine.h **** 	 */
 127:bsw\rte/sc_engine.h ****     SC_ENGINE_data_t value;
 128:bsw\rte/sc_engine.h **** 
 129:bsw\rte/sc_engine.h ****     /**
 130:bsw\rte/sc_engine.h ****      * Current signal status
 131:bsw\rte/sc_engine.h ****      */
 132:bsw\rte/sc_engine.h ****     RTE_signalStatus_t status;
 133:bsw\rte/sc_engine.h **** 
 134:bsw\rte/sc_engine.h ****     /**
 135:bsw\rte/sc_engine.h ****      * Current age of the signal (in calling cycles)
 136:bsw\rte/sc_engine.h ****      */
 137:bsw\rte/sc_engine.h ****     uint32_t age;
 138:bsw\rte/sc_engine.h **** 
 139:bsw\rte/sc_engine.h ****     /**
 140:bsw\rte/sc_engine.h ****      * Pointer to the signal configuration
 141:bsw\rte/sc_engine.h ****      */
 142:bsw\rte/sc_engine.h **** 	const SC_ENGINE_cfg_t * const    pSigCfg;
 143:bsw\rte/sc_engine.h **** 
 144:bsw\rte/sc_engine.h **** };                                                                                                 
 145:bsw\rte/sc_engine.h **** typedef struct SC_ENGINE_s SC_ENGINE_t;
 146:bsw\rte/sc_engine.h **** 
 147:bsw\rte/sc_engine.h **** /**************************************************************************************************
 148:bsw\rte/sc_engine.h **** /* Signal initialisation   																							*/
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 19


 149:bsw\rte/sc_engine.h **** /**************************************************************************************************
 150:bsw\rte/sc_engine.h **** 
 151:bsw\rte/sc_engine.h **** /**
 152:bsw\rte/sc_engine.h ****  * Initializes a signal instance with a passed init value.
 153:bsw\rte/sc_engine.h ****  * Depending on the configured conversion or scaling function the raw_value will be calculated.
 154:bsw\rte/sc_engine.h ****  * Signal status will change from RTE_SIGNALSTATUS_STARTUP to RTE_SIGNALSTATUS_INITIALIZED.
 155:bsw\rte/sc_engine.h ****  *
 156:bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object which will be initialised
 157:bsw\rte/sc_engine.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 158:bsw\rte/sc_engine.h ****  *
 159:bsw\rte/sc_engine.h ****  **/
 160:bsw\rte/sc_engine.h **** inline RC_t RTE_SC_ENGINE_init( SC_ENGINE_t * const signal )
 161:bsw\rte/sc_engine.h **** {                                                                                                  
 162:bsw\rte/sc_engine.h **** 
 163:bsw\rte/sc_engine.h ****    RC_t ret = RC_SUCCESS;
 164:bsw\rte/sc_engine.h **** 
 165:bsw\rte/sc_engine.h ****    //Set value and raw value
 166:bsw\rte/sc_engine.h ****    signal->value  = SC_ENGINE_INIT_DATA;
 167:bsw\rte/sc_engine.h ****    signal->age    = 0;
 168:bsw\rte/sc_engine.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 169:bsw\rte/sc_engine.h **** 
 170:bsw\rte/sc_engine.h ****    return ret;
 171:bsw\rte/sc_engine.h **** }
 172:bsw\rte/sc_engine.h **** 
 173:bsw\rte/sc_engine.h **** /**************************************************************************************************
 174:bsw\rte/sc_engine.h **** /* Status and timeout control																						*/
 175:bsw\rte/sc_engine.h **** /**************************************************************************************************
 176:bsw\rte/sc_engine.h **** 
 177:bsw\rte/sc_engine.h **** /**
 178:bsw\rte/sc_engine.h ****  *  Returns the current signal status of the passed signal instance.
 179:bsw\rte/sc_engine.h ****  *
 180:bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 181:bsw\rte/sc_engine.h ****  * @return  sig_status_t: The current signal status
 182:bsw\rte/sc_engine.h ****  *
 183:bsw\rte/sc_engine.h ****  **/
 184:bsw\rte/sc_engine.h **** inline RTE_signalStatus_t RTE_SC_ENGINE_getStatus( const SC_ENGINE_t * const signal )
 185:bsw\rte/sc_engine.h **** {
 186:bsw\rte/sc_engine.h ****    return signal->status;
 187:bsw\rte/sc_engine.h **** }
 188:bsw\rte/sc_engine.h **** 
 189:bsw\rte/sc_engine.h **** 
 190:bsw\rte/sc_engine.h **** /**
 191:bsw\rte/sc_engine.h ****  *  Sets a new signal status of the passed signal instance by passing the new status.
 192:bsw\rte/sc_engine.h ****  *
 193:bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 194:bsw\rte/sc_engine.h ****  * @param  const sig_status_t status: New signal status
 195:bsw\rte/sc_engine.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 196:bsw\rte/sc_engine.h ****  *
 197:bsw\rte/sc_engine.h ****  */
 198:bsw\rte/sc_engine.h **** inline RC_t RTE_SC_ENGINE_setStatus( SC_ENGINE_t * const signal, const RTE_signalStatus_t status )
 199:bsw\rte/sc_engine.h **** {
 200:bsw\rte/sc_engine.h ****    signal->status = status;
 201:bsw\rte/sc_engine.h ****    size_t taskNum=0;
 202:bsw\rte/sc_engine.h ****    
 203:bsw\rte/sc_engine.h ****    //Fire error events in case of invalid state
 204:bsw\rte/sc_engine.h ****    if (signal->status == RTE_SIGNALSTATUS_INVALID)
 205:bsw\rte/sc_engine.h ****    {
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 20


 206:bsw\rte/sc_engine.h **** 	    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 207:bsw\rte/sc_engine.h **** 		TaskTypeArray* pTaskArray = signal->pSigCfg->onErrorTasks;
 208:bsw\rte/sc_engine.h **** 
 209:bsw\rte/sc_engine.h **** 		if (0 != signal->pSigCfg->evOnError && NULL != pTaskArray){
 210:bsw\rte/sc_engine.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 211:bsw\rte/sc_engine.h **** 				TaskType task = (*pTaskArray)[taskNum];
 212:bsw\rte/sc_engine.h **** 				SetEvent( task, signal->pSigCfg->evOnError);
 213:bsw\rte/sc_engine.h **** 			}
 214:bsw\rte/sc_engine.h **** 		}
 215:bsw\rte/sc_engine.h ****    }
 216:bsw\rte/sc_engine.h ****    
 217:bsw\rte/sc_engine.h ****    return RC_SUCCESS;
 218:bsw\rte/sc_engine.h **** }
 219:bsw\rte/sc_engine.h **** 
 220:bsw\rte/sc_engine.h **** 
 221:bsw\rte/sc_engine.h **** /**
 222:bsw\rte/sc_engine.h ****  * Returns the count of refreshing trials (refresh, set or set_raw) that failed.
 223:bsw\rte/sc_engine.h ****  * Prerquisite: The signal is refreshed cyclically
 224:bsw\rte/sc_engine.h ****  *
 225:bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 226:bsw\rte/sc_engine.h ****  * @return uint32_t: Number of cycles since the signal has been updated for the last time
 227:bsw\rte/sc_engine.h ****  */
 228:bsw\rte/sc_engine.h **** inline uint32_t RTE_SC_ENGINE_getAge( const SC_ENGINE_t * const signal )
 229:bsw\rte/sc_engine.h **** {
 230:bsw\rte/sc_engine.h ****    return signal->age;
 231:bsw\rte/sc_engine.h **** }
 232:bsw\rte/sc_engine.h **** 
 233:bsw\rte/sc_engine.h **** /**
 234:bsw\rte/sc_engine.h ****  * Should be called by application or driver if no new value can be provided.
 235:bsw\rte/sc_engine.h ****  * @param  SC_ENGINE_t * const signal: Pointer to the signal object
 236:bsw\rte/sc_engine.h ****  * @param uint32_t increment: incrementvalue, typically in [ms]
 237:bsw\rte/sc_engine.h ****  * @return void
 238:bsw\rte/sc_engine.h ****  */
 239:bsw\rte/sc_engine.h **** inline void RTE_SC_ENGINE_incAge(  SC_ENGINE_t * const signal , uint32_t increment)
 240:bsw\rte/sc_engine.h **** {
 241:bsw\rte/sc_engine.h **** 	   //Hack....
 242:bsw\rte/sc_engine.h **** 	   if ( 0xFFFF0000 > (signal->age + increment) )
  69              		.loc 4 242 0
  70 0020 104B     		ldr	r3, .L8
  71 0022 DB69     		ldr	r3, [r3, #28]
  72 0024 0344     		add	r3, r3, r0
  73 0026 13F1011F 		cmn	r3, #65537
  74 002a 01D8     		bhi	.L4
 243:bsw\rte/sc_engine.h **** 	   {
 244:bsw\rte/sc_engine.h **** 	      signal->age += increment;
  75              		.loc 4 244 0
  76 002c 0D4A     		ldr	r2, .L8
  77 002e D361     		str	r3, [r2, #28]
  78              	.L4:
  79              	.LVL3:
  80              	.LBE31:
  81              	.LBE30:
  82              	.LBB32:
  83              	.LBB33:
  84              		.file 5 "bsw\\rte\\sc_breakpedal.h"
   1:bsw\rte/sc_breakpedal.h **** 
   2:bsw\rte/sc_breakpedal.h **** 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 21


   3:bsw\rte/sc_breakpedal.h **** /**
   4:bsw\rte/sc_breakpedal.h ****  *  file    SC_BREAKPEDAL_signal.h
   5:bsw\rte/sc_breakpedal.h ****  *
   6:bsw\rte/sc_breakpedal.h ****  *  brief   signal base class for signal sc_breakpedal
   7:bsw\rte/sc_breakpedal.h ****  *
   8:bsw\rte/sc_breakpedal.h ****  *  author  Autogenerated, Peter Fromm       <peter.fromm@h-da.de>
   9:bsw\rte/sc_breakpedal.h ****  *
  10:bsw\rte/sc_breakpedal.h ****  * description: Signalclass for breakPedal(ISR button)
  11:bsw\rte/sc_breakpedal.h ****  * name: sc_breakPedal
  12:bsw\rte/sc_breakpedal.h ****  * shortname: breakPedal
  13:bsw\rte/sc_breakpedal.h ****  *
  14:bsw\rte/sc_breakpedal.h ****  */
  15:bsw\rte/sc_breakpedal.h **** 
  16:bsw\rte/sc_breakpedal.h **** 
  17:bsw\rte/sc_breakpedal.h **** 
  18:bsw\rte/sc_breakpedal.h **** #ifndef SC_BREAKPEDAL_SIGNAL_H_INCLUDED
  19:bsw\rte/sc_breakpedal.h **** #define SC_BREAKPEDAL_SIGNAL_H_INCLUDED
  20:bsw\rte/sc_breakpedal.h **** 
  21:bsw\rte/sc_breakpedal.h **** /*================================================[ public includes  ]=============================
  22:bsw\rte/sc_breakpedal.h **** #include "global.h"
  23:bsw\rte/sc_breakpedal.h **** #include "project.h"
  24:bsw\rte/sc_breakpedal.h **** #include "rte.h"
  25:bsw\rte/sc_breakpedal.h **** #include "rte_types.h"
  26:bsw\rte/sc_breakpedal.h **** 
  27:bsw\rte/sc_breakpedal.h **** #include "sc_breakpedal_type.h"
  28:bsw\rte/sc_breakpedal.h **** 
  29:bsw\rte/sc_breakpedal.h **** 
  30:bsw\rte/sc_breakpedal.h **** /**************************************************************************************************
  31:bsw\rte/sc_breakpedal.h **** /* The driver API block																						*/
  32:bsw\rte/sc_breakpedal.h **** /**************************************************************************************************
  33:bsw\rte/sc_breakpedal.h ****                                                                                                    
  34:bsw\rte/sc_breakpedal.h **** /**
  35:bsw\rte/sc_breakpedal.h ****  *  Definition of function types for driver interfaces.
  36:bsw\rte/sc_breakpedal.h ****  *  I-Port
  37:bsw\rte/sc_breakpedal.h ****  */
  38:bsw\rte/sc_breakpedal.h **** typedef RC_t (*SC_BREAKPEDAL_driverIn_t)(SC_BREAKPEDAL_data_t * const);
  39:bsw\rte/sc_breakpedal.h **** 
  40:bsw\rte/sc_breakpedal.h **** /**
  41:bsw\rte/sc_breakpedal.h ****  *  Definition of function types for driver interfaces.
  42:bsw\rte/sc_breakpedal.h ****  *  O-Port
  43:bsw\rte/sc_breakpedal.h ****  */
  44:bsw\rte/sc_breakpedal.h **** typedef RC_t (*SC_BREAKPEDAL_driverOut_t)( const SC_BREAKPEDAL_data_t * const);
  45:bsw\rte/sc_breakpedal.h **** 
  46:bsw\rte/sc_breakpedal.h **** 
  47:bsw\rte/sc_breakpedal.h **** /**************************************************************************************************
  48:bsw\rte/sc_breakpedal.h **** /* The signal configuration API block																				*/
  49:bsw\rte/sc_breakpedal.h **** /**************************************************************************************************
  50:bsw\rte/sc_breakpedal.h **** 
  51:bsw\rte/sc_breakpedal.h **** /**
  52:bsw\rte/sc_breakpedal.h ****  * Instances of the struct SC_BREAKPEDAL_cfg_t represent the signal object configuration.
  53:bsw\rte/sc_breakpedal.h ****  */
  54:bsw\rte/sc_breakpedal.h **** struct SC_BREAKPEDAL_cfg_s
  55:bsw\rte/sc_breakpedal.h **** {
  56:bsw\rte/sc_breakpedal.h ****     /**
  57:bsw\rte/sc_breakpedal.h ****      * Function pointer to the input driver
  58:bsw\rte/sc_breakpedal.h ****      */
  59:bsw\rte/sc_breakpedal.h ****     SC_BREAKPEDAL_driverIn_t const inDriver;
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 22


  60:bsw\rte/sc_breakpedal.h **** 
  61:bsw\rte/sc_breakpedal.h ****     /**
  62:bsw\rte/sc_breakpedal.h ****      * Function pointer to the output driver table
  63:bsw\rte/sc_breakpedal.h ****      */
  64:bsw\rte/sc_breakpedal.h ****    SC_BREAKPEDAL_driverOut_t const outDriver;
  65:bsw\rte/sc_breakpedal.h ****    
  66:bsw\rte/sc_breakpedal.h ****     /**
  67:bsw\rte/sc_breakpedal.h ****      * Event onUpdate
  68:bsw\rte/sc_breakpedal.h ****      */
  69:bsw\rte/sc_breakpedal.h ****     EventMaskType const evOnUpdate;
  70:bsw\rte/sc_breakpedal.h ****     
  71:bsw\rte/sc_breakpedal.h ****     
  72:bsw\rte/sc_breakpedal.h ****     /**
  73:bsw\rte/sc_breakpedal.h ****      * Event onError
  74:bsw\rte/sc_breakpedal.h ****      */
  75:bsw\rte/sc_breakpedal.h ****     EventMaskType const evOnError;
  76:bsw\rte/sc_breakpedal.h ****     
  77:bsw\rte/sc_breakpedal.h ****     /**
  78:bsw\rte/sc_breakpedal.h ****      * Task Count onUpdate
  79:bsw\rte/sc_breakpedal.h ****      */
  80:bsw\rte/sc_breakpedal.h ****     size_t const onUpdateTaskCount;
  81:bsw\rte/sc_breakpedal.h **** 
  82:bsw\rte/sc_breakpedal.h ****     /**
  83:bsw\rte/sc_breakpedal.h ****      * Task List onUpdate
  84:bsw\rte/sc_breakpedal.h ****      */
  85:bsw\rte/sc_breakpedal.h ****     TaskTypeArray* const onUpdateTasks;
  86:bsw\rte/sc_breakpedal.h ****     
  87:bsw\rte/sc_breakpedal.h ****     /**
  88:bsw\rte/sc_breakpedal.h ****      * Task Count onError
  89:bsw\rte/sc_breakpedal.h ****      */
  90:bsw\rte/sc_breakpedal.h ****     size_t const onErrorTaskCount;
  91:bsw\rte/sc_breakpedal.h **** 
  92:bsw\rte/sc_breakpedal.h ****     /**
  93:bsw\rte/sc_breakpedal.h ****      * Task List onError
  94:bsw\rte/sc_breakpedal.h ****      */
  95:bsw\rte/sc_breakpedal.h ****     TaskTypeArray* const onErrorTasks;
  96:bsw\rte/sc_breakpedal.h **** 	
  97:bsw\rte/sc_breakpedal.h **** 	
  98:bsw\rte/sc_breakpedal.h **** 	/**
  99:bsw\rte/sc_breakpedal.h **** 	 * Ressourse is active? We need an additional boolean as a ressource value 0 is valid.
 100:bsw\rte/sc_breakpedal.h **** 	 */
 101:bsw\rte/sc_breakpedal.h **** 	 boolean_t const resourceActive;
 102:bsw\rte/sc_breakpedal.h **** 	 
 103:bsw\rte/sc_breakpedal.h **** 	/**
 104:bsw\rte/sc_breakpedal.h **** 	 * Ressourse 
 105:bsw\rte/sc_breakpedal.h **** 	 */
 106:bsw\rte/sc_breakpedal.h **** 	 ResourceType const resource;
 107:bsw\rte/sc_breakpedal.h **** 
 108:bsw\rte/sc_breakpedal.h **** };                                                                                                 
 109:bsw\rte/sc_breakpedal.h **** typedef const struct SC_BREAKPEDAL_cfg_s SC_BREAKPEDAL_cfg_t;
 110:bsw\rte/sc_breakpedal.h ****                               
 111:bsw\rte/sc_breakpedal.h **** /**************************************************************************************************
 112:bsw\rte/sc_breakpedal.h **** /* The data interface block																							*/
 113:bsw\rte/sc_breakpedal.h **** /**************************************************************************************************
 114:bsw\rte/sc_breakpedal.h **** 
 115:bsw\rte/sc_breakpedal.h ****                                                                                                    
 116:bsw\rte/sc_breakpedal.h **** 							  
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 23


 117:bsw\rte/sc_breakpedal.h **** /**
 118:bsw\rte/sc_breakpedal.h ****  * Instances of the struct SC_BREAKPEDAL_t represent the signal objects.
 119:bsw\rte/sc_breakpedal.h ****  * A signal object contains the current application value 'value' as well as relevant meta data.
 120:bsw\rte/sc_breakpedal.h ****  */
 121:bsw\rte/sc_breakpedal.h **** struct SC_BREAKPEDAL_s
 122:bsw\rte/sc_breakpedal.h **** {                                                                                                  
 123:bsw\rte/sc_breakpedal.h **** 
 124:bsw\rte/sc_breakpedal.h **** 	/**
 125:bsw\rte/sc_breakpedal.h **** 	 * Data buffer for the application value
 126:bsw\rte/sc_breakpedal.h **** 	 */
 127:bsw\rte/sc_breakpedal.h ****     SC_BREAKPEDAL_data_t value;
 128:bsw\rte/sc_breakpedal.h **** 
 129:bsw\rte/sc_breakpedal.h ****     /**
 130:bsw\rte/sc_breakpedal.h ****      * Current signal status
 131:bsw\rte/sc_breakpedal.h ****      */
 132:bsw\rte/sc_breakpedal.h ****     RTE_signalStatus_t status;
 133:bsw\rte/sc_breakpedal.h **** 
 134:bsw\rte/sc_breakpedal.h ****     /**
 135:bsw\rte/sc_breakpedal.h ****      * Current age of the signal (in calling cycles)
 136:bsw\rte/sc_breakpedal.h ****      */
 137:bsw\rte/sc_breakpedal.h ****     uint32_t age;
 138:bsw\rte/sc_breakpedal.h **** 
 139:bsw\rte/sc_breakpedal.h ****     /**
 140:bsw\rte/sc_breakpedal.h ****      * Pointer to the signal configuration
 141:bsw\rte/sc_breakpedal.h ****      */
 142:bsw\rte/sc_breakpedal.h **** 	const SC_BREAKPEDAL_cfg_t * const    pSigCfg;
 143:bsw\rte/sc_breakpedal.h **** 
 144:bsw\rte/sc_breakpedal.h **** };                                                                                                 
 145:bsw\rte/sc_breakpedal.h **** typedef struct SC_BREAKPEDAL_s SC_BREAKPEDAL_t;
 146:bsw\rte/sc_breakpedal.h **** 
 147:bsw\rte/sc_breakpedal.h **** /**************************************************************************************************
 148:bsw\rte/sc_breakpedal.h **** /* Signal initialisation   																							*/
 149:bsw\rte/sc_breakpedal.h **** /**************************************************************************************************
 150:bsw\rte/sc_breakpedal.h **** 
 151:bsw\rte/sc_breakpedal.h **** /**
 152:bsw\rte/sc_breakpedal.h ****  * Initializes a signal instance with a passed init value.
 153:bsw\rte/sc_breakpedal.h ****  * Depending on the configured conversion or scaling function the raw_value will be calculated.
 154:bsw\rte/sc_breakpedal.h ****  * Signal status will change from RTE_SIGNALSTATUS_STARTUP to RTE_SIGNALSTATUS_INITIALIZED.
 155:bsw\rte/sc_breakpedal.h ****  *
 156:bsw\rte/sc_breakpedal.h ****  * @param  SC_BREAKPEDAL_t * const signal: Pointer to the signal object which will be initialised
 157:bsw\rte/sc_breakpedal.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 158:bsw\rte/sc_breakpedal.h ****  *
 159:bsw\rte/sc_breakpedal.h ****  **/
 160:bsw\rte/sc_breakpedal.h **** inline RC_t RTE_SC_BREAKPEDAL_init( SC_BREAKPEDAL_t * const signal )
 161:bsw\rte/sc_breakpedal.h **** {                                                                                                  
 162:bsw\rte/sc_breakpedal.h **** 
 163:bsw\rte/sc_breakpedal.h ****    RC_t ret = RC_SUCCESS;
 164:bsw\rte/sc_breakpedal.h **** 
 165:bsw\rte/sc_breakpedal.h ****    //Set value and raw value
 166:bsw\rte/sc_breakpedal.h ****    signal->value  = SC_BREAKPEDAL_INIT_DATA;
 167:bsw\rte/sc_breakpedal.h ****    signal->age    = 0;
 168:bsw\rte/sc_breakpedal.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 169:bsw\rte/sc_breakpedal.h **** 
 170:bsw\rte/sc_breakpedal.h ****    return ret;
 171:bsw\rte/sc_breakpedal.h **** }
 172:bsw\rte/sc_breakpedal.h **** 
 173:bsw\rte/sc_breakpedal.h **** /**************************************************************************************************
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 24


 174:bsw\rte/sc_breakpedal.h **** /* Status and timeout control																						*/
 175:bsw\rte/sc_breakpedal.h **** /**************************************************************************************************
 176:bsw\rte/sc_breakpedal.h **** 
 177:bsw\rte/sc_breakpedal.h **** /**
 178:bsw\rte/sc_breakpedal.h ****  *  Returns the current signal status of the passed signal instance.
 179:bsw\rte/sc_breakpedal.h ****  *
 180:bsw\rte/sc_breakpedal.h ****  * @param  SC_BREAKPEDAL_t * const signal: Pointer to the signal object
 181:bsw\rte/sc_breakpedal.h ****  * @return  sig_status_t: The current signal status
 182:bsw\rte/sc_breakpedal.h ****  *
 183:bsw\rte/sc_breakpedal.h ****  **/
 184:bsw\rte/sc_breakpedal.h **** inline RTE_signalStatus_t RTE_SC_BREAKPEDAL_getStatus( const SC_BREAKPEDAL_t * const signal )
 185:bsw\rte/sc_breakpedal.h **** {
 186:bsw\rte/sc_breakpedal.h ****    return signal->status;
 187:bsw\rte/sc_breakpedal.h **** }
 188:bsw\rte/sc_breakpedal.h **** 
 189:bsw\rte/sc_breakpedal.h **** 
 190:bsw\rte/sc_breakpedal.h **** /**
 191:bsw\rte/sc_breakpedal.h ****  *  Sets a new signal status of the passed signal instance by passing the new status.
 192:bsw\rte/sc_breakpedal.h ****  *
 193:bsw\rte/sc_breakpedal.h ****  * @param  SC_BREAKPEDAL_t * const signal: Pointer to the signal object
 194:bsw\rte/sc_breakpedal.h ****  * @param  const sig_status_t status: New signal status
 195:bsw\rte/sc_breakpedal.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 196:bsw\rte/sc_breakpedal.h ****  *
 197:bsw\rte/sc_breakpedal.h ****  */
 198:bsw\rte/sc_breakpedal.h **** inline RC_t RTE_SC_BREAKPEDAL_setStatus( SC_BREAKPEDAL_t * const signal, const RTE_signalStatus_t s
 199:bsw\rte/sc_breakpedal.h **** {
 200:bsw\rte/sc_breakpedal.h ****    signal->status = status;
 201:bsw\rte/sc_breakpedal.h ****    size_t taskNum=0;
 202:bsw\rte/sc_breakpedal.h ****    
 203:bsw\rte/sc_breakpedal.h ****    //Fire error events in case of invalid state
 204:bsw\rte/sc_breakpedal.h ****    if (signal->status == RTE_SIGNALSTATUS_INVALID)
 205:bsw\rte/sc_breakpedal.h ****    {
 206:bsw\rte/sc_breakpedal.h **** 	    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 207:bsw\rte/sc_breakpedal.h **** 		TaskTypeArray* pTaskArray = signal->pSigCfg->onErrorTasks;
 208:bsw\rte/sc_breakpedal.h **** 
 209:bsw\rte/sc_breakpedal.h **** 		if (0 != signal->pSigCfg->evOnError && NULL != pTaskArray){
 210:bsw\rte/sc_breakpedal.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 211:bsw\rte/sc_breakpedal.h **** 				TaskType task = (*pTaskArray)[taskNum];
 212:bsw\rte/sc_breakpedal.h **** 				SetEvent( task, signal->pSigCfg->evOnError);
 213:bsw\rte/sc_breakpedal.h **** 			}
 214:bsw\rte/sc_breakpedal.h **** 		}
 215:bsw\rte/sc_breakpedal.h ****    }
 216:bsw\rte/sc_breakpedal.h ****    
 217:bsw\rte/sc_breakpedal.h ****    return RC_SUCCESS;
 218:bsw\rte/sc_breakpedal.h **** }
 219:bsw\rte/sc_breakpedal.h **** 
 220:bsw\rte/sc_breakpedal.h **** 
 221:bsw\rte/sc_breakpedal.h **** /**
 222:bsw\rte/sc_breakpedal.h ****  * Returns the count of refreshing trials (refresh, set or set_raw) that failed.
 223:bsw\rte/sc_breakpedal.h ****  * Prerquisite: The signal is refreshed cyclically
 224:bsw\rte/sc_breakpedal.h ****  *
 225:bsw\rte/sc_breakpedal.h ****  * @param  SC_BREAKPEDAL_t * const signal: Pointer to the signal object
 226:bsw\rte/sc_breakpedal.h ****  * @return uint32_t: Number of cycles since the signal has been updated for the last time
 227:bsw\rte/sc_breakpedal.h ****  */
 228:bsw\rte/sc_breakpedal.h **** inline uint32_t RTE_SC_BREAKPEDAL_getAge( const SC_BREAKPEDAL_t * const signal )
 229:bsw\rte/sc_breakpedal.h **** {
 230:bsw\rte/sc_breakpedal.h ****    return signal->age;
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 25


 231:bsw\rte/sc_breakpedal.h **** }
 232:bsw\rte/sc_breakpedal.h **** 
 233:bsw\rte/sc_breakpedal.h **** /**
 234:bsw\rte/sc_breakpedal.h ****  * Should be called by application or driver if no new value can be provided.
 235:bsw\rte/sc_breakpedal.h ****  * @param  SC_BREAKPEDAL_t * const signal: Pointer to the signal object
 236:bsw\rte/sc_breakpedal.h ****  * @param uint32_t increment: incrementvalue, typically in [ms]
 237:bsw\rte/sc_breakpedal.h ****  * @return void
 238:bsw\rte/sc_breakpedal.h ****  */
 239:bsw\rte/sc_breakpedal.h **** inline void RTE_SC_BREAKPEDAL_incAge(  SC_BREAKPEDAL_t * const signal , uint32_t increment)
 240:bsw\rte/sc_breakpedal.h **** {
 241:bsw\rte/sc_breakpedal.h **** 	   //Hack....
 242:bsw\rte/sc_breakpedal.h **** 	   if ( 0xFFFF0000 > (signal->age + increment) )
  85              		.loc 5 242 0
  86 0030 0C4B     		ldr	r3, .L8
  87 0032 9B6A     		ldr	r3, [r3, #40]
  88 0034 0344     		add	r3, r3, r0
  89 0036 13F1011F 		cmn	r3, #65537
  90 003a 01D8     		bhi	.L5
 243:bsw\rte/sc_breakpedal.h **** 	   {
 244:bsw\rte/sc_breakpedal.h **** 	      signal->age += increment;
  91              		.loc 5 244 0
  92 003c 094A     		ldr	r2, .L8
  93 003e 9362     		str	r3, [r2, #40]
  94              	.L5:
  95              	.LVL4:
  96              	.LBE33:
  97              	.LBE32:
  98              	.LBB34:
  99              	.LBB35:
 100              		.file 6 "bsw\\rte\\sc_breaklight.h"
   1:bsw\rte/sc_breaklight.h **** 
   2:bsw\rte/sc_breaklight.h **** 
   3:bsw\rte/sc_breaklight.h **** /**
   4:bsw\rte/sc_breaklight.h ****  *  file    SC_BREAKLIGHT_signal.h
   5:bsw\rte/sc_breaklight.h ****  *
   6:bsw\rte/sc_breaklight.h ****  *  brief   signal base class for signal sc_breaklight
   7:bsw\rte/sc_breaklight.h ****  *
   8:bsw\rte/sc_breaklight.h ****  *  author  Autogenerated, Peter Fromm       <peter.fromm@h-da.de>
   9:bsw\rte/sc_breaklight.h ****  *
  10:bsw\rte/sc_breaklight.h ****  * description: Break Light signal class
  11:bsw\rte/sc_breaklight.h ****  * name: sc_breakLight
  12:bsw\rte/sc_breaklight.h ****  * shortname: breakLight
  13:bsw\rte/sc_breaklight.h ****  *
  14:bsw\rte/sc_breaklight.h ****  */
  15:bsw\rte/sc_breaklight.h **** 
  16:bsw\rte/sc_breaklight.h **** 
  17:bsw\rte/sc_breaklight.h **** 
  18:bsw\rte/sc_breaklight.h **** #ifndef SC_BREAKLIGHT_SIGNAL_H_INCLUDED
  19:bsw\rte/sc_breaklight.h **** #define SC_BREAKLIGHT_SIGNAL_H_INCLUDED
  20:bsw\rte/sc_breaklight.h **** 
  21:bsw\rte/sc_breaklight.h **** /*================================================[ public includes  ]=============================
  22:bsw\rte/sc_breaklight.h **** #include "global.h"
  23:bsw\rte/sc_breaklight.h **** #include "project.h"
  24:bsw\rte/sc_breaklight.h **** #include "rte.h"
  25:bsw\rte/sc_breaklight.h **** #include "rte_types.h"
  26:bsw\rte/sc_breaklight.h **** 
  27:bsw\rte/sc_breaklight.h **** #include "sc_breaklight_type.h"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 26


  28:bsw\rte/sc_breaklight.h **** 
  29:bsw\rte/sc_breaklight.h **** 
  30:bsw\rte/sc_breaklight.h **** /**************************************************************************************************
  31:bsw\rte/sc_breaklight.h **** /* The driver API block																						*/
  32:bsw\rte/sc_breaklight.h **** /**************************************************************************************************
  33:bsw\rte/sc_breaklight.h ****                                                                                                    
  34:bsw\rte/sc_breaklight.h **** /**
  35:bsw\rte/sc_breaklight.h ****  *  Definition of function types for driver interfaces.
  36:bsw\rte/sc_breaklight.h ****  *  I-Port
  37:bsw\rte/sc_breaklight.h ****  */
  38:bsw\rte/sc_breaklight.h **** typedef RC_t (*SC_BREAKLIGHT_driverIn_t)(SC_BREAKLIGHT_data_t * const);
  39:bsw\rte/sc_breaklight.h **** 
  40:bsw\rte/sc_breaklight.h **** /**
  41:bsw\rte/sc_breaklight.h ****  *  Definition of function types for driver interfaces.
  42:bsw\rte/sc_breaklight.h ****  *  O-Port
  43:bsw\rte/sc_breaklight.h ****  */
  44:bsw\rte/sc_breaklight.h **** typedef RC_t (*SC_BREAKLIGHT_driverOut_t)( const SC_BREAKLIGHT_data_t * const);
  45:bsw\rte/sc_breaklight.h **** 
  46:bsw\rte/sc_breaklight.h **** 
  47:bsw\rte/sc_breaklight.h **** /**************************************************************************************************
  48:bsw\rte/sc_breaklight.h **** /* The signal configuration API block																				*/
  49:bsw\rte/sc_breaklight.h **** /**************************************************************************************************
  50:bsw\rte/sc_breaklight.h **** 
  51:bsw\rte/sc_breaklight.h **** /**
  52:bsw\rte/sc_breaklight.h ****  * Instances of the struct SC_BREAKLIGHT_cfg_t represent the signal object configuration.
  53:bsw\rte/sc_breaklight.h ****  */
  54:bsw\rte/sc_breaklight.h **** struct SC_BREAKLIGHT_cfg_s
  55:bsw\rte/sc_breaklight.h **** {
  56:bsw\rte/sc_breaklight.h ****     /**
  57:bsw\rte/sc_breaklight.h ****      * Function pointer to the input driver
  58:bsw\rte/sc_breaklight.h ****      */
  59:bsw\rte/sc_breaklight.h ****     SC_BREAKLIGHT_driverIn_t const inDriver;
  60:bsw\rte/sc_breaklight.h **** 
  61:bsw\rte/sc_breaklight.h ****     /**
  62:bsw\rte/sc_breaklight.h ****      * Function pointer to the output driver table
  63:bsw\rte/sc_breaklight.h ****      */
  64:bsw\rte/sc_breaklight.h ****    SC_BREAKLIGHT_driverOut_t const outDriver;
  65:bsw\rte/sc_breaklight.h ****    
  66:bsw\rte/sc_breaklight.h ****     /**
  67:bsw\rte/sc_breaklight.h ****      * Event onUpdate
  68:bsw\rte/sc_breaklight.h ****      */
  69:bsw\rte/sc_breaklight.h ****     EventMaskType const evOnUpdate;
  70:bsw\rte/sc_breaklight.h ****     
  71:bsw\rte/sc_breaklight.h ****     
  72:bsw\rte/sc_breaklight.h ****     /**
  73:bsw\rte/sc_breaklight.h ****      * Event onError
  74:bsw\rte/sc_breaklight.h ****      */
  75:bsw\rte/sc_breaklight.h ****     EventMaskType const evOnError;
  76:bsw\rte/sc_breaklight.h ****     
  77:bsw\rte/sc_breaklight.h ****     /**
  78:bsw\rte/sc_breaklight.h ****      * Task Count onUpdate
  79:bsw\rte/sc_breaklight.h ****      */
  80:bsw\rte/sc_breaklight.h ****     size_t const onUpdateTaskCount;
  81:bsw\rte/sc_breaklight.h **** 
  82:bsw\rte/sc_breaklight.h ****     /**
  83:bsw\rte/sc_breaklight.h ****      * Task List onUpdate
  84:bsw\rte/sc_breaklight.h ****      */
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 27


  85:bsw\rte/sc_breaklight.h ****     TaskTypeArray* const onUpdateTasks;
  86:bsw\rte/sc_breaklight.h ****     
  87:bsw\rte/sc_breaklight.h ****     /**
  88:bsw\rte/sc_breaklight.h ****      * Task Count onError
  89:bsw\rte/sc_breaklight.h ****      */
  90:bsw\rte/sc_breaklight.h ****     size_t const onErrorTaskCount;
  91:bsw\rte/sc_breaklight.h **** 
  92:bsw\rte/sc_breaklight.h ****     /**
  93:bsw\rte/sc_breaklight.h ****      * Task List onError
  94:bsw\rte/sc_breaklight.h ****      */
  95:bsw\rte/sc_breaklight.h ****     TaskTypeArray* const onErrorTasks;
  96:bsw\rte/sc_breaklight.h **** 	
  97:bsw\rte/sc_breaklight.h **** 	
  98:bsw\rte/sc_breaklight.h **** 	/**
  99:bsw\rte/sc_breaklight.h **** 	 * Ressourse is active? We need an additional boolean as a ressource value 0 is valid.
 100:bsw\rte/sc_breaklight.h **** 	 */
 101:bsw\rte/sc_breaklight.h **** 	 boolean_t const resourceActive;
 102:bsw\rte/sc_breaklight.h **** 	 
 103:bsw\rte/sc_breaklight.h **** 	/**
 104:bsw\rte/sc_breaklight.h **** 	 * Ressourse 
 105:bsw\rte/sc_breaklight.h **** 	 */
 106:bsw\rte/sc_breaklight.h **** 	 ResourceType const resource;
 107:bsw\rte/sc_breaklight.h **** 
 108:bsw\rte/sc_breaklight.h **** };                                                                                                 
 109:bsw\rte/sc_breaklight.h **** typedef const struct SC_BREAKLIGHT_cfg_s SC_BREAKLIGHT_cfg_t;
 110:bsw\rte/sc_breaklight.h ****                               
 111:bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 112:bsw\rte/sc_breaklight.h **** /* The data interface block																							*/
 113:bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 114:bsw\rte/sc_breaklight.h **** 
 115:bsw\rte/sc_breaklight.h ****                                                                                                    
 116:bsw\rte/sc_breaklight.h **** 							  
 117:bsw\rte/sc_breaklight.h **** /**
 118:bsw\rte/sc_breaklight.h ****  * Instances of the struct SC_BREAKLIGHT_t represent the signal objects.
 119:bsw\rte/sc_breaklight.h ****  * A signal object contains the current application value 'value' as well as relevant meta data.
 120:bsw\rte/sc_breaklight.h ****  */
 121:bsw\rte/sc_breaklight.h **** struct SC_BREAKLIGHT_s
 122:bsw\rte/sc_breaklight.h **** {                                                                                                  
 123:bsw\rte/sc_breaklight.h **** 
 124:bsw\rte/sc_breaklight.h **** 	/**
 125:bsw\rte/sc_breaklight.h **** 	 * Data buffer for the application value
 126:bsw\rte/sc_breaklight.h **** 	 */
 127:bsw\rte/sc_breaklight.h ****     SC_BREAKLIGHT_data_t value;
 128:bsw\rte/sc_breaklight.h **** 
 129:bsw\rte/sc_breaklight.h ****     /**
 130:bsw\rte/sc_breaklight.h ****      * Current signal status
 131:bsw\rte/sc_breaklight.h ****      */
 132:bsw\rte/sc_breaklight.h ****     RTE_signalStatus_t status;
 133:bsw\rte/sc_breaklight.h **** 
 134:bsw\rte/sc_breaklight.h ****     /**
 135:bsw\rte/sc_breaklight.h ****      * Current age of the signal (in calling cycles)
 136:bsw\rte/sc_breaklight.h ****      */
 137:bsw\rte/sc_breaklight.h ****     uint32_t age;
 138:bsw\rte/sc_breaklight.h **** 
 139:bsw\rte/sc_breaklight.h ****     /**
 140:bsw\rte/sc_breaklight.h ****      * Pointer to the signal configuration
 141:bsw\rte/sc_breaklight.h ****      */
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 28


 142:bsw\rte/sc_breaklight.h **** 	const SC_BREAKLIGHT_cfg_t * const    pSigCfg;
 143:bsw\rte/sc_breaklight.h **** 
 144:bsw\rte/sc_breaklight.h **** };                                                                                                 
 145:bsw\rte/sc_breaklight.h **** typedef struct SC_BREAKLIGHT_s SC_BREAKLIGHT_t;
 146:bsw\rte/sc_breaklight.h **** 
 147:bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 148:bsw\rte/sc_breaklight.h **** /* Signal initialisation   																							*/
 149:bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 150:bsw\rte/sc_breaklight.h **** 
 151:bsw\rte/sc_breaklight.h **** /**
 152:bsw\rte/sc_breaklight.h ****  * Initializes a signal instance with a passed init value.
 153:bsw\rte/sc_breaklight.h ****  * Depending on the configured conversion or scaling function the raw_value will be calculated.
 154:bsw\rte/sc_breaklight.h ****  * Signal status will change from RTE_SIGNALSTATUS_STARTUP to RTE_SIGNALSTATUS_INITIALIZED.
 155:bsw\rte/sc_breaklight.h ****  *
 156:bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object which will be initialised
 157:bsw\rte/sc_breaklight.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 158:bsw\rte/sc_breaklight.h ****  *
 159:bsw\rte/sc_breaklight.h ****  **/
 160:bsw\rte/sc_breaklight.h **** inline RC_t RTE_SC_BREAKLIGHT_init( SC_BREAKLIGHT_t * const signal )
 161:bsw\rte/sc_breaklight.h **** {                                                                                                  
 162:bsw\rte/sc_breaklight.h **** 
 163:bsw\rte/sc_breaklight.h ****    RC_t ret = RC_SUCCESS;
 164:bsw\rte/sc_breaklight.h **** 
 165:bsw\rte/sc_breaklight.h ****    //Set value and raw value
 166:bsw\rte/sc_breaklight.h ****    signal->value  = SC_BREAKLIGHT_INIT_DATA;
 167:bsw\rte/sc_breaklight.h ****    signal->age    = 0;
 168:bsw\rte/sc_breaklight.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 169:bsw\rte/sc_breaklight.h **** 
 170:bsw\rte/sc_breaklight.h ****    return ret;
 171:bsw\rte/sc_breaklight.h **** }
 172:bsw\rte/sc_breaklight.h **** 
 173:bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 174:bsw\rte/sc_breaklight.h **** /* Status and timeout control																						*/
 175:bsw\rte/sc_breaklight.h **** /**************************************************************************************************
 176:bsw\rte/sc_breaklight.h **** 
 177:bsw\rte/sc_breaklight.h **** /**
 178:bsw\rte/sc_breaklight.h ****  *  Returns the current signal status of the passed signal instance.
 179:bsw\rte/sc_breaklight.h ****  *
 180:bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 181:bsw\rte/sc_breaklight.h ****  * @return  sig_status_t: The current signal status
 182:bsw\rte/sc_breaklight.h ****  *
 183:bsw\rte/sc_breaklight.h ****  **/
 184:bsw\rte/sc_breaklight.h **** inline RTE_signalStatus_t RTE_SC_BREAKLIGHT_getStatus( const SC_BREAKLIGHT_t * const signal )
 185:bsw\rte/sc_breaklight.h **** {
 186:bsw\rte/sc_breaklight.h ****    return signal->status;
 187:bsw\rte/sc_breaklight.h **** }
 188:bsw\rte/sc_breaklight.h **** 
 189:bsw\rte/sc_breaklight.h **** 
 190:bsw\rte/sc_breaklight.h **** /**
 191:bsw\rte/sc_breaklight.h ****  *  Sets a new signal status of the passed signal instance by passing the new status.
 192:bsw\rte/sc_breaklight.h ****  *
 193:bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 194:bsw\rte/sc_breaklight.h ****  * @param  const sig_status_t status: New signal status
 195:bsw\rte/sc_breaklight.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 196:bsw\rte/sc_breaklight.h ****  *
 197:bsw\rte/sc_breaklight.h ****  */
 198:bsw\rte/sc_breaklight.h **** inline RC_t RTE_SC_BREAKLIGHT_setStatus( SC_BREAKLIGHT_t * const signal, const RTE_signalStatus_t s
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 29


 199:bsw\rte/sc_breaklight.h **** {
 200:bsw\rte/sc_breaklight.h ****    signal->status = status;
 201:bsw\rte/sc_breaklight.h ****    size_t taskNum=0;
 202:bsw\rte/sc_breaklight.h ****    
 203:bsw\rte/sc_breaklight.h ****    //Fire error events in case of invalid state
 204:bsw\rte/sc_breaklight.h ****    if (signal->status == RTE_SIGNALSTATUS_INVALID)
 205:bsw\rte/sc_breaklight.h ****    {
 206:bsw\rte/sc_breaklight.h **** 	    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 207:bsw\rte/sc_breaklight.h **** 		TaskTypeArray* pTaskArray = signal->pSigCfg->onErrorTasks;
 208:bsw\rte/sc_breaklight.h **** 
 209:bsw\rte/sc_breaklight.h **** 		if (0 != signal->pSigCfg->evOnError && NULL != pTaskArray){
 210:bsw\rte/sc_breaklight.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 211:bsw\rte/sc_breaklight.h **** 				TaskType task = (*pTaskArray)[taskNum];
 212:bsw\rte/sc_breaklight.h **** 				SetEvent( task, signal->pSigCfg->evOnError);
 213:bsw\rte/sc_breaklight.h **** 			}
 214:bsw\rte/sc_breaklight.h **** 		}
 215:bsw\rte/sc_breaklight.h ****    }
 216:bsw\rte/sc_breaklight.h ****    
 217:bsw\rte/sc_breaklight.h ****    return RC_SUCCESS;
 218:bsw\rte/sc_breaklight.h **** }
 219:bsw\rte/sc_breaklight.h **** 
 220:bsw\rte/sc_breaklight.h **** 
 221:bsw\rte/sc_breaklight.h **** /**
 222:bsw\rte/sc_breaklight.h ****  * Returns the count of refreshing trials (refresh, set or set_raw) that failed.
 223:bsw\rte/sc_breaklight.h ****  * Prerquisite: The signal is refreshed cyclically
 224:bsw\rte/sc_breaklight.h ****  *
 225:bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 226:bsw\rte/sc_breaklight.h ****  * @return uint32_t: Number of cycles since the signal has been updated for the last time
 227:bsw\rte/sc_breaklight.h ****  */
 228:bsw\rte/sc_breaklight.h **** inline uint32_t RTE_SC_BREAKLIGHT_getAge( const SC_BREAKLIGHT_t * const signal )
 229:bsw\rte/sc_breaklight.h **** {
 230:bsw\rte/sc_breaklight.h ****    return signal->age;
 231:bsw\rte/sc_breaklight.h **** }
 232:bsw\rte/sc_breaklight.h **** 
 233:bsw\rte/sc_breaklight.h **** /**
 234:bsw\rte/sc_breaklight.h ****  * Should be called by application or driver if no new value can be provided.
 235:bsw\rte/sc_breaklight.h ****  * @param  SC_BREAKLIGHT_t * const signal: Pointer to the signal object
 236:bsw\rte/sc_breaklight.h ****  * @param uint32_t increment: incrementvalue, typically in [ms]
 237:bsw\rte/sc_breaklight.h ****  * @return void
 238:bsw\rte/sc_breaklight.h ****  */
 239:bsw\rte/sc_breaklight.h **** inline void RTE_SC_BREAKLIGHT_incAge(  SC_BREAKLIGHT_t * const signal , uint32_t increment)
 240:bsw\rte/sc_breaklight.h **** {
 241:bsw\rte/sc_breaklight.h **** 	   //Hack....
 242:bsw\rte/sc_breaklight.h **** 	   if ( 0xFFFF0000 > (signal->age + increment) )
 101              		.loc 6 242 0
 102 0040 084B     		ldr	r3, .L8
 103 0042 5B6B     		ldr	r3, [r3, #52]
 104 0044 0344     		add	r3, r3, r0
 105 0046 13F1011F 		cmn	r3, #65537
 106 004a 01D8     		bhi	.L6
 243:bsw\rte/sc_breaklight.h **** 	   {
 244:bsw\rte/sc_breaklight.h **** 	      signal->age += increment;
 107              		.loc 6 244 0
 108 004c 054A     		ldr	r2, .L8
 109 004e 5363     		str	r3, [r2, #52]
 110              	.L6:
 111              	.LVL5:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 30


 112              	.LBE35:
 113              	.LBE34:
 114              	.LBB36:
 115              	.LBB37:
 116              		.file 7 "bsw\\rte\\sc_screen.h"
   1:bsw\rte/sc_screen.h **** 
   2:bsw\rte/sc_screen.h **** 
   3:bsw\rte/sc_screen.h **** /**
   4:bsw\rte/sc_screen.h ****  *  file    SC_SCREEN_signal.h
   5:bsw\rte/sc_screen.h ****  *
   6:bsw\rte/sc_screen.h ****  *  brief   signal base class for signal sc_screen
   7:bsw\rte/sc_screen.h ****  *
   8:bsw\rte/sc_screen.h ****  *  author  Autogenerated, Peter Fromm       <peter.fromm@h-da.de>
   9:bsw\rte/sc_screen.h ****  *
  10:bsw\rte/sc_screen.h ****  * description: Signal for displaying on screen
  11:bsw\rte/sc_screen.h ****  * name: sc_screen
  12:bsw\rte/sc_screen.h ****  * shortname: screen
  13:bsw\rte/sc_screen.h ****  *
  14:bsw\rte/sc_screen.h ****  */
  15:bsw\rte/sc_screen.h **** 
  16:bsw\rte/sc_screen.h **** 
  17:bsw\rte/sc_screen.h **** 
  18:bsw\rte/sc_screen.h **** #ifndef SC_SCREEN_SIGNAL_H_INCLUDED
  19:bsw\rte/sc_screen.h **** #define SC_SCREEN_SIGNAL_H_INCLUDED
  20:bsw\rte/sc_screen.h **** 
  21:bsw\rte/sc_screen.h **** /*================================================[ public includes  ]=============================
  22:bsw\rte/sc_screen.h **** #include "global.h"
  23:bsw\rte/sc_screen.h **** #include "project.h"
  24:bsw\rte/sc_screen.h **** #include "rte.h"
  25:bsw\rte/sc_screen.h **** #include "rte_types.h"
  26:bsw\rte/sc_screen.h **** 
  27:bsw\rte/sc_screen.h **** #include "sc_screen_type.h"
  28:bsw\rte/sc_screen.h **** 
  29:bsw\rte/sc_screen.h **** 
  30:bsw\rte/sc_screen.h **** /**************************************************************************************************
  31:bsw\rte/sc_screen.h **** /* The driver API block																						*/
  32:bsw\rte/sc_screen.h **** /**************************************************************************************************
  33:bsw\rte/sc_screen.h ****                                                                                                    
  34:bsw\rte/sc_screen.h **** /**
  35:bsw\rte/sc_screen.h ****  *  Definition of function types for driver interfaces.
  36:bsw\rte/sc_screen.h ****  *  I-Port
  37:bsw\rte/sc_screen.h ****  */
  38:bsw\rte/sc_screen.h **** typedef RC_t (*SC_SCREEN_driverIn_t)(SC_SCREEN_data_t * const);
  39:bsw\rte/sc_screen.h **** 
  40:bsw\rte/sc_screen.h **** /**
  41:bsw\rte/sc_screen.h ****  *  Definition of function types for driver interfaces.
  42:bsw\rte/sc_screen.h ****  *  O-Port
  43:bsw\rte/sc_screen.h ****  */
  44:bsw\rte/sc_screen.h **** typedef RC_t (*SC_SCREEN_driverOut_t)( const SC_SCREEN_data_t * const);
  45:bsw\rte/sc_screen.h **** 
  46:bsw\rte/sc_screen.h **** 
  47:bsw\rte/sc_screen.h **** /**************************************************************************************************
  48:bsw\rte/sc_screen.h **** /* The signal configuration API block																				*/
  49:bsw\rte/sc_screen.h **** /**************************************************************************************************
  50:bsw\rte/sc_screen.h **** 
  51:bsw\rte/sc_screen.h **** /**
  52:bsw\rte/sc_screen.h ****  * Instances of the struct SC_SCREEN_cfg_t represent the signal object configuration.
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 31


  53:bsw\rte/sc_screen.h ****  */
  54:bsw\rte/sc_screen.h **** struct SC_SCREEN_cfg_s
  55:bsw\rte/sc_screen.h **** {
  56:bsw\rte/sc_screen.h ****     /**
  57:bsw\rte/sc_screen.h ****      * Function pointer to the input driver
  58:bsw\rte/sc_screen.h ****      */
  59:bsw\rte/sc_screen.h ****     SC_SCREEN_driverIn_t const inDriver;
  60:bsw\rte/sc_screen.h **** 
  61:bsw\rte/sc_screen.h ****     /**
  62:bsw\rte/sc_screen.h ****      * Function pointer to the output driver table
  63:bsw\rte/sc_screen.h ****      */
  64:bsw\rte/sc_screen.h ****    SC_SCREEN_driverOut_t const outDriver;
  65:bsw\rte/sc_screen.h ****    
  66:bsw\rte/sc_screen.h ****     /**
  67:bsw\rte/sc_screen.h ****      * Event onUpdate
  68:bsw\rte/sc_screen.h ****      */
  69:bsw\rte/sc_screen.h ****     EventMaskType const evOnUpdate;
  70:bsw\rte/sc_screen.h ****     
  71:bsw\rte/sc_screen.h ****     
  72:bsw\rte/sc_screen.h ****     /**
  73:bsw\rte/sc_screen.h ****      * Event onError
  74:bsw\rte/sc_screen.h ****      */
  75:bsw\rte/sc_screen.h ****     EventMaskType const evOnError;
  76:bsw\rte/sc_screen.h ****     
  77:bsw\rte/sc_screen.h ****     /**
  78:bsw\rte/sc_screen.h ****      * Task Count onUpdate
  79:bsw\rte/sc_screen.h ****      */
  80:bsw\rte/sc_screen.h ****     size_t const onUpdateTaskCount;
  81:bsw\rte/sc_screen.h **** 
  82:bsw\rte/sc_screen.h ****     /**
  83:bsw\rte/sc_screen.h ****      * Task List onUpdate
  84:bsw\rte/sc_screen.h ****      */
  85:bsw\rte/sc_screen.h ****     TaskTypeArray* const onUpdateTasks;
  86:bsw\rte/sc_screen.h ****     
  87:bsw\rte/sc_screen.h ****     /**
  88:bsw\rte/sc_screen.h ****      * Task Count onError
  89:bsw\rte/sc_screen.h ****      */
  90:bsw\rte/sc_screen.h ****     size_t const onErrorTaskCount;
  91:bsw\rte/sc_screen.h **** 
  92:bsw\rte/sc_screen.h ****     /**
  93:bsw\rte/sc_screen.h ****      * Task List onError
  94:bsw\rte/sc_screen.h ****      */
  95:bsw\rte/sc_screen.h ****     TaskTypeArray* const onErrorTasks;
  96:bsw\rte/sc_screen.h **** 	
  97:bsw\rte/sc_screen.h **** 	
  98:bsw\rte/sc_screen.h **** 	/**
  99:bsw\rte/sc_screen.h **** 	 * Ressourse is active? We need an additional boolean as a ressource value 0 is valid.
 100:bsw\rte/sc_screen.h **** 	 */
 101:bsw\rte/sc_screen.h **** 	 boolean_t const resourceActive;
 102:bsw\rte/sc_screen.h **** 	 
 103:bsw\rte/sc_screen.h **** 	/**
 104:bsw\rte/sc_screen.h **** 	 * Ressourse 
 105:bsw\rte/sc_screen.h **** 	 */
 106:bsw\rte/sc_screen.h **** 	 ResourceType const resource;
 107:bsw\rte/sc_screen.h **** 
 108:bsw\rte/sc_screen.h **** };                                                                                                 
 109:bsw\rte/sc_screen.h **** typedef const struct SC_SCREEN_cfg_s SC_SCREEN_cfg_t;
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 32


 110:bsw\rte/sc_screen.h ****                               
 111:bsw\rte/sc_screen.h **** /**************************************************************************************************
 112:bsw\rte/sc_screen.h **** /* The data interface block																							*/
 113:bsw\rte/sc_screen.h **** /**************************************************************************************************
 114:bsw\rte/sc_screen.h **** 
 115:bsw\rte/sc_screen.h ****                                                                                                    
 116:bsw\rte/sc_screen.h **** 							  
 117:bsw\rte/sc_screen.h **** /**
 118:bsw\rte/sc_screen.h ****  * Instances of the struct SC_SCREEN_t represent the signal objects.
 119:bsw\rte/sc_screen.h ****  * A signal object contains the current application value 'value' as well as relevant meta data.
 120:bsw\rte/sc_screen.h ****  */
 121:bsw\rte/sc_screen.h **** struct SC_SCREEN_s
 122:bsw\rte/sc_screen.h **** {                                                                                                  
 123:bsw\rte/sc_screen.h **** 
 124:bsw\rte/sc_screen.h **** 	/**
 125:bsw\rte/sc_screen.h **** 	 * Data buffer for the application value
 126:bsw\rte/sc_screen.h **** 	 */
 127:bsw\rte/sc_screen.h ****     SC_SCREEN_data_t value;
 128:bsw\rte/sc_screen.h **** 
 129:bsw\rte/sc_screen.h ****     /**
 130:bsw\rte/sc_screen.h ****      * Current signal status
 131:bsw\rte/sc_screen.h ****      */
 132:bsw\rte/sc_screen.h ****     RTE_signalStatus_t status;
 133:bsw\rte/sc_screen.h **** 
 134:bsw\rte/sc_screen.h ****     /**
 135:bsw\rte/sc_screen.h ****      * Current age of the signal (in calling cycles)
 136:bsw\rte/sc_screen.h ****      */
 137:bsw\rte/sc_screen.h ****     uint32_t age;
 138:bsw\rte/sc_screen.h **** 
 139:bsw\rte/sc_screen.h ****     /**
 140:bsw\rte/sc_screen.h ****      * Pointer to the signal configuration
 141:bsw\rte/sc_screen.h ****      */
 142:bsw\rte/sc_screen.h **** 	const SC_SCREEN_cfg_t * const    pSigCfg;
 143:bsw\rte/sc_screen.h **** 
 144:bsw\rte/sc_screen.h **** };                                                                                                 
 145:bsw\rte/sc_screen.h **** typedef struct SC_SCREEN_s SC_SCREEN_t;
 146:bsw\rte/sc_screen.h **** 
 147:bsw\rte/sc_screen.h **** /**************************************************************************************************
 148:bsw\rte/sc_screen.h **** /* Signal initialisation   																							*/
 149:bsw\rte/sc_screen.h **** /**************************************************************************************************
 150:bsw\rte/sc_screen.h **** 
 151:bsw\rte/sc_screen.h **** /**
 152:bsw\rte/sc_screen.h ****  * Initializes a signal instance with a passed init value.
 153:bsw\rte/sc_screen.h ****  * Depending on the configured conversion or scaling function the raw_value will be calculated.
 154:bsw\rte/sc_screen.h ****  * Signal status will change from RTE_SIGNALSTATUS_STARTUP to RTE_SIGNALSTATUS_INITIALIZED.
 155:bsw\rte/sc_screen.h ****  *
 156:bsw\rte/sc_screen.h ****  * @param  SC_SCREEN_t * const signal: Pointer to the signal object which will be initialised
 157:bsw\rte/sc_screen.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 158:bsw\rte/sc_screen.h ****  *
 159:bsw\rte/sc_screen.h ****  **/
 160:bsw\rte/sc_screen.h **** inline RC_t RTE_SC_SCREEN_init( SC_SCREEN_t * const signal )
 161:bsw\rte/sc_screen.h **** {                                                                                                  
 162:bsw\rte/sc_screen.h **** 
 163:bsw\rte/sc_screen.h ****    RC_t ret = RC_SUCCESS;
 164:bsw\rte/sc_screen.h **** 
 165:bsw\rte/sc_screen.h ****    //Set value and raw value
 166:bsw\rte/sc_screen.h ****    signal->value  = SC_SCREEN_INIT_DATA;
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 33


 167:bsw\rte/sc_screen.h ****    signal->age    = 0;
 168:bsw\rte/sc_screen.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 169:bsw\rte/sc_screen.h **** 
 170:bsw\rte/sc_screen.h ****    return ret;
 171:bsw\rte/sc_screen.h **** }
 172:bsw\rte/sc_screen.h **** 
 173:bsw\rte/sc_screen.h **** /**************************************************************************************************
 174:bsw\rte/sc_screen.h **** /* Status and timeout control																						*/
 175:bsw\rte/sc_screen.h **** /**************************************************************************************************
 176:bsw\rte/sc_screen.h **** 
 177:bsw\rte/sc_screen.h **** /**
 178:bsw\rte/sc_screen.h ****  *  Returns the current signal status of the passed signal instance.
 179:bsw\rte/sc_screen.h ****  *
 180:bsw\rte/sc_screen.h ****  * @param  SC_SCREEN_t * const signal: Pointer to the signal object
 181:bsw\rte/sc_screen.h ****  * @return  sig_status_t: The current signal status
 182:bsw\rte/sc_screen.h ****  *
 183:bsw\rte/sc_screen.h ****  **/
 184:bsw\rte/sc_screen.h **** inline RTE_signalStatus_t RTE_SC_SCREEN_getStatus( const SC_SCREEN_t * const signal )
 185:bsw\rte/sc_screen.h **** {
 186:bsw\rte/sc_screen.h ****    return signal->status;
 187:bsw\rte/sc_screen.h **** }
 188:bsw\rte/sc_screen.h **** 
 189:bsw\rte/sc_screen.h **** 
 190:bsw\rte/sc_screen.h **** /**
 191:bsw\rte/sc_screen.h ****  *  Sets a new signal status of the passed signal instance by passing the new status.
 192:bsw\rte/sc_screen.h ****  *
 193:bsw\rte/sc_screen.h ****  * @param  SC_SCREEN_t * const signal: Pointer to the signal object
 194:bsw\rte/sc_screen.h ****  * @param  const sig_status_t status: New signal status
 195:bsw\rte/sc_screen.h ****  * @return RC_t: standard return code, currently only RC_SUCCESS
 196:bsw\rte/sc_screen.h ****  *
 197:bsw\rte/sc_screen.h ****  */
 198:bsw\rte/sc_screen.h **** inline RC_t RTE_SC_SCREEN_setStatus( SC_SCREEN_t * const signal, const RTE_signalStatus_t status )
 199:bsw\rte/sc_screen.h **** {
 200:bsw\rte/sc_screen.h ****    signal->status = status;
 201:bsw\rte/sc_screen.h ****    size_t taskNum=0;
 202:bsw\rte/sc_screen.h ****    
 203:bsw\rte/sc_screen.h ****    //Fire error events in case of invalid state
 204:bsw\rte/sc_screen.h ****    if (signal->status == RTE_SIGNALSTATUS_INVALID)
 205:bsw\rte/sc_screen.h ****    {
 206:bsw\rte/sc_screen.h **** 	    //Pointer to the Taskarray, containing the tasks receiving the onUpdate events
 207:bsw\rte/sc_screen.h **** 		TaskTypeArray* pTaskArray = signal->pSigCfg->onErrorTasks;
 208:bsw\rte/sc_screen.h **** 
 209:bsw\rte/sc_screen.h **** 		if (0 != signal->pSigCfg->evOnError && NULL != pTaskArray){
 210:bsw\rte/sc_screen.h **** 			for( taskNum=0 ; taskNum < signal->pSigCfg->onErrorTaskCount ;taskNum++){
 211:bsw\rte/sc_screen.h **** 				TaskType task = (*pTaskArray)[taskNum];
 212:bsw\rte/sc_screen.h **** 				SetEvent( task, signal->pSigCfg->evOnError);
 213:bsw\rte/sc_screen.h **** 			}
 214:bsw\rte/sc_screen.h **** 		}
 215:bsw\rte/sc_screen.h ****    }
 216:bsw\rte/sc_screen.h ****    
 217:bsw\rte/sc_screen.h ****    return RC_SUCCESS;
 218:bsw\rte/sc_screen.h **** }
 219:bsw\rte/sc_screen.h **** 
 220:bsw\rte/sc_screen.h **** 
 221:bsw\rte/sc_screen.h **** /**
 222:bsw\rte/sc_screen.h ****  * Returns the count of refreshing trials (refresh, set or set_raw) that failed.
 223:bsw\rte/sc_screen.h ****  * Prerquisite: The signal is refreshed cyclically
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 34


 224:bsw\rte/sc_screen.h ****  *
 225:bsw\rte/sc_screen.h ****  * @param  SC_SCREEN_t * const signal: Pointer to the signal object
 226:bsw\rte/sc_screen.h ****  * @return uint32_t: Number of cycles since the signal has been updated for the last time
 227:bsw\rte/sc_screen.h ****  */
 228:bsw\rte/sc_screen.h **** inline uint32_t RTE_SC_SCREEN_getAge( const SC_SCREEN_t * const signal )
 229:bsw\rte/sc_screen.h **** {
 230:bsw\rte/sc_screen.h ****    return signal->age;
 231:bsw\rte/sc_screen.h **** }
 232:bsw\rte/sc_screen.h **** 
 233:bsw\rte/sc_screen.h **** /**
 234:bsw\rte/sc_screen.h ****  * Should be called by application or driver if no new value can be provided.
 235:bsw\rte/sc_screen.h ****  * @param  SC_SCREEN_t * const signal: Pointer to the signal object
 236:bsw\rte/sc_screen.h ****  * @param uint32_t increment: incrementvalue, typically in [ms]
 237:bsw\rte/sc_screen.h ****  * @return void
 238:bsw\rte/sc_screen.h ****  */
 239:bsw\rte/sc_screen.h **** inline void RTE_SC_SCREEN_incAge(  SC_SCREEN_t * const signal , uint32_t increment)
 240:bsw\rte/sc_screen.h **** {
 241:bsw\rte/sc_screen.h **** 	   //Hack....
 242:bsw\rte/sc_screen.h **** 	   if ( 0xFFFF0000 > (signal->age + increment) )
 117              		.loc 7 242 0
 118 0050 044B     		ldr	r3, .L8
 119 0052 1B6C     		ldr	r3, [r3, #64]
 120 0054 1844     		add	r0, r0, r3
 121              	.LVL6:
 122 0056 10F1011F 		cmn	r0, #65537
 123 005a 01D8     		bhi	.L1
 243:bsw\rte/sc_screen.h **** 	   {
 244:bsw\rte/sc_screen.h **** 	      signal->age += increment;
 124              		.loc 7 244 0
 125 005c 014B     		ldr	r3, .L8
 126 005e 1864     		str	r0, [r3, #64]
 127              	.LVL7:
 128              	.L1:
 129 0060 7047     		bx	lr
 130              	.L9:
 131 0062 00BF     		.align	2
 132              	.L8:
 133 0064 00000000 		.word	.LANCHOR0
 134              	.LBE37:
 135              	.LBE36:
 136              		.cfi_endproc
 137              	.LFE180:
 138              		.size	RTE_timertick_sp_common_tick, .-RTE_timertick_sp_common_tick
 139              		.section	.text.RTE_reset_sp_common,"ax",%progbits
 140              		.align	2
 141              		.global	RTE_reset_sp_common
 142              		.thumb
 143              		.thumb_func
 144              		.type	RTE_reset_sp_common, %function
 145              	RTE_reset_sp_common:
 146              	.LFB181:
 323:bsw\rte/sp_common.c ****    RTE_SC_JOYSTICK_incAge( &SO_JOYSTICK_signal, tick); 
 324:bsw\rte/sp_common.c ****    RTE_SC_SPEED_incAge( &SO_SPEED_signal, tick); 
 325:bsw\rte/sp_common.c ****    RTE_SC_ENGINE_incAge( &SO_ENGINE_signal, tick); 
 326:bsw\rte/sp_common.c ****    RTE_SC_BREAKPEDAL_incAge( &SO_BREAKPEDAL_signal, tick); 
 327:bsw\rte/sp_common.c ****    RTE_SC_BREAKLIGHT_incAge( &SO_BREAKLIGHT_signal, tick); 
 328:bsw\rte/sp_common.c ****    RTE_SC_SCREEN_incAge( &SO_SCREEN_signal, tick); 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 35


 329:bsw\rte/sp_common.c ****    
 330:bsw\rte/sp_common.c **** }
 331:bsw\rte/sp_common.c **** 
 332:bsw\rte/sp_common.c **** /*
 333:bsw\rte/sp_common.c ****  * Reset all signals in this pool
 334:bsw\rte/sp_common.c ****  */
 335:bsw\rte/sp_common.c **** void RTE_reset_sp_common(){
 147              		.loc 1 335 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 152              	.LVL8:
 153              	.LBB38:
 154              	.LBB39:
 166:bsw\rte/sc_joystick.h ****    signal->age    = 0;
 155              		.loc 2 166 0
 156 0000 0E4B     		ldr	r3, .L11
 157 0002 0022     		movs	r2, #0
 158 0004 1A70     		strb	r2, [r3]
 159 0006 5A70     		strb	r2, [r3, #1]
 167:bsw\rte/sc_joystick.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 160              		.loc 2 167 0
 161 0008 5A60     		str	r2, [r3, #4]
 168:bsw\rte/sc_joystick.h **** 
 162              		.loc 2 168 0
 163 000a 0121     		movs	r1, #1
 164 000c 9970     		strb	r1, [r3, #2]
 165              	.LVL9:
 166              	.LBE39:
 167              	.LBE38:
 168              	.LBB40:
 169              	.LBB41:
 166:bsw\rte/sc_speed.h ****    signal->age    = 0;
 170              		.loc 3 166 0
 171 000e 1A73     		strb	r2, [r3, #12]
 167:bsw\rte/sc_speed.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 172              		.loc 3 167 0
 173 0010 1A61     		str	r2, [r3, #16]
 168:bsw\rte/sc_speed.h **** 
 174              		.loc 3 168 0
 175 0012 5973     		strb	r1, [r3, #13]
 176              	.LVL10:
 177              	.LBE41:
 178              	.LBE40:
 179              	.LBB42:
 180              	.LBB43:
 166:bsw\rte/sc_engine.h ****    signal->age    = 0;
 181              		.loc 4 166 0
 182 0014 1A76     		strb	r2, [r3, #24]
 167:bsw\rte/sc_engine.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 183              		.loc 4 167 0
 184 0016 DA61     		str	r2, [r3, #28]
 168:bsw\rte/sc_engine.h **** 
 185              		.loc 4 168 0
 186 0018 5976     		strb	r1, [r3, #25]
 187              	.LVL11:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 36


 188              	.LBE43:
 189              	.LBE42:
 190              	.LBB44:
 191              	.LBB45:
 166:bsw\rte/sc_breakpedal.h ****    signal->age    = 0;
 192              		.loc 5 166 0
 193 001a 83F82420 		strb	r2, [r3, #36]
 167:bsw\rte/sc_breakpedal.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 194              		.loc 5 167 0
 195 001e 9A62     		str	r2, [r3, #40]
 168:bsw\rte/sc_breakpedal.h **** 
 196              		.loc 5 168 0
 197 0020 83F82510 		strb	r1, [r3, #37]
 198              	.LVL12:
 199              	.LBE45:
 200              	.LBE44:
 201              	.LBB46:
 202              	.LBB47:
 166:bsw\rte/sc_breaklight.h ****    signal->age    = 0;
 203              		.loc 6 166 0
 204 0024 83F83020 		strb	r2, [r3, #48]
 167:bsw\rte/sc_breaklight.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 205              		.loc 6 167 0
 206 0028 5A63     		str	r2, [r3, #52]
 168:bsw\rte/sc_breaklight.h **** 
 207              		.loc 6 168 0
 208 002a 83F83110 		strb	r1, [r3, #49]
 209              	.LVL13:
 210              	.LBE47:
 211              	.LBE46:
 212              	.LBB48:
 213              	.LBB49:
 166:bsw\rte/sc_screen.h ****    signal->age    = 0;
 214              		.loc 7 166 0
 215 002e 83F83C20 		strb	r2, [r3, #60]
 167:bsw\rte/sc_screen.h ****    signal->status = RTE_SIGNALSTATUS_INITIALIZED;
 216              		.loc 7 167 0
 217 0032 1A64     		str	r2, [r3, #64]
 168:bsw\rte/sc_screen.h **** 
 218              		.loc 7 168 0
 219 0034 83F83D10 		strb	r1, [r3, #61]
 220              	.LVL14:
 221 0038 7047     		bx	lr
 222              	.L12:
 223 003a 00BF     		.align	2
 224              	.L11:
 225 003c 00000000 		.word	.LANCHOR0
 226              	.LBE49:
 227              	.LBE48:
 228              		.cfi_endproc
 229              	.LFE181:
 230              		.size	RTE_reset_sp_common, .-RTE_reset_sp_common
 231              		.global	SO_SCREEN_signal
 232              		.global	so_screen_updTasks
 233              		.global	SO_BREAKLIGHT_signal
 234              		.global	SO_BREAKPEDAL_signal
 235              		.global	so_breakPedal_updTasks
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 37


 236              		.global	SO_ENGINE_signal
 237              		.global	SO_SPEED_signal
 238              		.global	so_speed_updTasks
 239              		.global	SO_JOYSTICK_signal
 240              		.global	so_joystick_updTasks
 241              		.section	.rodata
 242              		.align	2
 243              		.type	SO_SCREEN_cfg, %object
 244              		.size	SO_SCREEN_cfg, 40
 245              	SO_SCREEN_cfg:
 246 0000 00000000 		.word	0
 247 0004 00000000 		.word	SC_SCREEN_driverOut
 248 0008 08000000 		.word	8
 249 000c 00000000 		.word	0
 250 0010 02000000 		.word	2
 251 0014 00000000 		.word	so_screen_updTasks
 252 0018 00000000 		.word	0
 253 001c 00000000 		.word	0
 254 0020 00       		.byte	0
 255 0021 000000   		.space	3
 256 0024 00000000 		.word	0
 257              		.type	so_screen_updTasks, %object
 258              		.size	so_screen_updTasks, 8
 259              	so_screen_updTasks:
 260 0028 03000000 		.word	3
 261 002c 05000000 		.word	5
 262              		.type	SO_BREAKLIGHT_cfg, %object
 263              		.size	SO_BREAKLIGHT_cfg, 40
 264              	SO_BREAKLIGHT_cfg:
 265 0030 00000000 		.word	0
 266 0034 00000000 		.word	SC_BREAKLIGHT_driverOut
 267 0038 00000000 		.word	0
 268 003c 00000000 		.word	0
 269 0040 00000000 		.word	0
 270 0044 00000000 		.word	0
 271 0048 00000000 		.word	0
 272 004c 00000000 		.word	0
 273 0050 00       		.byte	0
 274 0051 000000   		.space	3
 275 0054 00000000 		.word	0
 276              		.type	SO_BREAKPEDAL_cfg, %object
 277              		.size	SO_BREAKPEDAL_cfg, 40
 278              	SO_BREAKPEDAL_cfg:
 279 0058 00000000 		.word	SC_BREAKPEDAL_driverIn
 280 005c 00000000 		.word	0
 281 0060 04000000 		.word	4
 282 0064 00000000 		.word	0
 283 0068 02000000 		.word	2
 284 006c 00000000 		.word	so_breakPedal_updTasks
 285 0070 00000000 		.word	0
 286 0074 00000000 		.word	0
 287 0078 00       		.byte	0
 288 0079 000000   		.space	3
 289 007c 00000000 		.word	0
 290              		.type	so_breakPedal_updTasks, %object
 291              		.size	so_breakPedal_updTasks, 8
 292              	so_breakPedal_updTasks:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 38


 293 0080 03000000 		.word	3
 294 0084 02000000 		.word	2
 295              		.type	SO_ENGINE_cfg, %object
 296              		.size	SO_ENGINE_cfg, 40
 297              	SO_ENGINE_cfg:
 298 0088 00000000 		.word	0
 299 008c 00000000 		.word	SC_ENGINE_driverOut
 300 0090 00000000 		.word	0
 301 0094 00000000 		.word	0
 302 0098 00000000 		.word	0
 303 009c 00000000 		.word	0
 304 00a0 00000000 		.word	0
 305 00a4 00000000 		.word	0
 306 00a8 00       		.byte	0
 307 00a9 000000   		.space	3
 308 00ac 00000000 		.word	0
 309              		.type	SO_SPEED_cfg, %object
 310              		.size	SO_SPEED_cfg, 40
 311              	SO_SPEED_cfg:
 312 00b0 00000000 		.word	0
 313 00b4 00000000 		.word	0
 314 00b8 10000000 		.word	16
 315 00bc 00000000 		.word	0
 316 00c0 01000000 		.word	1
 317 00c4 00000000 		.word	so_speed_updTasks
 318 00c8 00000000 		.word	0
 319 00cc 00000000 		.word	0
 320 00d0 00       		.byte	0
 321 00d1 000000   		.space	3
 322 00d4 00000000 		.word	0
 323              		.type	so_speed_updTasks, %object
 324              		.size	so_speed_updTasks, 4
 325              	so_speed_updTasks:
 326 00d8 02000000 		.word	2
 327              		.type	SO_JOYSTICK_cfg, %object
 328              		.size	SO_JOYSTICK_cfg, 40
 329              	SO_JOYSTICK_cfg:
 330 00dc 00000000 		.word	SC_JOYSTICK_driverIn
 331 00e0 00000000 		.word	0
 332 00e4 02000000 		.word	2
 333 00e8 00000000 		.word	0
 334 00ec 01000000 		.word	1
 335 00f0 00000000 		.word	so_joystick_updTasks
 336 00f4 00000000 		.word	0
 337 00f8 00000000 		.word	0
 338 00fc 00       		.byte	0
 339 00fd 000000   		.space	3
 340 0100 00000000 		.word	0
 341              		.type	so_joystick_updTasks, %object
 342              		.size	so_joystick_updTasks, 4
 343              	so_joystick_updTasks:
 344 0104 03000000 		.word	3
 345              		.data
 346              		.align	2
 347              		.set	.LANCHOR0,. + 0
 348              		.type	SO_JOYSTICK_signal, %object
 349              		.size	SO_JOYSTICK_signal, 12
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 39


 350              	SO_JOYSTICK_signal:
 351 0000 00       		.byte	0
 352 0001 00       		.byte	0
 353 0002 00       		.byte	0
 354 0003 00       		.space	1
 355 0004 00000000 		.word	0
 356 0008 DC000000 		.word	SO_JOYSTICK_cfg
 357              		.type	SO_SPEED_signal, %object
 358              		.size	SO_SPEED_signal, 12
 359              	SO_SPEED_signal:
 360 000c 00       		.byte	0
 361 000d 00       		.byte	0
 362 000e 0000     		.space	2
 363 0010 00000000 		.word	0
 364 0014 B0000000 		.word	SO_SPEED_cfg
 365              		.type	SO_ENGINE_signal, %object
 366              		.size	SO_ENGINE_signal, 12
 367              	SO_ENGINE_signal:
 368 0018 00       		.byte	0
 369 0019 00       		.byte	0
 370 001a 0000     		.space	2
 371 001c 00000000 		.word	0
 372 0020 88000000 		.word	SO_ENGINE_cfg
 373              		.type	SO_BREAKPEDAL_signal, %object
 374              		.size	SO_BREAKPEDAL_signal, 12
 375              	SO_BREAKPEDAL_signal:
 376 0024 00       		.byte	0
 377 0025 00       		.byte	0
 378 0026 0000     		.space	2
 379 0028 00000000 		.word	0
 380 002c 58000000 		.word	SO_BREAKPEDAL_cfg
 381              		.type	SO_BREAKLIGHT_signal, %object
 382              		.size	SO_BREAKLIGHT_signal, 12
 383              	SO_BREAKLIGHT_signal:
 384 0030 00       		.byte	0
 385 0031 00       		.byte	0
 386 0032 0000     		.space	2
 387 0034 00000000 		.word	0
 388 0038 30000000 		.word	SO_BREAKLIGHT_cfg
 389              		.type	SO_SCREEN_signal, %object
 390              		.size	SO_SCREEN_signal, 12
 391              	SO_SCREEN_signal:
 392 003c 00       		.byte	0
 393 003d 00       		.byte	0
 394 003e 0000     		.space	2
 395 0040 00000000 		.word	0
 396 0044 00000000 		.word	SO_SCREEN_cfg
 397              		.text
 398              	.Letext0:
 399              		.file 8 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 400              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 401              		.file 10 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4
 402              		.file 11 "Generated_Source\\PSoC5/ErikaOS_1_common_ee_types.inc"
 403              		.file 12 "Generated_Source\\PSoC5/ErikaOS_1_cortex_mx_ee_cpu.inc"
 404              		.file 13 "Generated_Source\\PSoC5/ErikaOS_1_ee_oo_common.inc"
 405              		.file 14 ".\\bsw/global.h"
 406              		.file 15 "bsw\\rte\\rte_types.h"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 40


 407              		.file 16 "bsw\\rte\\rte.h"
 408              		.file 17 "bsw\\rte\\sc_joystick_type.h"
 409              		.file 18 "bsw\\rte\\sc_speed_type.h"
 410              		.file 19 "bsw\\rte\\sc_engine_type.h"
 411              		.file 20 "bsw\\rte\\sc_breakpedal_type.h"
 412              		.file 21 "bsw\\rte\\sc_breaklight_type.h"
 413              		.file 22 "bsw\\rte\\sc_screen_type.h"
 414              		.file 23 "Generated_Source\\PSoC5/ErikaOS_1_ee_oo_intfunc.inc"
 415              		.file 24 "Generated_Source\\PSoC5/ErikaOS_1_cortex_mx_ee_context.inc"
 416              		.file 25 "Generated_Source\\PSoC5/ErikaOS_1_common_ee_primitives.inc"
 417              		.file 26 "Generated_Source\\PSoC5/core_cm3.h"
 418              		.section	.debug_info,"",%progbits
 419              	.Ldebug_info0:
 420 0000 C2100000 		.4byte	0x10c2
 421 0004 0400     		.2byte	0x4
 422 0006 00000000 		.4byte	.Ldebug_abbrev0
 423 000a 04       		.byte	0x4
 424 000b 01       		.uleb128 0x1
 425 000c D0070000 		.4byte	.LASF162
 426 0010 0C       		.byte	0xc
 427 0011 9C020000 		.4byte	.LASF163
 428 0015 9B060000 		.4byte	.LASF164
 429 0019 00000000 		.4byte	.Ldebug_ranges0+0
 430 001d 00000000 		.4byte	0
 431 0021 00000000 		.4byte	.Ldebug_line0
 432 0025 02       		.uleb128 0x2
 433 0026 01       		.byte	0x1
 434 0027 06       		.byte	0x6
 435 0028 A8010000 		.4byte	.LASF0
 436 002c 03       		.uleb128 0x3
 437 002d BF000000 		.4byte	.LASF4
 438 0031 08       		.byte	0x8
 439 0032 1D       		.byte	0x1d
 440 0033 37000000 		.4byte	0x37
 441 0037 02       		.uleb128 0x2
 442 0038 01       		.byte	0x1
 443 0039 08       		.byte	0x8
 444 003a 43070000 		.4byte	.LASF1
 445 003e 02       		.uleb128 0x2
 446 003f 02       		.byte	0x2
 447 0040 05       		.byte	0x5
 448 0041 61070000 		.4byte	.LASF2
 449 0045 02       		.uleb128 0x2
 450 0046 02       		.byte	0x2
 451 0047 07       		.byte	0x7
 452 0048 88060000 		.4byte	.LASF3
 453 004c 03       		.uleb128 0x3
 454 004d 5C090000 		.4byte	.LASF5
 455 0051 08       		.byte	0x8
 456 0052 3F       		.byte	0x3f
 457 0053 57000000 		.4byte	0x57
 458 0057 02       		.uleb128 0x2
 459 0058 04       		.byte	0x4
 460 0059 05       		.byte	0x5
 461 005a 34020000 		.4byte	.LASF6
 462 005e 03       		.uleb128 0x3
 463 005f F7020000 		.4byte	.LASF7
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 41


 464 0063 08       		.byte	0x8
 465 0064 41       		.byte	0x41
 466 0065 69000000 		.4byte	0x69
 467 0069 02       		.uleb128 0x2
 468 006a 04       		.byte	0x4
 469 006b 07       		.byte	0x7
 470 006c F4030000 		.4byte	.LASF8
 471 0070 02       		.uleb128 0x2
 472 0071 08       		.byte	0x8
 473 0072 05       		.byte	0x5
 474 0073 9A010000 		.4byte	.LASF9
 475 0077 02       		.uleb128 0x2
 476 0078 08       		.byte	0x8
 477 0079 07       		.byte	0x7
 478 007a E0000000 		.4byte	.LASF10
 479 007e 04       		.uleb128 0x4
 480 007f 04       		.byte	0x4
 481 0080 05       		.byte	0x5
 482 0081 696E7400 		.ascii	"int\000"
 483 0085 02       		.uleb128 0x2
 484 0086 04       		.byte	0x4
 485 0087 07       		.byte	0x7
 486 0088 61030000 		.4byte	.LASF11
 487 008c 03       		.uleb128 0x3
 488 008d 7F0A0000 		.4byte	.LASF12
 489 0091 09       		.byte	0x9
 490 0092 18       		.byte	0x18
 491 0093 2C000000 		.4byte	0x2c
 492 0097 03       		.uleb128 0x3
 493 0098 3B070000 		.4byte	.LASF13
 494 009c 09       		.byte	0x9
 495 009d 2C       		.byte	0x2c
 496 009e 4C000000 		.4byte	0x4c
 497 00a2 03       		.uleb128 0x3
 498 00a3 AC080000 		.4byte	.LASF14
 499 00a7 09       		.byte	0x9
 500 00a8 30       		.byte	0x30
 501 00a9 5E000000 		.4byte	0x5e
 502 00ad 02       		.uleb128 0x2
 503 00ae 04       		.byte	0x4
 504 00af 04       		.byte	0x4
 505 00b0 02070000 		.4byte	.LASF15
 506 00b4 02       		.uleb128 0x2
 507 00b5 08       		.byte	0x8
 508 00b6 04       		.byte	0x4
 509 00b7 79020000 		.4byte	.LASF16
 510 00bb 02       		.uleb128 0x2
 511 00bc 01       		.byte	0x1
 512 00bd 08       		.byte	0x8
 513 00be 02090000 		.4byte	.LASF17
 514 00c2 03       		.uleb128 0x3
 515 00c3 6A000000 		.4byte	.LASF18
 516 00c7 0A       		.byte	0xa
 517 00c8 D8       		.byte	0xd8
 518 00c9 85000000 		.4byte	0x85
 519 00cd 02       		.uleb128 0x2
 520 00ce 08       		.byte	0x8
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 42


 521 00cf 04       		.byte	0x4
 522 00d0 F6080000 		.4byte	.LASF19
 523 00d4 03       		.uleb128 0x3
 524 00d5 760A0000 		.4byte	.LASF20
 525 00d9 0B       		.byte	0xb
 526 00da 53       		.byte	0x53
 527 00db 7E000000 		.4byte	0x7e
 528 00df 03       		.uleb128 0x3
 529 00e0 480A0000 		.4byte	.LASF21
 530 00e4 0B       		.byte	0xb
 531 00e5 54       		.byte	0x54
 532 00e6 85000000 		.4byte	0x85
 533 00ea 03       		.uleb128 0x3
 534 00eb B6030000 		.4byte	.LASF22
 535 00ef 0C       		.byte	0xc
 536 00f0 4D       		.byte	0x4d
 537 00f1 DF000000 		.4byte	0xdf
 538 00f5 03       		.uleb128 0x3
 539 00f6 260B0000 		.4byte	.LASF23
 540 00fa 0C       		.byte	0xc
 541 00fb 4F       		.byte	0x4f
 542 00fc DF000000 		.4byte	0xdf
 543 0100 03       		.uleb128 0x3
 544 0101 14030000 		.4byte	.LASF24
 545 0105 0C       		.byte	0xc
 546 0106 78       		.byte	0x78
 547 0107 D4000000 		.4byte	0xd4
 548 010b 05       		.uleb128 0x5
 549 010c 57040000 		.4byte	.LASF25
 550 0110 0D       		.byte	0xd
 551 0111 F701     		.2byte	0x1f7
 552 0113 00010000 		.4byte	0x100
 553 0117 05       		.uleb128 0x5
 554 0118 B4010000 		.4byte	.LASF26
 555 011c 0D       		.byte	0xd
 556 011d 2C02     		.2byte	0x22c
 557 011f EA000000 		.4byte	0xea
 558 0123 02       		.uleb128 0x2
 559 0124 04       		.byte	0x4
 560 0125 07       		.byte	0x7
 561 0126 8C050000 		.4byte	.LASF27
 562 012a 03       		.uleb128 0x3
 563 012b 240A0000 		.4byte	.LASF28
 564 012f 0E       		.byte	0xe
 565 0130 90       		.byte	0x90
 566 0131 25000000 		.4byte	0x25
 567 0135 03       		.uleb128 0x3
 568 0136 AE050000 		.4byte	.LASF29
 569 013a 0E       		.byte	0xe
 570 013b 9C       		.byte	0x9c
 571 013c 37000000 		.4byte	0x37
 572 0140 06       		.uleb128 0x6
 573 0141 01       		.byte	0x1
 574 0142 25000000 		.4byte	0x25
 575 0146 0E       		.byte	0xe
 576 0147 CF       		.byte	0xcf
 577 0148 E9010000 		.4byte	0x1e9
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 43


 578 014c 07       		.uleb128 0x7
 579 014d 3C040000 		.4byte	.LASF30
 580 0151 00       		.byte	0
 581 0152 08       		.uleb128 0x8
 582 0153 F9060000 		.4byte	.LASF31
 583 0157 7F       		.sleb128 -1
 584 0158 08       		.uleb128 0x8
 585 0159 28060000 		.4byte	.LASF32
 586 015d 7E       		.sleb128 -2
 587 015e 08       		.uleb128 0x8
 588 015f AE070000 		.4byte	.LASF33
 589 0163 7D       		.sleb128 -3
 590 0164 08       		.uleb128 0x8
 591 0165 D1090000 		.4byte	.LASF34
 592 0169 7C       		.sleb128 -4
 593 016a 08       		.uleb128 0x8
 594 016b 520A0000 		.4byte	.LASF35
 595 016f 7B       		.sleb128 -5
 596 0170 08       		.uleb128 0x8
 597 0171 96090000 		.4byte	.LASF36
 598 0175 7A       		.sleb128 -6
 599 0176 08       		.uleb128 0x8
 600 0177 48060000 		.4byte	.LASF37
 601 017b 79       		.sleb128 -7
 602 017c 08       		.uleb128 0x8
 603 017d 78040000 		.4byte	.LASF38
 604 0181 78       		.sleb128 -8
 605 0182 08       		.uleb128 0x8
 606 0183 05020000 		.4byte	.LASF39
 607 0187 77       		.sleb128 -9
 608 0188 08       		.uleb128 0x8
 609 0189 08070000 		.4byte	.LASF40
 610 018d 76       		.sleb128 -10
 611 018e 08       		.uleb128 0x8
 612 018f 1E010000 		.4byte	.LASF41
 613 0193 75       		.sleb128 -11
 614 0194 08       		.uleb128 0x8
 615 0195 6B020000 		.4byte	.LASF42
 616 0199 74       		.sleb128 -12
 617 019a 08       		.uleb128 0x8
 618 019b E2030000 		.4byte	.LASF43
 619 019f 73       		.sleb128 -13
 620 01a0 08       		.uleb128 0x8
 621 01a1 E3080000 		.4byte	.LASF44
 622 01a5 72       		.sleb128 -14
 623 01a6 08       		.uleb128 0x8
 624 01a7 27070000 		.4byte	.LASF45
 625 01ab 71       		.sleb128 -15
 626 01ac 08       		.uleb128 0x8
 627 01ad E8050000 		.4byte	.LASF46
 628 01b1 70       		.sleb128 -16
 629 01b2 08       		.uleb128 0x8
 630 01b3 5A060000 		.4byte	.LASF47
 631 01b7 6F       		.sleb128 -17
 632 01b8 08       		.uleb128 0x8
 633 01b9 8D040000 		.4byte	.LASF48
 634 01bd 6E       		.sleb128 -18
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 44


 635 01be 08       		.uleb128 0x8
 636 01bf CB040000 		.4byte	.LASF49
 637 01c3 6D       		.sleb128 -19
 638 01c4 08       		.uleb128 0x8
 639 01c5 B8040000 		.4byte	.LASF50
 640 01c9 6C       		.sleb128 -20
 641 01ca 08       		.uleb128 0x8
 642 01cb F7000000 		.4byte	.LASF51
 643 01cf 6B       		.sleb128 -21
 644 01d0 08       		.uleb128 0x8
 645 01d1 36060000 		.4byte	.LASF52
 646 01d5 6A       		.sleb128 -22
 647 01d6 08       		.uleb128 0x8
 648 01d7 BC080000 		.4byte	.LASF53
 649 01db 69       		.sleb128 -23
 650 01dc 08       		.uleb128 0x8
 651 01dd A5030000 		.4byte	.LASF54
 652 01e1 68       		.sleb128 -24
 653 01e2 08       		.uleb128 0x8
 654 01e3 72090000 		.4byte	.LASF55
 655 01e7 67       		.sleb128 -25
 656 01e8 00       		.byte	0
 657 01e9 03       		.uleb128 0x3
 658 01ea C9000000 		.4byte	.LASF56
 659 01ee 0E       		.byte	0xe
 660 01ef EA       		.byte	0xea
 661 01f0 40010000 		.4byte	0x140
 662 01f4 03       		.uleb128 0x3
 663 01f5 F8090000 		.4byte	.LASF57
 664 01f9 0F       		.byte	0xf
 665 01fa 19       		.byte	0x19
 666 01fb FF010000 		.4byte	0x1ff
 667 01ff 09       		.uleb128 0x9
 668 0200 0B010000 		.4byte	0x10b
 669 0204 0A020000 		.4byte	0x20a
 670 0208 0A       		.uleb128 0xa
 671 0209 00       		.byte	0
 672 020a 03       		.uleb128 0x3
 673 020b 9F000000 		.4byte	.LASF58
 674 020f 0F       		.byte	0xf
 675 0210 2D       		.byte	0x2d
 676 0211 A2000000 		.4byte	0xa2
 677 0215 06       		.uleb128 0x6
 678 0216 01       		.byte	0x1
 679 0217 37000000 		.4byte	0x37
 680 021b 10       		.byte	0x10
 681 021c 59       		.byte	0x59
 682 021d 3A020000 		.4byte	0x23a
 683 0221 07       		.uleb128 0x7
 684 0222 52020000 		.4byte	.LASF59
 685 0226 00       		.byte	0
 686 0227 07       		.uleb128 0x7
 687 0228 07090000 		.4byte	.LASF60
 688 022c 01       		.byte	0x1
 689 022d 07       		.uleb128 0x7
 690 022e B0020000 		.4byte	.LASF61
 691 0232 02       		.byte	0x2
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 45


 692 0233 07       		.uleb128 0x7
 693 0234 95050000 		.4byte	.LASF62
 694 0238 03       		.byte	0x3
 695 0239 00       		.byte	0
 696 023a 03       		.uleb128 0x3
 697 023b BE090000 		.4byte	.LASF63
 698 023f 10       		.byte	0x10
 699 0240 5E       		.byte	0x5e
 700 0241 15020000 		.4byte	0x215
 701 0245 0B       		.uleb128 0xb
 702 0246 02       		.byte	0x2
 703 0247 11       		.byte	0x11
 704 0248 22       		.byte	0x22
 705 0249 66020000 		.4byte	0x266
 706 024d 0C       		.uleb128 0xc
 707 024e 97020000 		.4byte	.LASF64
 708 0252 11       		.byte	0x11
 709 0253 24       		.byte	0x24
 710 0254 2A010000 		.4byte	0x12a
 711 0258 00       		.byte	0
 712 0259 0C       		.uleb128 0xc
 713 025a E1090000 		.4byte	.LASF65
 714 025e 11       		.byte	0x11
 715 025f 25       		.byte	0x25
 716 0260 2A010000 		.4byte	0x12a
 717 0264 01       		.byte	0x1
 718 0265 00       		.byte	0
 719 0266 03       		.uleb128 0x3
 720 0267 79050000 		.4byte	.LASF66
 721 026b 11       		.byte	0x11
 722 026c 28       		.byte	0x28
 723 026d 45020000 		.4byte	0x245
 724 0271 03       		.uleb128 0x3
 725 0272 62050000 		.4byte	.LASF67
 726 0276 02       		.byte	0x2
 727 0277 26       		.byte	0x26
 728 0278 7C020000 		.4byte	0x27c
 729 027c 0D       		.uleb128 0xd
 730 027d 04       		.byte	0x4
 731 027e 82020000 		.4byte	0x282
 732 0282 0E       		.uleb128 0xe
 733 0283 E9010000 		.4byte	0x1e9
 734 0287 91020000 		.4byte	0x291
 735 028b 0F       		.uleb128 0xf
 736 028c 97020000 		.4byte	0x297
 737 0290 00       		.byte	0
 738 0291 0D       		.uleb128 0xd
 739 0292 04       		.byte	0x4
 740 0293 66020000 		.4byte	0x266
 741 0297 10       		.uleb128 0x10
 742 0298 91020000 		.4byte	0x291
 743 029c 03       		.uleb128 0x3
 744 029d 6B070000 		.4byte	.LASF68
 745 02a1 02       		.byte	0x2
 746 02a2 2C       		.byte	0x2c
 747 02a3 A7020000 		.4byte	0x2a7
 748 02a7 0D       		.uleb128 0xd
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 46


 749 02a8 04       		.byte	0x4
 750 02a9 AD020000 		.4byte	0x2ad
 751 02ad 0E       		.uleb128 0xe
 752 02ae E9010000 		.4byte	0x1e9
 753 02b2 BC020000 		.4byte	0x2bc
 754 02b6 0F       		.uleb128 0xf
 755 02b7 C7020000 		.4byte	0x2c7
 756 02bb 00       		.byte	0
 757 02bc 0D       		.uleb128 0xd
 758 02bd 04       		.byte	0x4
 759 02be C2020000 		.4byte	0x2c2
 760 02c2 10       		.uleb128 0x10
 761 02c3 66020000 		.4byte	0x266
 762 02c7 10       		.uleb128 0x10
 763 02c8 BC020000 		.4byte	0x2bc
 764 02cc 11       		.uleb128 0x11
 765 02cd 81030000 		.4byte	.LASF80
 766 02d1 28       		.byte	0x28
 767 02d2 02       		.byte	0x2
 768 02d3 36       		.byte	0x36
 769 02d4 51030000 		.4byte	0x351
 770 02d8 0C       		.uleb128 0xc
 771 02d9 F0060000 		.4byte	.LASF69
 772 02dd 02       		.byte	0x2
 773 02de 3B       		.byte	0x3b
 774 02df 51030000 		.4byte	0x351
 775 02e3 00       		.byte	0
 776 02e4 0C       		.uleb128 0xc
 777 02e5 BE030000 		.4byte	.LASF70
 778 02e9 02       		.byte	0x2
 779 02ea 40       		.byte	0x40
 780 02eb 56030000 		.4byte	0x356
 781 02ef 04       		.byte	0x4
 782 02f0 0C       		.uleb128 0xc
 783 02f1 D7010000 		.4byte	.LASF71
 784 02f5 02       		.byte	0x2
 785 02f6 45       		.byte	0x45
 786 02f7 5B030000 		.4byte	0x35b
 787 02fb 08       		.byte	0x8
 788 02fc 0C       		.uleb128 0xc
 789 02fd 5E080000 		.4byte	.LASF72
 790 0301 02       		.byte	0x2
 791 0302 4B       		.byte	0x4b
 792 0303 5B030000 		.4byte	0x35b
 793 0307 0C       		.byte	0xc
 794 0308 0C       		.uleb128 0xc
 795 0309 CC020000 		.4byte	.LASF73
 796 030d 02       		.byte	0x2
 797 030e 50       		.byte	0x50
 798 030f 60030000 		.4byte	0x360
 799 0313 10       		.byte	0x10
 800 0314 0C       		.uleb128 0xc
 801 0315 A0070000 		.4byte	.LASF74
 802 0319 02       		.byte	0x2
 803 031a 55       		.byte	0x55
 804 031b 6B030000 		.4byte	0x36b
 805 031f 14       		.byte	0x14
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 47


 806 0320 0C       		.uleb128 0xc
 807 0321 16070000 		.4byte	.LASF75
 808 0325 02       		.byte	0x2
 809 0326 5A       		.byte	0x5a
 810 0327 60030000 		.4byte	0x360
 811 032b 18       		.byte	0x18
 812 032c 0C       		.uleb128 0xc
 813 032d 190B0000 		.4byte	.LASF76
 814 0331 02       		.byte	0x2
 815 0332 5F       		.byte	0x5f
 816 0333 6B030000 		.4byte	0x36b
 817 0337 1C       		.byte	0x1c
 818 0338 0C       		.uleb128 0xc
 819 0339 24090000 		.4byte	.LASF77
 820 033d 02       		.byte	0x2
 821 033e 65       		.byte	0x65
 822 033f 70030000 		.4byte	0x370
 823 0343 20       		.byte	0x20
 824 0344 0C       		.uleb128 0xc
 825 0345 28000000 		.4byte	.LASF78
 826 0349 02       		.byte	0x2
 827 034a 6A       		.byte	0x6a
 828 034b 75030000 		.4byte	0x375
 829 034f 24       		.byte	0x24
 830 0350 00       		.byte	0
 831 0351 10       		.uleb128 0x10
 832 0352 71020000 		.4byte	0x271
 833 0356 10       		.uleb128 0x10
 834 0357 9C020000 		.4byte	0x29c
 835 035b 10       		.uleb128 0x10
 836 035c 17010000 		.4byte	0x117
 837 0360 10       		.uleb128 0x10
 838 0361 C2000000 		.4byte	0xc2
 839 0365 0D       		.uleb128 0xd
 840 0366 04       		.byte	0x4
 841 0367 F4010000 		.4byte	0x1f4
 842 036b 10       		.uleb128 0x10
 843 036c 65030000 		.4byte	0x365
 844 0370 10       		.uleb128 0x10
 845 0371 35010000 		.4byte	0x135
 846 0375 10       		.uleb128 0x10
 847 0376 0A020000 		.4byte	0x20a
 848 037a 03       		.uleb128 0x3
 849 037b 93030000 		.4byte	.LASF79
 850 037f 02       		.byte	0x2
 851 0380 6D       		.byte	0x6d
 852 0381 85030000 		.4byte	0x385
 853 0385 10       		.uleb128 0x10
 854 0386 CC020000 		.4byte	0x2cc
 855 038a 11       		.uleb128 0x11
 856 038b 90080000 		.4byte	.LASF81
 857 038f 0C       		.byte	0xc
 858 0390 02       		.byte	0x2
 859 0391 79       		.byte	0x79
 860 0392 C7030000 		.4byte	0x3c7
 861 0396 0C       		.uleb128 0xc
 862 0397 1B030000 		.4byte	.LASF82
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 48


 863 039b 02       		.byte	0x2
 864 039c 7F       		.byte	0x7f
 865 039d 66020000 		.4byte	0x266
 866 03a1 00       		.byte	0
 867 03a2 0C       		.uleb128 0xc
 868 03a3 2C0A0000 		.4byte	.LASF83
 869 03a7 02       		.byte	0x2
 870 03a8 84       		.byte	0x84
 871 03a9 3A020000 		.4byte	0x23a
 872 03ad 02       		.byte	0x2
 873 03ae 12       		.uleb128 0x12
 874 03af 61676500 		.ascii	"age\000"
 875 03b3 02       		.byte	0x2
 876 03b4 89       		.byte	0x89
 877 03b5 A2000000 		.4byte	0xa2
 878 03b9 04       		.byte	0x4
 879 03ba 0C       		.uleb128 0xc
 880 03bb 7B080000 		.4byte	.LASF84
 881 03bf 02       		.byte	0x2
 882 03c0 8E       		.byte	0x8e
 883 03c1 CD030000 		.4byte	0x3cd
 884 03c5 08       		.byte	0x8
 885 03c6 00       		.byte	0
 886 03c7 0D       		.uleb128 0xd
 887 03c8 04       		.byte	0x4
 888 03c9 7A030000 		.4byte	0x37a
 889 03cd 10       		.uleb128 0x10
 890 03ce C7030000 		.4byte	0x3c7
 891 03d2 03       		.uleb128 0x3
 892 03d3 9E080000 		.4byte	.LASF85
 893 03d7 02       		.byte	0x2
 894 03d8 91       		.byte	0x91
 895 03d9 8A030000 		.4byte	0x38a
 896 03dd 0B       		.uleb128 0xb
 897 03de 01       		.byte	0x1
 898 03df 12       		.byte	0x12
 899 03e0 21       		.byte	0x21
 900 03e1 F2030000 		.4byte	0x3f2
 901 03e5 0C       		.uleb128 0xc
 902 03e6 8B090000 		.4byte	.LASF86
 903 03ea 12       		.byte	0x12
 904 03eb 23       		.byte	0x23
 905 03ec 8C000000 		.4byte	0x8c
 906 03f0 00       		.byte	0
 907 03f1 00       		.byte	0
 908 03f2 03       		.uleb128 0x3
 909 03f3 D3080000 		.4byte	.LASF87
 910 03f7 12       		.byte	0x12
 911 03f8 26       		.byte	0x26
 912 03f9 DD030000 		.4byte	0x3dd
 913 03fd 03       		.uleb128 0x3
 914 03fe 35050000 		.4byte	.LASF88
 915 0402 03       		.byte	0x3
 916 0403 26       		.byte	0x26
 917 0404 08040000 		.4byte	0x408
 918 0408 0D       		.uleb128 0xd
 919 0409 04       		.byte	0x4
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 49


 920 040a 0E040000 		.4byte	0x40e
 921 040e 0E       		.uleb128 0xe
 922 040f E9010000 		.4byte	0x1e9
 923 0413 1D040000 		.4byte	0x41d
 924 0417 0F       		.uleb128 0xf
 925 0418 23040000 		.4byte	0x423
 926 041c 00       		.byte	0
 927 041d 0D       		.uleb128 0xd
 928 041e 04       		.byte	0x4
 929 041f F2030000 		.4byte	0x3f2
 930 0423 10       		.uleb128 0x10
 931 0424 1D040000 		.4byte	0x41d
 932 0428 03       		.uleb128 0x3
 933 0429 20050000 		.4byte	.LASF89
 934 042d 03       		.byte	0x3
 935 042e 2C       		.byte	0x2c
 936 042f 33040000 		.4byte	0x433
 937 0433 0D       		.uleb128 0xd
 938 0434 04       		.byte	0x4
 939 0435 39040000 		.4byte	0x439
 940 0439 0E       		.uleb128 0xe
 941 043a E9010000 		.4byte	0x1e9
 942 043e 48040000 		.4byte	0x448
 943 0442 0F       		.uleb128 0xf
 944 0443 53040000 		.4byte	0x453
 945 0447 00       		.byte	0
 946 0448 0D       		.uleb128 0xd
 947 0449 04       		.byte	0x4
 948 044a 4E040000 		.4byte	0x44e
 949 044e 10       		.uleb128 0x10
 950 044f F2030000 		.4byte	0x3f2
 951 0453 10       		.uleb128 0x10
 952 0454 48040000 		.4byte	0x448
 953 0458 11       		.uleb128 0x11
 954 0459 63010000 		.4byte	.LASF90
 955 045d 28       		.byte	0x28
 956 045e 03       		.byte	0x3
 957 045f 36       		.byte	0x36
 958 0460 DD040000 		.4byte	0x4dd
 959 0464 0C       		.uleb128 0xc
 960 0465 F0060000 		.4byte	.LASF69
 961 0469 03       		.byte	0x3
 962 046a 3B       		.byte	0x3b
 963 046b DD040000 		.4byte	0x4dd
 964 046f 00       		.byte	0
 965 0470 0C       		.uleb128 0xc
 966 0471 BE030000 		.4byte	.LASF70
 967 0475 03       		.byte	0x3
 968 0476 40       		.byte	0x40
 969 0477 E2040000 		.4byte	0x4e2
 970 047b 04       		.byte	0x4
 971 047c 0C       		.uleb128 0xc
 972 047d D7010000 		.4byte	.LASF71
 973 0481 03       		.byte	0x3
 974 0482 45       		.byte	0x45
 975 0483 5B030000 		.4byte	0x35b
 976 0487 08       		.byte	0x8
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 50


 977 0488 0C       		.uleb128 0xc
 978 0489 5E080000 		.4byte	.LASF72
 979 048d 03       		.byte	0x3
 980 048e 4B       		.byte	0x4b
 981 048f 5B030000 		.4byte	0x35b
 982 0493 0C       		.byte	0xc
 983 0494 0C       		.uleb128 0xc
 984 0495 CC020000 		.4byte	.LASF73
 985 0499 03       		.byte	0x3
 986 049a 50       		.byte	0x50
 987 049b 60030000 		.4byte	0x360
 988 049f 10       		.byte	0x10
 989 04a0 0C       		.uleb128 0xc
 990 04a1 A0070000 		.4byte	.LASF74
 991 04a5 03       		.byte	0x3
 992 04a6 55       		.byte	0x55
 993 04a7 6B030000 		.4byte	0x36b
 994 04ab 14       		.byte	0x14
 995 04ac 0C       		.uleb128 0xc
 996 04ad 16070000 		.4byte	.LASF75
 997 04b1 03       		.byte	0x3
 998 04b2 5A       		.byte	0x5a
 999 04b3 60030000 		.4byte	0x360
 1000 04b7 18       		.byte	0x18
 1001 04b8 0C       		.uleb128 0xc
 1002 04b9 190B0000 		.4byte	.LASF76
 1003 04bd 03       		.byte	0x3
 1004 04be 5F       		.byte	0x5f
 1005 04bf 6B030000 		.4byte	0x36b
 1006 04c3 1C       		.byte	0x1c
 1007 04c4 0C       		.uleb128 0xc
 1008 04c5 24090000 		.4byte	.LASF77
 1009 04c9 03       		.byte	0x3
 1010 04ca 65       		.byte	0x65
 1011 04cb 70030000 		.4byte	0x370
 1012 04cf 20       		.byte	0x20
 1013 04d0 0C       		.uleb128 0xc
 1014 04d1 28000000 		.4byte	.LASF78
 1015 04d5 03       		.byte	0x3
 1016 04d6 6A       		.byte	0x6a
 1017 04d7 75030000 		.4byte	0x375
 1018 04db 24       		.byte	0x24
 1019 04dc 00       		.byte	0
 1020 04dd 10       		.uleb128 0x10
 1021 04de FD030000 		.4byte	0x3fd
 1022 04e2 10       		.uleb128 0x10
 1023 04e3 28040000 		.4byte	0x428
 1024 04e7 03       		.uleb128 0x3
 1025 04e8 72010000 		.4byte	.LASF91
 1026 04ec 03       		.byte	0x3
 1027 04ed 6D       		.byte	0x6d
 1028 04ee F2040000 		.4byte	0x4f2
 1029 04f2 10       		.uleb128 0x10
 1030 04f3 58040000 		.4byte	0x458
 1031 04f7 11       		.uleb128 0x11
 1032 04f8 36030000 		.4byte	.LASF92
 1033 04fc 0C       		.byte	0xc
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 51


 1034 04fd 03       		.byte	0x3
 1035 04fe 79       		.byte	0x79
 1036 04ff 34050000 		.4byte	0x534
 1037 0503 0C       		.uleb128 0xc
 1038 0504 1B030000 		.4byte	.LASF82
 1039 0508 03       		.byte	0x3
 1040 0509 7F       		.byte	0x7f
 1041 050a F2030000 		.4byte	0x3f2
 1042 050e 00       		.byte	0
 1043 050f 0C       		.uleb128 0xc
 1044 0510 2C0A0000 		.4byte	.LASF83
 1045 0514 03       		.byte	0x3
 1046 0515 84       		.byte	0x84
 1047 0516 3A020000 		.4byte	0x23a
 1048 051a 01       		.byte	0x1
 1049 051b 12       		.uleb128 0x12
 1050 051c 61676500 		.ascii	"age\000"
 1051 0520 03       		.byte	0x3
 1052 0521 89       		.byte	0x89
 1053 0522 A2000000 		.4byte	0xa2
 1054 0526 04       		.byte	0x4
 1055 0527 0C       		.uleb128 0xc
 1056 0528 7B080000 		.4byte	.LASF84
 1057 052c 03       		.byte	0x3
 1058 052d 8E       		.byte	0x8e
 1059 052e 3A050000 		.4byte	0x53a
 1060 0532 08       		.byte	0x8
 1061 0533 00       		.byte	0
 1062 0534 0D       		.uleb128 0xd
 1063 0535 04       		.byte	0x4
 1064 0536 E7040000 		.4byte	0x4e7
 1065 053a 10       		.uleb128 0x10
 1066 053b 34050000 		.4byte	0x534
 1067 053f 03       		.uleb128 0x3
 1068 0540 41030000 		.4byte	.LASF93
 1069 0544 03       		.byte	0x3
 1070 0545 91       		.byte	0x91
 1071 0546 F7040000 		.4byte	0x4f7
 1072 054a 0B       		.uleb128 0xb
 1073 054b 01       		.byte	0x1
 1074 054c 13       		.byte	0x13
 1075 054d 21       		.byte	0x21
 1076 054e 5F050000 		.4byte	0x55f
 1077 0552 0C       		.uleb128 0xc
 1078 0553 0A000000 		.4byte	.LASF94
 1079 0557 13       		.byte	0x13
 1080 0558 23       		.byte	0x23
 1081 0559 8C000000 		.4byte	0x8c
 1082 055d 00       		.byte	0
 1083 055e 00       		.byte	0
 1084 055f 03       		.uleb128 0x3
 1085 0560 BC0A0000 		.4byte	.LASF95
 1086 0564 13       		.byte	0x13
 1087 0565 26       		.byte	0x26
 1088 0566 4A050000 		.4byte	0x54a
 1089 056a 03       		.uleb128 0x3
 1090 056b 09010000 		.4byte	.LASF96
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 52


 1091 056f 04       		.byte	0x4
 1092 0570 26       		.byte	0x26
 1093 0571 75050000 		.4byte	0x575
 1094 0575 0D       		.uleb128 0xd
 1095 0576 04       		.byte	0x4
 1096 0577 7B050000 		.4byte	0x57b
 1097 057b 0E       		.uleb128 0xe
 1098 057c E9010000 		.4byte	0x1e9
 1099 0580 8A050000 		.4byte	0x58a
 1100 0584 0F       		.uleb128 0xf
 1101 0585 90050000 		.4byte	0x590
 1102 0589 00       		.byte	0
 1103 058a 0D       		.uleb128 0xd
 1104 058b 04       		.byte	0x4
 1105 058c 5F050000 		.4byte	0x55f
 1106 0590 10       		.uleb128 0x10
 1107 0591 8A050000 		.4byte	0x58a
 1108 0595 03       		.uleb128 0x3
 1109 0596 F7040000 		.4byte	.LASF97
 1110 059a 04       		.byte	0x4
 1111 059b 2C       		.byte	0x2c
 1112 059c A0050000 		.4byte	0x5a0
 1113 05a0 0D       		.uleb128 0xd
 1114 05a1 04       		.byte	0x4
 1115 05a2 A6050000 		.4byte	0x5a6
 1116 05a6 0E       		.uleb128 0xe
 1117 05a7 E9010000 		.4byte	0x1e9
 1118 05ab B5050000 		.4byte	0x5b5
 1119 05af 0F       		.uleb128 0xf
 1120 05b0 C0050000 		.4byte	0x5c0
 1121 05b4 00       		.byte	0
 1122 05b5 0D       		.uleb128 0xd
 1123 05b6 04       		.byte	0x4
 1124 05b7 BB050000 		.4byte	0x5bb
 1125 05bb 10       		.uleb128 0x10
 1126 05bc 5F050000 		.4byte	0x55f
 1127 05c0 10       		.uleb128 0x10
 1128 05c1 B5050000 		.4byte	0x5b5
 1129 05c5 11       		.uleb128 0x11
 1130 05c6 71000000 		.4byte	.LASF98
 1131 05ca 28       		.byte	0x28
 1132 05cb 04       		.byte	0x4
 1133 05cc 36       		.byte	0x36
 1134 05cd 4A060000 		.4byte	0x64a
 1135 05d1 0C       		.uleb128 0xc
 1136 05d2 F0060000 		.4byte	.LASF69
 1137 05d6 04       		.byte	0x4
 1138 05d7 3B       		.byte	0x3b
 1139 05d8 4A060000 		.4byte	0x64a
 1140 05dc 00       		.byte	0
 1141 05dd 0C       		.uleb128 0xc
 1142 05de BE030000 		.4byte	.LASF70
 1143 05e2 04       		.byte	0x4
 1144 05e3 40       		.byte	0x40
 1145 05e4 4F060000 		.4byte	0x64f
 1146 05e8 04       		.byte	0x4
 1147 05e9 0C       		.uleb128 0xc
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 53


 1148 05ea D7010000 		.4byte	.LASF71
 1149 05ee 04       		.byte	0x4
 1150 05ef 45       		.byte	0x45
 1151 05f0 5B030000 		.4byte	0x35b
 1152 05f4 08       		.byte	0x8
 1153 05f5 0C       		.uleb128 0xc
 1154 05f6 5E080000 		.4byte	.LASF72
 1155 05fa 04       		.byte	0x4
 1156 05fb 4B       		.byte	0x4b
 1157 05fc 5B030000 		.4byte	0x35b
 1158 0600 0C       		.byte	0xc
 1159 0601 0C       		.uleb128 0xc
 1160 0602 CC020000 		.4byte	.LASF73
 1161 0606 04       		.byte	0x4
 1162 0607 50       		.byte	0x50
 1163 0608 60030000 		.4byte	0x360
 1164 060c 10       		.byte	0x10
 1165 060d 0C       		.uleb128 0xc
 1166 060e A0070000 		.4byte	.LASF74
 1167 0612 04       		.byte	0x4
 1168 0613 55       		.byte	0x55
 1169 0614 6B030000 		.4byte	0x36b
 1170 0618 14       		.byte	0x14
 1171 0619 0C       		.uleb128 0xc
 1172 061a 16070000 		.4byte	.LASF75
 1173 061e 04       		.byte	0x4
 1174 061f 5A       		.byte	0x5a
 1175 0620 60030000 		.4byte	0x360
 1176 0624 18       		.byte	0x18
 1177 0625 0C       		.uleb128 0xc
 1178 0626 190B0000 		.4byte	.LASF76
 1179 062a 04       		.byte	0x4
 1180 062b 5F       		.byte	0x5f
 1181 062c 6B030000 		.4byte	0x36b
 1182 0630 1C       		.byte	0x1c
 1183 0631 0C       		.uleb128 0xc
 1184 0632 24090000 		.4byte	.LASF77
 1185 0636 04       		.byte	0x4
 1186 0637 65       		.byte	0x65
 1187 0638 70030000 		.4byte	0x370
 1188 063c 20       		.byte	0x20
 1189 063d 0C       		.uleb128 0xc
 1190 063e 28000000 		.4byte	.LASF78
 1191 0642 04       		.byte	0x4
 1192 0643 6A       		.byte	0x6a
 1193 0644 75030000 		.4byte	0x375
 1194 0648 24       		.byte	0x24
 1195 0649 00       		.byte	0
 1196 064a 10       		.uleb128 0x10
 1197 064b 6A050000 		.4byte	0x56a
 1198 064f 10       		.uleb128 0x10
 1199 0650 95050000 		.4byte	0x595
 1200 0654 03       		.uleb128 0x3
 1201 0655 81000000 		.4byte	.LASF99
 1202 0659 04       		.byte	0x4
 1203 065a 6D       		.byte	0x6d
 1204 065b 5F060000 		.4byte	0x65f
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 54


 1205 065f 10       		.uleb128 0x10
 1206 0660 C5050000 		.4byte	0x5c5
 1207 0664 11       		.uleb128 0x11
 1208 0665 2E0B0000 		.4byte	.LASF100
 1209 0669 0C       		.byte	0xc
 1210 066a 04       		.byte	0x4
 1211 066b 79       		.byte	0x79
 1212 066c A1060000 		.4byte	0x6a1
 1213 0670 0C       		.uleb128 0xc
 1214 0671 1B030000 		.4byte	.LASF82
 1215 0675 04       		.byte	0x4
 1216 0676 7F       		.byte	0x7f
 1217 0677 5F050000 		.4byte	0x55f
 1218 067b 00       		.byte	0
 1219 067c 0C       		.uleb128 0xc
 1220 067d 2C0A0000 		.4byte	.LASF83
 1221 0681 04       		.byte	0x4
 1222 0682 84       		.byte	0x84
 1223 0683 3A020000 		.4byte	0x23a
 1224 0687 01       		.byte	0x1
 1225 0688 12       		.uleb128 0x12
 1226 0689 61676500 		.ascii	"age\000"
 1227 068d 04       		.byte	0x4
 1228 068e 89       		.byte	0x89
 1229 068f A2000000 		.4byte	0xa2
 1230 0693 04       		.byte	0x4
 1231 0694 0C       		.uleb128 0xc
 1232 0695 7B080000 		.4byte	.LASF84
 1233 0699 04       		.byte	0x4
 1234 069a 8E       		.byte	0x8e
 1235 069b A7060000 		.4byte	0x6a7
 1236 069f 08       		.byte	0x8
 1237 06a0 00       		.byte	0
 1238 06a1 0D       		.uleb128 0xd
 1239 06a2 04       		.byte	0x4
 1240 06a3 54060000 		.4byte	0x654
 1241 06a7 10       		.uleb128 0x10
 1242 06a8 A1060000 		.4byte	0x6a1
 1243 06ac 03       		.uleb128 0x3
 1244 06ad 3A0B0000 		.4byte	.LASF101
 1245 06b1 04       		.byte	0x4
 1246 06b2 91       		.byte	0x91
 1247 06b3 64060000 		.4byte	0x664
 1248 06b7 0B       		.uleb128 0xb
 1249 06b8 01       		.byte	0x1
 1250 06b9 14       		.byte	0x14
 1251 06ba 21       		.byte	0x21
 1252 06bb CC060000 		.4byte	0x6cc
 1253 06bf 0C       		.uleb128 0xc
 1254 06c0 E2010000 		.4byte	.LASF102
 1255 06c4 14       		.byte	0x14
 1256 06c5 23       		.byte	0x23
 1257 06c6 35010000 		.4byte	0x135
 1258 06ca 00       		.byte	0
 1259 06cb 00       		.byte	0
 1260 06cc 03       		.uleb128 0x3
 1261 06cd A70A0000 		.4byte	.LASF103
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 55


 1262 06d1 14       		.byte	0x14
 1263 06d2 26       		.byte	0x26
 1264 06d3 B7060000 		.4byte	0x6b7
 1265 06d7 03       		.uleb128 0x3
 1266 06d8 1B020000 		.4byte	.LASF104
 1267 06dc 05       		.byte	0x5
 1268 06dd 26       		.byte	0x26
 1269 06de E2060000 		.4byte	0x6e2
 1270 06e2 0D       		.uleb128 0xd
 1271 06e3 04       		.byte	0x4
 1272 06e4 E8060000 		.4byte	0x6e8
 1273 06e8 0E       		.uleb128 0xe
 1274 06e9 E9010000 		.4byte	0x1e9
 1275 06ed F7060000 		.4byte	0x6f7
 1276 06f1 0F       		.uleb128 0xf
 1277 06f2 FD060000 		.4byte	0x6fd
 1278 06f6 00       		.byte	0
 1279 06f7 0D       		.uleb128 0xd
 1280 06f8 04       		.byte	0x4
 1281 06f9 CC060000 		.4byte	0x6cc
 1282 06fd 10       		.uleb128 0x10
 1283 06fe F7060000 		.4byte	0x6f7
 1284 0702 03       		.uleb128 0x3
 1285 0703 C8030000 		.4byte	.LASF105
 1286 0707 05       		.byte	0x5
 1287 0708 2C       		.byte	0x2c
 1288 0709 0D070000 		.4byte	0x70d
 1289 070d 0D       		.uleb128 0xd
 1290 070e 04       		.byte	0x4
 1291 070f 13070000 		.4byte	0x713
 1292 0713 0E       		.uleb128 0xe
 1293 0714 E9010000 		.4byte	0x1e9
 1294 0718 22070000 		.4byte	0x722
 1295 071c 0F       		.uleb128 0xf
 1296 071d 2D070000 		.4byte	0x72d
 1297 0721 00       		.byte	0
 1298 0722 0D       		.uleb128 0xd
 1299 0723 04       		.byte	0x4
 1300 0724 28070000 		.4byte	0x728
 1301 0728 10       		.uleb128 0x10
 1302 0729 CC060000 		.4byte	0x6cc
 1303 072d 10       		.uleb128 0x10
 1304 072e 22070000 		.4byte	0x722
 1305 0732 11       		.uleb128 0x11
 1306 0733 06040000 		.4byte	.LASF106
 1307 0737 28       		.byte	0x28
 1308 0738 05       		.byte	0x5
 1309 0739 36       		.byte	0x36
 1310 073a B7070000 		.4byte	0x7b7
 1311 073e 0C       		.uleb128 0xc
 1312 073f F0060000 		.4byte	.LASF69
 1313 0743 05       		.byte	0x5
 1314 0744 3B       		.byte	0x3b
 1315 0745 B7070000 		.4byte	0x7b7
 1316 0749 00       		.byte	0
 1317 074a 0C       		.uleb128 0xc
 1318 074b BE030000 		.4byte	.LASF70
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 56


 1319 074f 05       		.byte	0x5
 1320 0750 40       		.byte	0x40
 1321 0751 BC070000 		.4byte	0x7bc
 1322 0755 04       		.byte	0x4
 1323 0756 0C       		.uleb128 0xc
 1324 0757 D7010000 		.4byte	.LASF71
 1325 075b 05       		.byte	0x5
 1326 075c 45       		.byte	0x45
 1327 075d 5B030000 		.4byte	0x35b
 1328 0761 08       		.byte	0x8
 1329 0762 0C       		.uleb128 0xc
 1330 0763 5E080000 		.4byte	.LASF72
 1331 0767 05       		.byte	0x5
 1332 0768 4B       		.byte	0x4b
 1333 0769 5B030000 		.4byte	0x35b
 1334 076d 0C       		.byte	0xc
 1335 076e 0C       		.uleb128 0xc
 1336 076f CC020000 		.4byte	.LASF73
 1337 0773 05       		.byte	0x5
 1338 0774 50       		.byte	0x50
 1339 0775 60030000 		.4byte	0x360
 1340 0779 10       		.byte	0x10
 1341 077a 0C       		.uleb128 0xc
 1342 077b A0070000 		.4byte	.LASF74
 1343 077f 05       		.byte	0x5
 1344 0780 55       		.byte	0x55
 1345 0781 6B030000 		.4byte	0x36b
 1346 0785 14       		.byte	0x14
 1347 0786 0C       		.uleb128 0xc
 1348 0787 16070000 		.4byte	.LASF75
 1349 078b 05       		.byte	0x5
 1350 078c 5A       		.byte	0x5a
 1351 078d 60030000 		.4byte	0x360
 1352 0791 18       		.byte	0x18
 1353 0792 0C       		.uleb128 0xc
 1354 0793 190B0000 		.4byte	.LASF76
 1355 0797 05       		.byte	0x5
 1356 0798 5F       		.byte	0x5f
 1357 0799 6B030000 		.4byte	0x36b
 1358 079d 1C       		.byte	0x1c
 1359 079e 0C       		.uleb128 0xc
 1360 079f 24090000 		.4byte	.LASF77
 1361 07a3 05       		.byte	0x5
 1362 07a4 65       		.byte	0x65
 1363 07a5 70030000 		.4byte	0x370
 1364 07a9 20       		.byte	0x20
 1365 07aa 0C       		.uleb128 0xc
 1366 07ab 28000000 		.4byte	.LASF78
 1367 07af 05       		.byte	0x5
 1368 07b0 6A       		.byte	0x6a
 1369 07b1 75030000 		.4byte	0x375
 1370 07b5 24       		.byte	0x24
 1371 07b6 00       		.byte	0
 1372 07b7 10       		.uleb128 0x10
 1373 07b8 D7060000 		.4byte	0x6d7
 1374 07bc 10       		.uleb128 0x10
 1375 07bd 02070000 		.4byte	0x702
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 57


 1376 07c1 03       		.uleb128 0x3
 1377 07c2 1A040000 		.4byte	.LASF107
 1378 07c6 05       		.byte	0x5
 1379 07c7 6D       		.byte	0x6d
 1380 07c8 CC070000 		.4byte	0x7cc
 1381 07cc 10       		.uleb128 0x10
 1382 07cd 32070000 		.4byte	0x732
 1383 07d1 11       		.uleb128 0x11
 1384 07d2 51070000 		.4byte	.LASF108
 1385 07d6 0C       		.byte	0xc
 1386 07d7 05       		.byte	0x5
 1387 07d8 79       		.byte	0x79
 1388 07d9 0E080000 		.4byte	0x80e
 1389 07dd 0C       		.uleb128 0xc
 1390 07de 1B030000 		.4byte	.LASF82
 1391 07e2 05       		.byte	0x5
 1392 07e3 7F       		.byte	0x7f
 1393 07e4 CC060000 		.4byte	0x6cc
 1394 07e8 00       		.byte	0
 1395 07e9 0C       		.uleb128 0xc
 1396 07ea 2C0A0000 		.4byte	.LASF83
 1397 07ee 05       		.byte	0x5
 1398 07ef 84       		.byte	0x84
 1399 07f0 3A020000 		.4byte	0x23a
 1400 07f4 01       		.byte	0x1
 1401 07f5 12       		.uleb128 0x12
 1402 07f6 61676500 		.ascii	"age\000"
 1403 07fa 05       		.byte	0x5
 1404 07fb 89       		.byte	0x89
 1405 07fc A2000000 		.4byte	0xa2
 1406 0800 04       		.byte	0x4
 1407 0801 0C       		.uleb128 0xc
 1408 0802 7B080000 		.4byte	.LASF84
 1409 0806 05       		.byte	0x5
 1410 0807 8E       		.byte	0x8e
 1411 0808 14080000 		.4byte	0x814
 1412 080c 08       		.byte	0x8
 1413 080d 00       		.byte	0
 1414 080e 0D       		.uleb128 0xd
 1415 080f 04       		.byte	0x4
 1416 0810 C1070000 		.4byte	0x7c1
 1417 0814 10       		.uleb128 0x10
 1418 0815 0E080000 		.4byte	0x80e
 1419 0819 03       		.uleb128 0x3
 1420 081a E0060000 		.4byte	.LASF109
 1421 081e 05       		.byte	0x5
 1422 081f 91       		.byte	0x91
 1423 0820 D1070000 		.4byte	0x7d1
 1424 0824 0B       		.uleb128 0xb
 1425 0825 01       		.byte	0x1
 1426 0826 15       		.byte	0x15
 1427 0827 21       		.byte	0x21
 1428 0828 39080000 		.4byte	0x839
 1429 082c 0C       		.uleb128 0xc
 1430 082d F4010000 		.4byte	.LASF110
 1431 0831 15       		.byte	0x15
 1432 0832 23       		.byte	0x23
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 58


 1433 0833 8C000000 		.4byte	0x8c
 1434 0837 00       		.byte	0
 1435 0838 00       		.byte	0
 1436 0839 03       		.uleb128 0x3
 1437 083a 47090000 		.4byte	.LASF111
 1438 083e 15       		.byte	0x15
 1439 083f 26       		.byte	0x26
 1440 0840 24080000 		.4byte	0x824
 1441 0844 03       		.uleb128 0x3
 1442 0845 49050000 		.4byte	.LASF112
 1443 0849 06       		.byte	0x6
 1444 084a 26       		.byte	0x26
 1445 084b 4F080000 		.4byte	0x84f
 1446 084f 0D       		.uleb128 0xd
 1447 0850 04       		.byte	0x4
 1448 0851 55080000 		.4byte	0x855
 1449 0855 0E       		.uleb128 0xe
 1450 0856 E9010000 		.4byte	0x1e9
 1451 085a 64080000 		.4byte	0x864
 1452 085e 0F       		.uleb128 0xf
 1453 085f 6A080000 		.4byte	0x86a
 1454 0863 00       		.byte	0
 1455 0864 0D       		.uleb128 0xd
 1456 0865 04       		.byte	0x4
 1457 0866 39080000 		.4byte	0x839
 1458 086a 10       		.uleb128 0x10
 1459 086b 64080000 		.4byte	0x864
 1460 086f 03       		.uleb128 0x3
 1461 0870 6E060000 		.4byte	.LASF113
 1462 0874 06       		.byte	0x6
 1463 0875 2C       		.byte	0x2c
 1464 0876 7A080000 		.4byte	0x87a
 1465 087a 0D       		.uleb128 0xd
 1466 087b 04       		.byte	0x4
 1467 087c 80080000 		.4byte	0x880
 1468 0880 0E       		.uleb128 0xe
 1469 0881 E9010000 		.4byte	0x1e9
 1470 0885 8F080000 		.4byte	0x88f
 1471 0889 0F       		.uleb128 0xf
 1472 088a 9A080000 		.4byte	0x89a
 1473 088e 00       		.byte	0
 1474 088f 0D       		.uleb128 0xd
 1475 0890 04       		.byte	0x4
 1476 0891 95080000 		.4byte	0x895
 1477 0895 10       		.uleb128 0x10
 1478 0896 39080000 		.4byte	0x839
 1479 089a 10       		.uleb128 0x10
 1480 089b 8F080000 		.4byte	0x88f
 1481 089f 11       		.uleb128 0x11
 1482 08a0 42000000 		.4byte	.LASF114
 1483 08a4 28       		.byte	0x28
 1484 08a5 06       		.byte	0x6
 1485 08a6 36       		.byte	0x36
 1486 08a7 24090000 		.4byte	0x924
 1487 08ab 0C       		.uleb128 0xc
 1488 08ac F0060000 		.4byte	.LASF69
 1489 08b0 06       		.byte	0x6
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 59


 1490 08b1 3B       		.byte	0x3b
 1491 08b2 24090000 		.4byte	0x924
 1492 08b6 00       		.byte	0
 1493 08b7 0C       		.uleb128 0xc
 1494 08b8 BE030000 		.4byte	.LASF70
 1495 08bc 06       		.byte	0x6
 1496 08bd 40       		.byte	0x40
 1497 08be 29090000 		.4byte	0x929
 1498 08c2 04       		.byte	0x4
 1499 08c3 0C       		.uleb128 0xc
 1500 08c4 D7010000 		.4byte	.LASF71
 1501 08c8 06       		.byte	0x6
 1502 08c9 45       		.byte	0x45
 1503 08ca 5B030000 		.4byte	0x35b
 1504 08ce 08       		.byte	0x8
 1505 08cf 0C       		.uleb128 0xc
 1506 08d0 5E080000 		.4byte	.LASF72
 1507 08d4 06       		.byte	0x6
 1508 08d5 4B       		.byte	0x4b
 1509 08d6 5B030000 		.4byte	0x35b
 1510 08da 0C       		.byte	0xc
 1511 08db 0C       		.uleb128 0xc
 1512 08dc CC020000 		.4byte	.LASF73
 1513 08e0 06       		.byte	0x6
 1514 08e1 50       		.byte	0x50
 1515 08e2 60030000 		.4byte	0x360
 1516 08e6 10       		.byte	0x10
 1517 08e7 0C       		.uleb128 0xc
 1518 08e8 A0070000 		.4byte	.LASF74
 1519 08ec 06       		.byte	0x6
 1520 08ed 55       		.byte	0x55
 1521 08ee 6B030000 		.4byte	0x36b
 1522 08f2 14       		.byte	0x14
 1523 08f3 0C       		.uleb128 0xc
 1524 08f4 16070000 		.4byte	.LASF75
 1525 08f8 06       		.byte	0x6
 1526 08f9 5A       		.byte	0x5a
 1527 08fa 60030000 		.4byte	0x360
 1528 08fe 18       		.byte	0x18
 1529 08ff 0C       		.uleb128 0xc
 1530 0900 190B0000 		.4byte	.LASF76
 1531 0904 06       		.byte	0x6
 1532 0905 5F       		.byte	0x5f
 1533 0906 6B030000 		.4byte	0x36b
 1534 090a 1C       		.byte	0x1c
 1535 090b 0C       		.uleb128 0xc
 1536 090c 24090000 		.4byte	.LASF77
 1537 0910 06       		.byte	0x6
 1538 0911 65       		.byte	0x65
 1539 0912 70030000 		.4byte	0x370
 1540 0916 20       		.byte	0x20
 1541 0917 0C       		.uleb128 0xc
 1542 0918 28000000 		.4byte	.LASF78
 1543 091c 06       		.byte	0x6
 1544 091d 6A       		.byte	0x6a
 1545 091e 75030000 		.4byte	0x375
 1546 0922 24       		.byte	0x24
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 60


 1547 0923 00       		.byte	0
 1548 0924 10       		.uleb128 0x10
 1549 0925 44080000 		.4byte	0x844
 1550 0929 10       		.uleb128 0x10
 1551 092a 6F080000 		.4byte	0x86f
 1552 092e 03       		.uleb128 0x3
 1553 092f 56000000 		.4byte	.LASF115
 1554 0933 06       		.byte	0x6
 1555 0934 6D       		.byte	0x6d
 1556 0935 39090000 		.4byte	0x939
 1557 0939 10       		.uleb128 0x10
 1558 093a 9F080000 		.4byte	0x89f
 1559 093e 11       		.uleb128 0x11
 1560 093f F90A0000 		.4byte	.LASF116
 1561 0943 0C       		.byte	0xc
 1562 0944 06       		.byte	0x6
 1563 0945 79       		.byte	0x79
 1564 0946 7B090000 		.4byte	0x97b
 1565 094a 0C       		.uleb128 0xc
 1566 094b 1B030000 		.4byte	.LASF82
 1567 094f 06       		.byte	0x6
 1568 0950 7F       		.byte	0x7f
 1569 0951 39080000 		.4byte	0x839
 1570 0955 00       		.byte	0
 1571 0956 0C       		.uleb128 0xc
 1572 0957 2C0A0000 		.4byte	.LASF83
 1573 095b 06       		.byte	0x6
 1574 095c 84       		.byte	0x84
 1575 095d 3A020000 		.4byte	0x23a
 1576 0961 01       		.byte	0x1
 1577 0962 12       		.uleb128 0x12
 1578 0963 61676500 		.ascii	"age\000"
 1579 0967 06       		.byte	0x6
 1580 0968 89       		.byte	0x89
 1581 0969 A2000000 		.4byte	0xa2
 1582 096d 04       		.byte	0x4
 1583 096e 0C       		.uleb128 0xc
 1584 096f 7B080000 		.4byte	.LASF84
 1585 0973 06       		.byte	0x6
 1586 0974 8E       		.byte	0x8e
 1587 0975 81090000 		.4byte	0x981
 1588 0979 08       		.byte	0x8
 1589 097a 00       		.byte	0
 1590 097b 0D       		.uleb128 0xd
 1591 097c 04       		.byte	0x4
 1592 097d 2E090000 		.4byte	0x92e
 1593 0981 10       		.uleb128 0x10
 1594 0982 7B090000 		.4byte	0x97b
 1595 0986 03       		.uleb128 0x3
 1596 0987 090B0000 		.4byte	.LASF117
 1597 098b 06       		.byte	0x6
 1598 098c 91       		.byte	0x91
 1599 098d 3E090000 		.4byte	0x93e
 1600 0991 0B       		.uleb128 0xb
 1601 0992 01       		.byte	0x1
 1602 0993 16       		.byte	0x16
 1603 0994 21       		.byte	0x21
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 61


 1604 0995 A6090000 		.4byte	0x9a6
 1605 0999 0C       		.uleb128 0xc
 1606 099a 170A0000 		.4byte	.LASF118
 1607 099e 16       		.byte	0x16
 1608 099f 23       		.byte	0x23
 1609 09a0 8C000000 		.4byte	0x8c
 1610 09a4 00       		.byte	0
 1611 09a5 00       		.byte	0
 1612 09a6 03       		.uleb128 0x3
 1613 09a7 060A0000 		.4byte	.LASF119
 1614 09ab 16       		.byte	0x16
 1615 09ac 26       		.byte	0x26
 1616 09ad 91090000 		.4byte	0x991
 1617 09b1 03       		.uleb128 0x3
 1618 09b2 21030000 		.4byte	.LASF120
 1619 09b6 07       		.byte	0x7
 1620 09b7 26       		.byte	0x26
 1621 09b8 BC090000 		.4byte	0x9bc
 1622 09bc 0D       		.uleb128 0xd
 1623 09bd 04       		.byte	0x4
 1624 09be C2090000 		.4byte	0x9c2
 1625 09c2 0E       		.uleb128 0xe
 1626 09c3 E9010000 		.4byte	0x1e9
 1627 09c7 D1090000 		.4byte	0x9d1
 1628 09cb 0F       		.uleb128 0xf
 1629 09cc D7090000 		.4byte	0x9d7
 1630 09d0 00       		.byte	0
 1631 09d1 0D       		.uleb128 0xd
 1632 09d2 04       		.byte	0x4
 1633 09d3 A6090000 		.4byte	0x9a6
 1634 09d7 10       		.uleb128 0x10
 1635 09d8 D1090000 		.4byte	0x9d1
 1636 09dc 03       		.uleb128 0x3
 1637 09dd A2040000 		.4byte	.LASF121
 1638 09e1 07       		.byte	0x7
 1639 09e2 2C       		.byte	0x2c
 1640 09e3 E7090000 		.4byte	0x9e7
 1641 09e7 0D       		.uleb128 0xd
 1642 09e8 04       		.byte	0x4
 1643 09e9 ED090000 		.4byte	0x9ed
 1644 09ed 0E       		.uleb128 0xe
 1645 09ee E9010000 		.4byte	0x1e9
 1646 09f2 FC090000 		.4byte	0x9fc
 1647 09f6 0F       		.uleb128 0xf
 1648 09f7 070A0000 		.4byte	0xa07
 1649 09fb 00       		.byte	0
 1650 09fc 0D       		.uleb128 0xd
 1651 09fd 04       		.byte	0x4
 1652 09fe 020A0000 		.4byte	0xa02
 1653 0a02 10       		.uleb128 0x10
 1654 0a03 A6090000 		.4byte	0x9a6
 1655 0a07 10       		.uleb128 0x10
 1656 0a08 FC090000 		.4byte	0x9fc
 1657 0a0c 11       		.uleb128 0x11
 1658 0a0d 870A0000 		.4byte	.LASF122
 1659 0a11 28       		.byte	0x28
 1660 0a12 07       		.byte	0x7
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 62


 1661 0a13 36       		.byte	0x36
 1662 0a14 910A0000 		.4byte	0xa91
 1663 0a18 0C       		.uleb128 0xc
 1664 0a19 F0060000 		.4byte	.LASF69
 1665 0a1d 07       		.byte	0x7
 1666 0a1e 3B       		.byte	0x3b
 1667 0a1f 910A0000 		.4byte	0xa91
 1668 0a23 00       		.byte	0
 1669 0a24 0C       		.uleb128 0xc
 1670 0a25 BE030000 		.4byte	.LASF70
 1671 0a29 07       		.byte	0x7
 1672 0a2a 40       		.byte	0x40
 1673 0a2b 960A0000 		.4byte	0xa96
 1674 0a2f 04       		.byte	0x4
 1675 0a30 0C       		.uleb128 0xc
 1676 0a31 D7010000 		.4byte	.LASF71
 1677 0a35 07       		.byte	0x7
 1678 0a36 45       		.byte	0x45
 1679 0a37 5B030000 		.4byte	0x35b
 1680 0a3b 08       		.byte	0x8
 1681 0a3c 0C       		.uleb128 0xc
 1682 0a3d 5E080000 		.4byte	.LASF72
 1683 0a41 07       		.byte	0x7
 1684 0a42 4B       		.byte	0x4b
 1685 0a43 5B030000 		.4byte	0x35b
 1686 0a47 0C       		.byte	0xc
 1687 0a48 0C       		.uleb128 0xc
 1688 0a49 CC020000 		.4byte	.LASF73
 1689 0a4d 07       		.byte	0x7
 1690 0a4e 50       		.byte	0x50
 1691 0a4f 60030000 		.4byte	0x360
 1692 0a53 10       		.byte	0x10
 1693 0a54 0C       		.uleb128 0xc
 1694 0a55 A0070000 		.4byte	.LASF74
 1695 0a59 07       		.byte	0x7
 1696 0a5a 55       		.byte	0x55
 1697 0a5b 6B030000 		.4byte	0x36b
 1698 0a5f 14       		.byte	0x14
 1699 0a60 0C       		.uleb128 0xc
 1700 0a61 16070000 		.4byte	.LASF75
 1701 0a65 07       		.byte	0x7
 1702 0a66 5A       		.byte	0x5a
 1703 0a67 60030000 		.4byte	0x360
 1704 0a6b 18       		.byte	0x18
 1705 0a6c 0C       		.uleb128 0xc
 1706 0a6d 190B0000 		.4byte	.LASF76
 1707 0a71 07       		.byte	0x7
 1708 0a72 5F       		.byte	0x5f
 1709 0a73 6B030000 		.4byte	0x36b
 1710 0a77 1C       		.byte	0x1c
 1711 0a78 0C       		.uleb128 0xc
 1712 0a79 24090000 		.4byte	.LASF77
 1713 0a7d 07       		.byte	0x7
 1714 0a7e 65       		.byte	0x65
 1715 0a7f 70030000 		.4byte	0x370
 1716 0a83 20       		.byte	0x20
 1717 0a84 0C       		.uleb128 0xc
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 63


 1718 0a85 28000000 		.4byte	.LASF78
 1719 0a89 07       		.byte	0x7
 1720 0a8a 6A       		.byte	0x6a
 1721 0a8b 75030000 		.4byte	0x375
 1722 0a8f 24       		.byte	0x24
 1723 0a90 00       		.byte	0
 1724 0a91 10       		.uleb128 0x10
 1725 0a92 B1090000 		.4byte	0x9b1
 1726 0a96 10       		.uleb128 0x10
 1727 0a97 DC090000 		.4byte	0x9dc
 1728 0a9b 03       		.uleb128 0x3
 1729 0a9c 970A0000 		.4byte	.LASF123
 1730 0aa0 07       		.byte	0x7
 1731 0aa1 6D       		.byte	0x6d
 1732 0aa2 A60A0000 		.4byte	0xaa6
 1733 0aa6 10       		.uleb128 0x10
 1734 0aa7 0C0A0000 		.4byte	0xa0c
 1735 0aab 11       		.uleb128 0x11
 1736 0aac 66090000 		.4byte	.LASF124
 1737 0ab0 0C       		.byte	0xc
 1738 0ab1 07       		.byte	0x7
 1739 0ab2 79       		.byte	0x79
 1740 0ab3 E80A0000 		.4byte	0xae8
 1741 0ab7 0C       		.uleb128 0xc
 1742 0ab8 1B030000 		.4byte	.LASF82
 1743 0abc 07       		.byte	0x7
 1744 0abd 7F       		.byte	0x7f
 1745 0abe A6090000 		.4byte	0x9a6
 1746 0ac2 00       		.byte	0
 1747 0ac3 0C       		.uleb128 0xc
 1748 0ac4 2C0A0000 		.4byte	.LASF83
 1749 0ac8 07       		.byte	0x7
 1750 0ac9 84       		.byte	0x84
 1751 0aca 3A020000 		.4byte	0x23a
 1752 0ace 01       		.byte	0x1
 1753 0acf 12       		.uleb128 0x12
 1754 0ad0 61676500 		.ascii	"age\000"
 1755 0ad4 07       		.byte	0x7
 1756 0ad5 89       		.byte	0x89
 1757 0ad6 A2000000 		.4byte	0xa2
 1758 0ada 04       		.byte	0x4
 1759 0adb 0C       		.uleb128 0xc
 1760 0adc 7B080000 		.4byte	.LASF84
 1761 0ae0 07       		.byte	0x7
 1762 0ae1 8E       		.byte	0x8e
 1763 0ae2 EE0A0000 		.4byte	0xaee
 1764 0ae6 08       		.byte	0x8
 1765 0ae7 00       		.byte	0
 1766 0ae8 0D       		.uleb128 0xd
 1767 0ae9 04       		.byte	0x4
 1768 0aea 9B0A0000 		.4byte	0xa9b
 1769 0aee 10       		.uleb128 0x10
 1770 0aef E80A0000 		.4byte	0xae8
 1771 0af3 03       		.uleb128 0x3
 1772 0af4 1C060000 		.4byte	.LASF125
 1773 0af8 07       		.byte	0x7
 1774 0af9 91       		.byte	0x91
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 64


 1775 0afa AB0A0000 		.4byte	0xaab
 1776 0afe 13       		.uleb128 0x13
 1777 0aff 610A0000 		.4byte	.LASF128
 1778 0b03 07       		.byte	0x7
 1779 0b04 EF       		.byte	0xef
 1780 0b05 03       		.byte	0x3
 1781 0b06 210B0000 		.4byte	0xb21
 1782 0b0a 14       		.uleb128 0x14
 1783 0b0b B5080000 		.4byte	.LASF126
 1784 0b0f 07       		.byte	0x7
 1785 0b10 EF       		.byte	0xef
 1786 0b11 270B0000 		.4byte	0xb27
 1787 0b15 14       		.uleb128 0x14
 1788 0b16 00000000 		.4byte	.LASF127
 1789 0b1a 07       		.byte	0x7
 1790 0b1b EF       		.byte	0xef
 1791 0b1c A2000000 		.4byte	0xa2
 1792 0b20 00       		.byte	0
 1793 0b21 0D       		.uleb128 0xd
 1794 0b22 04       		.byte	0x4
 1795 0b23 F30A0000 		.4byte	0xaf3
 1796 0b27 10       		.uleb128 0x10
 1797 0b28 210B0000 		.4byte	0xb21
 1798 0b2c 13       		.uleb128 0x13
 1799 0b2d DE040000 		.4byte	.LASF129
 1800 0b31 06       		.byte	0x6
 1801 0b32 EF       		.byte	0xef
 1802 0b33 03       		.byte	0x3
 1803 0b34 4F0B0000 		.4byte	0xb4f
 1804 0b38 14       		.uleb128 0x14
 1805 0b39 B5080000 		.4byte	.LASF126
 1806 0b3d 06       		.byte	0x6
 1807 0b3e EF       		.byte	0xef
 1808 0b3f 550B0000 		.4byte	0xb55
 1809 0b43 14       		.uleb128 0x14
 1810 0b44 00000000 		.4byte	.LASF127
 1811 0b48 06       		.byte	0x6
 1812 0b49 EF       		.byte	0xef
 1813 0b4a A2000000 		.4byte	0xa2
 1814 0b4e 00       		.byte	0
 1815 0b4f 0D       		.uleb128 0xd
 1816 0b50 04       		.byte	0x4
 1817 0b51 86090000 		.4byte	0x986
 1818 0b55 10       		.uleb128 0x10
 1819 0b56 4F0B0000 		.4byte	0xb4f
 1820 0b5a 13       		.uleb128 0x13
 1821 0b5b 81010000 		.4byte	.LASF130
 1822 0b5f 05       		.byte	0x5
 1823 0b60 EF       		.byte	0xef
 1824 0b61 03       		.byte	0x3
 1825 0b62 7D0B0000 		.4byte	0xb7d
 1826 0b66 14       		.uleb128 0x14
 1827 0b67 B5080000 		.4byte	.LASF126
 1828 0b6b 05       		.byte	0x5
 1829 0b6c EF       		.byte	0xef
 1830 0b6d 830B0000 		.4byte	0xb83
 1831 0b71 14       		.uleb128 0x14
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 65


 1832 0b72 00000000 		.4byte	.LASF127
 1833 0b76 05       		.byte	0x5
 1834 0b77 EF       		.byte	0xef
 1835 0b78 A2000000 		.4byte	0xa2
 1836 0b7c 00       		.byte	0
 1837 0b7d 0D       		.uleb128 0xd
 1838 0b7e 04       		.byte	0x4
 1839 0b7f 19080000 		.4byte	0x819
 1840 0b83 10       		.uleb128 0x10
 1841 0b84 7D0B0000 		.4byte	0xb7d
 1842 0b88 13       		.uleb128 0x13
 1843 0b89 E40A0000 		.4byte	.LASF131
 1844 0b8d 04       		.byte	0x4
 1845 0b8e EF       		.byte	0xef
 1846 0b8f 03       		.byte	0x3
 1847 0b90 AB0B0000 		.4byte	0xbab
 1848 0b94 14       		.uleb128 0x14
 1849 0b95 B5080000 		.4byte	.LASF126
 1850 0b99 04       		.byte	0x4
 1851 0b9a EF       		.byte	0xef
 1852 0b9b B10B0000 		.4byte	0xbb1
 1853 0b9f 14       		.uleb128 0x14
 1854 0ba0 00000000 		.4byte	.LASF127
 1855 0ba4 04       		.byte	0x4
 1856 0ba5 EF       		.byte	0xef
 1857 0ba6 A2000000 		.4byte	0xa2
 1858 0baa 00       		.byte	0
 1859 0bab 0D       		.uleb128 0xd
 1860 0bac 04       		.byte	0x4
 1861 0bad AC060000 		.4byte	0x6ac
 1862 0bb1 10       		.uleb128 0x10
 1863 0bb2 AB0B0000 		.4byte	0xbab
 1864 0bb6 13       		.uleb128 0x13
 1865 0bb7 BC070000 		.4byte	.LASF132
 1866 0bbb 03       		.byte	0x3
 1867 0bbc EF       		.byte	0xef
 1868 0bbd 03       		.byte	0x3
 1869 0bbe D90B0000 		.4byte	0xbd9
 1870 0bc2 14       		.uleb128 0x14
 1871 0bc3 B5080000 		.4byte	.LASF126
 1872 0bc7 03       		.byte	0x3
 1873 0bc8 EF       		.byte	0xef
 1874 0bc9 DF0B0000 		.4byte	0xbdf
 1875 0bcd 14       		.uleb128 0x14
 1876 0bce 00000000 		.4byte	.LASF127
 1877 0bd2 03       		.byte	0x3
 1878 0bd3 EF       		.byte	0xef
 1879 0bd4 A2000000 		.4byte	0xa2
 1880 0bd8 00       		.byte	0
 1881 0bd9 0D       		.uleb128 0xd
 1882 0bda 04       		.byte	0x4
 1883 0bdb 3F050000 		.4byte	0x53f
 1884 0bdf 10       		.uleb128 0x10
 1885 0be0 D90B0000 		.4byte	0xbd9
 1886 0be4 13       		.uleb128 0x13
 1887 0be5 CD0A0000 		.4byte	.LASF133
 1888 0be9 02       		.byte	0x2
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 66


 1889 0bea EF       		.byte	0xef
 1890 0beb 03       		.byte	0x3
 1891 0bec 070C0000 		.4byte	0xc07
 1892 0bf0 14       		.uleb128 0x14
 1893 0bf1 B5080000 		.4byte	.LASF126
 1894 0bf5 02       		.byte	0x2
 1895 0bf6 EF       		.byte	0xef
 1896 0bf7 0D0C0000 		.4byte	0xc0d
 1897 0bfb 14       		.uleb128 0x14
 1898 0bfc 00000000 		.4byte	.LASF127
 1899 0c00 02       		.byte	0x2
 1900 0c01 EF       		.byte	0xef
 1901 0c02 A2000000 		.4byte	0xa2
 1902 0c06 00       		.byte	0
 1903 0c07 0D       		.uleb128 0xd
 1904 0c08 04       		.byte	0x4
 1905 0c09 D2030000 		.4byte	0x3d2
 1906 0c0d 10       		.uleb128 0x10
 1907 0c0e 070C0000 		.4byte	0xc07
 1908 0c12 15       		.uleb128 0x15
 1909 0c13 68080000 		.4byte	.LASF134
 1910 0c17 07       		.byte	0x7
 1911 0c18 A0       		.byte	0xa0
 1912 0c19 E9010000 		.4byte	0x1e9
 1913 0c1d 03       		.byte	0x3
 1914 0c1e 390C0000 		.4byte	0xc39
 1915 0c22 14       		.uleb128 0x14
 1916 0c23 B5080000 		.4byte	.LASF126
 1917 0c27 07       		.byte	0x7
 1918 0c28 A0       		.byte	0xa0
 1919 0c29 270B0000 		.4byte	0xb27
 1920 0c2d 16       		.uleb128 0x16
 1921 0c2e 72657400 		.ascii	"ret\000"
 1922 0c32 07       		.byte	0x7
 1923 0c33 A3       		.byte	0xa3
 1924 0c34 E9010000 		.4byte	0x1e9
 1925 0c38 00       		.byte	0
 1926 0c39 15       		.uleb128 0x15
 1927 0c3a 80020000 		.4byte	.LASF135
 1928 0c3e 06       		.byte	0x6
 1929 0c3f A0       		.byte	0xa0
 1930 0c40 E9010000 		.4byte	0x1e9
 1931 0c44 03       		.byte	0x3
 1932 0c45 600C0000 		.4byte	0xc60
 1933 0c49 14       		.uleb128 0x14
 1934 0c4a B5080000 		.4byte	.LASF126
 1935 0c4e 06       		.byte	0x6
 1936 0c4f A0       		.byte	0xa0
 1937 0c50 550B0000 		.4byte	0xb55
 1938 0c54 16       		.uleb128 0x16
 1939 0c55 72657400 		.ascii	"ret\000"
 1940 0c59 06       		.byte	0x6
 1941 0c5a A3       		.byte	0xa3
 1942 0c5b E9010000 		.4byte	0x1e9
 1943 0c5f 00       		.byte	0
 1944 0c60 15       		.uleb128 0x15
 1945 0c61 B8050000 		.4byte	.LASF136
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 67


 1946 0c65 05       		.byte	0x5
 1947 0c66 A0       		.byte	0xa0
 1948 0c67 E9010000 		.4byte	0x1e9
 1949 0c6b 03       		.byte	0x3
 1950 0c6c 870C0000 		.4byte	0xc87
 1951 0c70 14       		.uleb128 0x14
 1952 0c71 B5080000 		.4byte	.LASF126
 1953 0c75 05       		.byte	0x5
 1954 0c76 A0       		.byte	0xa0
 1955 0c77 830B0000 		.4byte	0xb83
 1956 0c7b 16       		.uleb128 0x16
 1957 0c7c 72657400 		.ascii	"ret\000"
 1958 0c80 05       		.byte	0x5
 1959 0c81 A3       		.byte	0xa3
 1960 0c82 E9010000 		.4byte	0x1e9
 1961 0c86 00       		.byte	0
 1962 0c87 15       		.uleb128 0x15
 1963 0c88 AC000000 		.4byte	.LASF137
 1964 0c8c 04       		.byte	0x4
 1965 0c8d A0       		.byte	0xa0
 1966 0c8e E9010000 		.4byte	0x1e9
 1967 0c92 03       		.byte	0x3
 1968 0c93 AE0C0000 		.4byte	0xcae
 1969 0c97 14       		.uleb128 0x14
 1970 0c98 B5080000 		.4byte	.LASF126
 1971 0c9c 04       		.byte	0x4
 1972 0c9d A0       		.byte	0xa0
 1973 0c9e B10B0000 		.4byte	0xbb1
 1974 0ca2 16       		.uleb128 0x16
 1975 0ca3 72657400 		.ascii	"ret\000"
 1976 0ca7 04       		.byte	0x4
 1977 0ca8 A3       		.byte	0xa3
 1978 0ca9 E9010000 		.4byte	0x1e9
 1979 0cad 00       		.byte	0
 1980 0cae 15       		.uleb128 0x15
 1981 0caf 16000000 		.4byte	.LASF138
 1982 0cb3 03       		.byte	0x3
 1983 0cb4 A0       		.byte	0xa0
 1984 0cb5 E9010000 		.4byte	0x1e9
 1985 0cb9 03       		.byte	0x3
 1986 0cba D50C0000 		.4byte	0xcd5
 1987 0cbe 14       		.uleb128 0x14
 1988 0cbf B5080000 		.4byte	.LASF126
 1989 0cc3 03       		.byte	0x3
 1990 0cc4 A0       		.byte	0xa0
 1991 0cc5 DF0B0000 		.4byte	0xbdf
 1992 0cc9 16       		.uleb128 0x16
 1993 0cca 72657400 		.ascii	"ret\000"
 1994 0cce 03       		.byte	0x3
 1995 0ccf A3       		.byte	0xa3
 1996 0cd0 E9010000 		.4byte	0x1e9
 1997 0cd4 00       		.byte	0
 1998 0cd5 15       		.uleb128 0x15
 1999 0cd6 C2010000 		.4byte	.LASF139
 2000 0cda 02       		.byte	0x2
 2001 0cdb A0       		.byte	0xa0
 2002 0cdc E9010000 		.4byte	0x1e9
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 68


 2003 0ce0 03       		.byte	0x3
 2004 0ce1 FC0C0000 		.4byte	0xcfc
 2005 0ce5 14       		.uleb128 0x14
 2006 0ce6 B5080000 		.4byte	.LASF126
 2007 0cea 02       		.byte	0x2
 2008 0ceb A0       		.byte	0xa0
 2009 0cec 0D0C0000 		.4byte	0xc0d
 2010 0cf0 16       		.uleb128 0x16
 2011 0cf1 72657400 		.ascii	"ret\000"
 2012 0cf5 02       		.byte	0x2
 2013 0cf6 A3       		.byte	0xa3
 2014 0cf7 E9010000 		.4byte	0x1e9
 2015 0cfb 00       		.byte	0
 2016 0cfc 17       		.uleb128 0x17
 2017 0cfd 83070000 		.4byte	.LASF165
 2018 0d01 01       		.byte	0x1
 2019 0d02 4201     		.2byte	0x142
 2020 0d04 00000000 		.4byte	.LFB180
 2021 0d08 68000000 		.4byte	.LFE180-.LFB180
 2022 0d0c 01       		.uleb128 0x1
 2023 0d0d 9C       		.byte	0x9c
 2024 0d0e 090E0000 		.4byte	0xe09
 2025 0d12 18       		.uleb128 0x18
 2026 0d13 C7020000 		.4byte	.LASF166
 2027 0d17 01       		.byte	0x1
 2028 0d18 4201     		.2byte	0x142
 2029 0d1a A2000000 		.4byte	0xa2
 2030 0d1e 00000000 		.4byte	.LLST0
 2031 0d22 19       		.uleb128 0x19
 2032 0d23 E40B0000 		.4byte	0xbe4
 2033 0d27 00000000 		.4byte	.LBB26
 2034 0d2b 10000000 		.4byte	.LBE26-.LBB26
 2035 0d2f 01       		.byte	0x1
 2036 0d30 4301     		.2byte	0x143
 2037 0d32 490D0000 		.4byte	0xd49
 2038 0d36 1A       		.uleb128 0x1a
 2039 0d37 FB0B0000 		.4byte	0xbfb
 2040 0d3b 21000000 		.4byte	.LLST1
 2041 0d3f 1A       		.uleb128 0x1a
 2042 0d40 F00B0000 		.4byte	0xbf0
 2043 0d44 34000000 		.4byte	.LLST2
 2044 0d48 00       		.byte	0
 2045 0d49 19       		.uleb128 0x19
 2046 0d4a B60B0000 		.4byte	0xbb6
 2047 0d4e 10000000 		.4byte	.LBB28
 2048 0d52 10000000 		.4byte	.LBE28-.LBB28
 2049 0d56 01       		.byte	0x1
 2050 0d57 4401     		.2byte	0x144
 2051 0d59 700D0000 		.4byte	0xd70
 2052 0d5d 1A       		.uleb128 0x1a
 2053 0d5e CD0B0000 		.4byte	0xbcd
 2054 0d62 4C000000 		.4byte	.LLST3
 2055 0d66 1A       		.uleb128 0x1a
 2056 0d67 C20B0000 		.4byte	0xbc2
 2057 0d6b 5F000000 		.4byte	.LLST4
 2058 0d6f 00       		.byte	0
 2059 0d70 19       		.uleb128 0x19
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 69


 2060 0d71 880B0000 		.4byte	0xb88
 2061 0d75 20000000 		.4byte	.LBB30
 2062 0d79 10000000 		.4byte	.LBE30-.LBB30
 2063 0d7d 01       		.byte	0x1
 2064 0d7e 4501     		.2byte	0x145
 2065 0d80 970D0000 		.4byte	0xd97
 2066 0d84 1A       		.uleb128 0x1a
 2067 0d85 9F0B0000 		.4byte	0xb9f
 2068 0d89 77000000 		.4byte	.LLST5
 2069 0d8d 1A       		.uleb128 0x1a
 2070 0d8e 940B0000 		.4byte	0xb94
 2071 0d92 8A000000 		.4byte	.LLST6
 2072 0d96 00       		.byte	0
 2073 0d97 19       		.uleb128 0x19
 2074 0d98 5A0B0000 		.4byte	0xb5a
 2075 0d9c 30000000 		.4byte	.LBB32
 2076 0da0 10000000 		.4byte	.LBE32-.LBB32
 2077 0da4 01       		.byte	0x1
 2078 0da5 4601     		.2byte	0x146
 2079 0da7 BE0D0000 		.4byte	0xdbe
 2080 0dab 1A       		.uleb128 0x1a
 2081 0dac 710B0000 		.4byte	0xb71
 2082 0db0 A2000000 		.4byte	.LLST7
 2083 0db4 1A       		.uleb128 0x1a
 2084 0db5 660B0000 		.4byte	0xb66
 2085 0db9 B5000000 		.4byte	.LLST8
 2086 0dbd 00       		.byte	0
 2087 0dbe 19       		.uleb128 0x19
 2088 0dbf 2C0B0000 		.4byte	0xb2c
 2089 0dc3 40000000 		.4byte	.LBB34
 2090 0dc7 10000000 		.4byte	.LBE34-.LBB34
 2091 0dcb 01       		.byte	0x1
 2092 0dcc 4701     		.2byte	0x147
 2093 0dce E50D0000 		.4byte	0xde5
 2094 0dd2 1A       		.uleb128 0x1a
 2095 0dd3 430B0000 		.4byte	0xb43
 2096 0dd7 CD000000 		.4byte	.LLST9
 2097 0ddb 1A       		.uleb128 0x1a
 2098 0ddc 380B0000 		.4byte	0xb38
 2099 0de0 E0000000 		.4byte	.LLST10
 2100 0de4 00       		.byte	0
 2101 0de5 1B       		.uleb128 0x1b
 2102 0de6 FE0A0000 		.4byte	0xafe
 2103 0dea 50000000 		.4byte	.LBB36
 2104 0dee 18000000 		.4byte	.LBE36-.LBB36
 2105 0df2 01       		.byte	0x1
 2106 0df3 4801     		.2byte	0x148
 2107 0df5 1A       		.uleb128 0x1a
 2108 0df6 150B0000 		.4byte	0xb15
 2109 0dfa F8000000 		.4byte	.LLST11
 2110 0dfe 1A       		.uleb128 0x1a
 2111 0dff 0A0B0000 		.4byte	0xb0a
 2112 0e03 19010000 		.4byte	.LLST12
 2113 0e07 00       		.byte	0
 2114 0e08 00       		.byte	0
 2115 0e09 1C       		.uleb128 0x1c
 2116 0e0a 33090000 		.4byte	.LASF167
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 70


 2117 0e0e 01       		.byte	0x1
 2118 0e0f 4F01     		.2byte	0x14f
 2119 0e11 00000000 		.4byte	.LFB181
 2120 0e15 40000000 		.4byte	.LFE181-.LFB181
 2121 0e19 01       		.uleb128 0x1
 2122 0e1a 9C       		.byte	0x9c
 2123 0e1b 300F0000 		.4byte	0xf30
 2124 0e1f 19       		.uleb128 0x19
 2125 0e20 D50C0000 		.4byte	0xcd5
 2126 0e24 00000000 		.4byte	.LBB38
 2127 0e28 0E000000 		.4byte	.LBE38-.LBB38
 2128 0e2c 01       		.byte	0x1
 2129 0e2d 5001     		.2byte	0x150
 2130 0e2f 4D0E0000 		.4byte	0xe4d
 2131 0e33 1A       		.uleb128 0x1a
 2132 0e34 E50C0000 		.4byte	0xce5
 2133 0e38 31010000 		.4byte	.LLST13
 2134 0e3c 1D       		.uleb128 0x1d
 2135 0e3d 00000000 		.4byte	.LBB39
 2136 0e41 0E000000 		.4byte	.LBE39-.LBB39
 2137 0e45 1E       		.uleb128 0x1e
 2138 0e46 F00C0000 		.4byte	0xcf0
 2139 0e4a 00       		.byte	0
 2140 0e4b 00       		.byte	0
 2141 0e4c 00       		.byte	0
 2142 0e4d 19       		.uleb128 0x19
 2143 0e4e AE0C0000 		.4byte	0xcae
 2144 0e52 0E000000 		.4byte	.LBB40
 2145 0e56 06000000 		.4byte	.LBE40-.LBB40
 2146 0e5a 01       		.byte	0x1
 2147 0e5b 5101     		.2byte	0x151
 2148 0e5d 7B0E0000 		.4byte	0xe7b
 2149 0e61 1A       		.uleb128 0x1a
 2150 0e62 BE0C0000 		.4byte	0xcbe
 2151 0e66 49010000 		.4byte	.LLST14
 2152 0e6a 1D       		.uleb128 0x1d
 2153 0e6b 0E000000 		.4byte	.LBB41
 2154 0e6f 06000000 		.4byte	.LBE41-.LBB41
 2155 0e73 1E       		.uleb128 0x1e
 2156 0e74 C90C0000 		.4byte	0xcc9
 2157 0e78 00       		.byte	0
 2158 0e79 00       		.byte	0
 2159 0e7a 00       		.byte	0
 2160 0e7b 19       		.uleb128 0x19
 2161 0e7c 870C0000 		.4byte	0xc87
 2162 0e80 14000000 		.4byte	.LBB42
 2163 0e84 06000000 		.4byte	.LBE42-.LBB42
 2164 0e88 01       		.byte	0x1
 2165 0e89 5201     		.2byte	0x152
 2166 0e8b A90E0000 		.4byte	0xea9
 2167 0e8f 1A       		.uleb128 0x1a
 2168 0e90 970C0000 		.4byte	0xc97
 2169 0e94 61010000 		.4byte	.LLST15
 2170 0e98 1D       		.uleb128 0x1d
 2171 0e99 14000000 		.4byte	.LBB43
 2172 0e9d 06000000 		.4byte	.LBE43-.LBB43
 2173 0ea1 1E       		.uleb128 0x1e
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 71


 2174 0ea2 A20C0000 		.4byte	0xca2
 2175 0ea6 00       		.byte	0
 2176 0ea7 00       		.byte	0
 2177 0ea8 00       		.byte	0
 2178 0ea9 19       		.uleb128 0x19
 2179 0eaa 600C0000 		.4byte	0xc60
 2180 0eae 1A000000 		.4byte	.LBB44
 2181 0eb2 0A000000 		.4byte	.LBE44-.LBB44
 2182 0eb6 01       		.byte	0x1
 2183 0eb7 5301     		.2byte	0x153
 2184 0eb9 D70E0000 		.4byte	0xed7
 2185 0ebd 1A       		.uleb128 0x1a
 2186 0ebe 700C0000 		.4byte	0xc70
 2187 0ec2 79010000 		.4byte	.LLST16
 2188 0ec6 1D       		.uleb128 0x1d
 2189 0ec7 1A000000 		.4byte	.LBB45
 2190 0ecb 0A000000 		.4byte	.LBE45-.LBB45
 2191 0ecf 1E       		.uleb128 0x1e
 2192 0ed0 7B0C0000 		.4byte	0xc7b
 2193 0ed4 00       		.byte	0
 2194 0ed5 00       		.byte	0
 2195 0ed6 00       		.byte	0
 2196 0ed7 19       		.uleb128 0x19
 2197 0ed8 390C0000 		.4byte	0xc39
 2198 0edc 24000000 		.4byte	.LBB46
 2199 0ee0 0A000000 		.4byte	.LBE46-.LBB46
 2200 0ee4 01       		.byte	0x1
 2201 0ee5 5401     		.2byte	0x154
 2202 0ee7 050F0000 		.4byte	0xf05
 2203 0eeb 1A       		.uleb128 0x1a
 2204 0eec 490C0000 		.4byte	0xc49
 2205 0ef0 91010000 		.4byte	.LLST17
 2206 0ef4 1D       		.uleb128 0x1d
 2207 0ef5 24000000 		.4byte	.LBB47
 2208 0ef9 0A000000 		.4byte	.LBE47-.LBB47
 2209 0efd 1E       		.uleb128 0x1e
 2210 0efe 540C0000 		.4byte	0xc54
 2211 0f02 00       		.byte	0
 2212 0f03 00       		.byte	0
 2213 0f04 00       		.byte	0
 2214 0f05 1B       		.uleb128 0x1b
 2215 0f06 120C0000 		.4byte	0xc12
 2216 0f0a 2E000000 		.4byte	.LBB48
 2217 0f0e 12000000 		.4byte	.LBE48-.LBB48
 2218 0f12 01       		.byte	0x1
 2219 0f13 5501     		.2byte	0x155
 2220 0f15 1A       		.uleb128 0x1a
 2221 0f16 220C0000 		.4byte	0xc22
 2222 0f1a A9010000 		.4byte	.LLST18
 2223 0f1e 1D       		.uleb128 0x1d
 2224 0f1f 2E000000 		.4byte	.LBB49
 2225 0f23 12000000 		.4byte	.LBE49-.LBB49
 2226 0f27 1E       		.uleb128 0x1e
 2227 0f28 2D0C0000 		.4byte	0xc2d
 2228 0f2c 00       		.byte	0
 2229 0f2d 00       		.byte	0
 2230 0f2e 00       		.byte	0
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 72


 2231 0f2f 00       		.byte	0
 2232 0f30 1F       		.uleb128 0x1f
 2233 0f31 F9050000 		.4byte	.LASF140
 2234 0f35 01       		.byte	0x1
 2235 0f36 3C       		.byte	0x3c
 2236 0f37 7A030000 		.4byte	0x37a
 2237 0f3b 05       		.uleb128 0x5
 2238 0f3c 03       		.byte	0x3
 2239 0f3d DC000000 		.4byte	SO_JOYSTICK_cfg
 2240 0f41 1F       		.uleb128 0x1f
 2241 0f42 83080000 		.4byte	.LASF141
 2242 0f46 01       		.byte	0x1
 2243 0f47 6B       		.byte	0x6b
 2244 0f48 E7040000 		.4byte	0x4e7
 2245 0f4c 05       		.uleb128 0x5
 2246 0f4d 03       		.byte	0x3
 2247 0f4e B0000000 		.4byte	SO_SPEED_cfg
 2248 0f52 1F       		.uleb128 0x1f
 2249 0f53 2E040000 		.4byte	.LASF142
 2250 0f57 01       		.byte	0x1
 2251 0f58 97       		.byte	0x97
 2252 0f59 54060000 		.4byte	0x654
 2253 0f5d 05       		.uleb128 0x5
 2254 0f5e 03       		.byte	0x3
 2255 0f5f 88000000 		.4byte	SO_ENGINE_cfg
 2256 0f63 1F       		.uleb128 0x1f
 2257 0f64 CE000000 		.4byte	.LASF143
 2258 0f68 01       		.byte	0x1
 2259 0f69 C6       		.byte	0xc6
 2260 0f6a C1070000 		.4byte	0x7c1
 2261 0f6e 05       		.uleb128 0x5
 2262 0f6f 03       		.byte	0x3
 2263 0f70 58000000 		.4byte	SO_BREAKPEDAL_cfg
 2264 0f74 1F       		.uleb128 0x1f
 2265 0f75 02030000 		.4byte	.LASF144
 2266 0f79 01       		.byte	0x1
 2267 0f7a F2       		.byte	0xf2
 2268 0f7b 2E090000 		.4byte	0x92e
 2269 0f7f 05       		.uleb128 0x5
 2270 0f80 03       		.byte	0x3
 2271 0f81 30000000 		.4byte	SO_BREAKLIGHT_cfg
 2272 0f85 20       		.uleb128 0x20
 2273 0f86 91000000 		.4byte	.LASF145
 2274 0f8a 01       		.byte	0x1
 2275 0f8b 2101     		.2byte	0x121
 2276 0f8d 9B0A0000 		.4byte	0xa9b
 2277 0f91 05       		.uleb128 0x5
 2278 0f92 03       		.byte	0x3
 2279 0f93 00000000 		.4byte	SO_SCREEN_cfg
 2280 0f97 21       		.uleb128 0x21
 2281 0f98 60040000 		.4byte	.LASF146
 2282 0f9c 17       		.byte	0x17
 2283 0f9d 40       		.byte	0x40
 2284 0f9e EA000000 		.4byte	0xea
 2285 0fa2 21       		.uleb128 0x21
 2286 0fa3 CF050000 		.4byte	.LASF147
 2287 0fa7 17       		.byte	0x17
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 73


 2288 0fa8 47       		.byte	0x47
 2289 0fa9 F5000000 		.4byte	0xf5
 2290 0fad 21       		.uleb128 0x21
 2291 0fae 09060000 		.4byte	.LASF148
 2292 0fb2 17       		.byte	0x17
 2293 0fb3 4A       		.byte	0x4a
 2294 0fb4 EA000000 		.4byte	0xea
 2295 0fb8 21       		.uleb128 0x21
 2296 0fb9 DE020000 		.4byte	.LASF149
 2297 0fbd 18       		.byte	0x18
 2298 0fbe 48       		.byte	0x48
 2299 0fbf 00010000 		.4byte	0x100
 2300 0fc3 21       		.uleb128 0x21
 2301 0fc4 330A0000 		.4byte	.LASF150
 2302 0fc8 19       		.byte	0x19
 2303 0fc9 44       		.byte	0x44
 2304 0fca EA000000 		.4byte	0xea
 2305 0fce 22       		.uleb128 0x22
 2306 0fcf 41010000 		.4byte	.LASF151
 2307 0fd3 1A       		.byte	0x1a
 2308 0fd4 1207     		.2byte	0x712
 2309 0fd6 DA0F0000 		.4byte	0xfda
 2310 0fda 23       		.uleb128 0x23
 2311 0fdb 97000000 		.4byte	0x97
 2312 0fdf 24       		.uleb128 0x24
 2313 0fe0 6E030000 		.4byte	.LASF152
 2314 0fe4 01       		.byte	0x1
 2315 0fe5 50       		.byte	0x50
 2316 0fe6 D2030000 		.4byte	0x3d2
 2317 0fea 05       		.uleb128 0x5
 2318 0feb 03       		.byte	0x3
 2319 0fec 00000000 		.4byte	SO_JOYSTICK_signal
 2320 0ff0 24       		.uleb128 0x24
 2321 0ff1 47040000 		.4byte	.LASF153
 2322 0ff5 01       		.byte	0x1
 2323 0ff6 7F       		.byte	0x7f
 2324 0ff7 3F050000 		.4byte	0x53f
 2325 0ffb 05       		.uleb128 0x5
 2326 0ffc 03       		.byte	0x3
 2327 0ffd 00000000 		.4byte	SO_SPEED_signal
 2328 1001 24       		.uleb128 0x24
 2329 1002 30010000 		.4byte	.LASF154
 2330 1006 01       		.byte	0x1
 2331 1007 AB       		.byte	0xab
 2332 1008 AC060000 		.4byte	0x6ac
 2333 100c 05       		.uleb128 0x5
 2334 100d 03       		.byte	0x3
 2335 100e 00000000 		.4byte	SO_ENGINE_signal
 2336 1012 24       		.uleb128 0x24
 2337 1013 4C030000 		.4byte	.LASF155
 2338 1017 01       		.byte	0x1
 2339 1018 DA       		.byte	0xda
 2340 1019 19080000 		.4byte	0x819
 2341 101d 05       		.uleb128 0x5
 2342 101e 03       		.byte	0x3
 2343 101f 00000000 		.4byte	SO_BREAKPEDAL_signal
 2344 1023 25       		.uleb128 0x25
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 74


 2345 1024 3D020000 		.4byte	.LASF156
 2346 1028 01       		.byte	0x1
 2347 1029 0601     		.2byte	0x106
 2348 102b 86090000 		.4byte	0x986
 2349 102f 05       		.uleb128 0x5
 2350 1030 03       		.byte	0x3
 2351 1031 00000000 		.4byte	SO_BREAKLIGHT_signal
 2352 1035 25       		.uleb128 0x25
 2353 1036 31000000 		.4byte	.LASF157
 2354 103a 01       		.byte	0x1
 2355 103b 3501     		.2byte	0x135
 2356 103d F30A0000 		.4byte	0xaf3
 2357 1041 05       		.uleb128 0x5
 2358 1042 03       		.byte	0x3
 2359 1043 00000000 		.4byte	SO_SCREEN_signal
 2360 1047 09       		.uleb128 0x9
 2361 1048 57100000 		.4byte	0x1057
 2362 104c 57100000 		.4byte	0x1057
 2363 1050 26       		.uleb128 0x26
 2364 1051 23010000 		.4byte	0x123
 2365 1055 00       		.byte	0
 2366 1056 00       		.byte	0
 2367 1057 10       		.uleb128 0x10
 2368 1058 0B010000 		.4byte	0x10b
 2369 105c 24       		.uleb128 0x24
 2370 105d 4E010000 		.4byte	.LASF158
 2371 1061 01       		.byte	0x1
 2372 1062 39       		.byte	0x39
 2373 1063 6D100000 		.4byte	0x106d
 2374 1067 05       		.uleb128 0x5
 2375 1068 03       		.byte	0x3
 2376 1069 00000000 		.4byte	so_joystick_updTasks
 2377 106d 10       		.uleb128 0x10
 2378 106e 47100000 		.4byte	0x1047
 2379 1072 24       		.uleb128 0x24
 2380 1073 E6090000 		.4byte	.LASF159
 2381 1077 01       		.byte	0x1
 2382 1078 68       		.byte	0x68
 2383 1079 83100000 		.4byte	0x1083
 2384 107d 05       		.uleb128 0x5
 2385 107e 03       		.byte	0x3
 2386 107f 00000000 		.4byte	so_speed_updTasks
 2387 1083 10       		.uleb128 0x10
 2388 1084 47100000 		.4byte	0x1047
 2389 1088 09       		.uleb128 0x9
 2390 1089 57100000 		.4byte	0x1057
 2391 108d 98100000 		.4byte	0x1098
 2392 1091 26       		.uleb128 0x26
 2393 1092 23010000 		.4byte	0x123
 2394 1096 01       		.byte	0x1
 2395 1097 00       		.byte	0
 2396 1098 24       		.uleb128 0x24
 2397 1099 A7090000 		.4byte	.LASF160
 2398 109d 01       		.byte	0x1
 2399 109e C3       		.byte	0xc3
 2400 109f A9100000 		.4byte	0x10a9
 2401 10a3 05       		.uleb128 0x5
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 75


 2402 10a4 03       		.byte	0x3
 2403 10a5 00000000 		.4byte	so_breakPedal_updTasks
 2404 10a9 10       		.uleb128 0x10
 2405 10aa 88100000 		.4byte	0x1088
 2406 10ae 25       		.uleb128 0x25
 2407 10af 0D050000 		.4byte	.LASF161
 2408 10b3 01       		.byte	0x1
 2409 10b4 1E01     		.2byte	0x11e
 2410 10b6 C0100000 		.4byte	0x10c0
 2411 10ba 05       		.uleb128 0x5
 2412 10bb 03       		.byte	0x3
 2413 10bc 00000000 		.4byte	so_screen_updTasks
 2414 10c0 10       		.uleb128 0x10
 2415 10c1 88100000 		.4byte	0x1088
 2416 10c5 00       		.byte	0
 2417              		.section	.debug_abbrev,"",%progbits
 2418              	.Ldebug_abbrev0:
 2419 0000 01       		.uleb128 0x1
 2420 0001 11       		.uleb128 0x11
 2421 0002 01       		.byte	0x1
 2422 0003 25       		.uleb128 0x25
 2423 0004 0E       		.uleb128 0xe
 2424 0005 13       		.uleb128 0x13
 2425 0006 0B       		.uleb128 0xb
 2426 0007 03       		.uleb128 0x3
 2427 0008 0E       		.uleb128 0xe
 2428 0009 1B       		.uleb128 0x1b
 2429 000a 0E       		.uleb128 0xe
 2430 000b 55       		.uleb128 0x55
 2431 000c 17       		.uleb128 0x17
 2432 000d 11       		.uleb128 0x11
 2433 000e 01       		.uleb128 0x1
 2434 000f 10       		.uleb128 0x10
 2435 0010 17       		.uleb128 0x17
 2436 0011 00       		.byte	0
 2437 0012 00       		.byte	0
 2438 0013 02       		.uleb128 0x2
 2439 0014 24       		.uleb128 0x24
 2440 0015 00       		.byte	0
 2441 0016 0B       		.uleb128 0xb
 2442 0017 0B       		.uleb128 0xb
 2443 0018 3E       		.uleb128 0x3e
 2444 0019 0B       		.uleb128 0xb
 2445 001a 03       		.uleb128 0x3
 2446 001b 0E       		.uleb128 0xe
 2447 001c 00       		.byte	0
 2448 001d 00       		.byte	0
 2449 001e 03       		.uleb128 0x3
 2450 001f 16       		.uleb128 0x16
 2451 0020 00       		.byte	0
 2452 0021 03       		.uleb128 0x3
 2453 0022 0E       		.uleb128 0xe
 2454 0023 3A       		.uleb128 0x3a
 2455 0024 0B       		.uleb128 0xb
 2456 0025 3B       		.uleb128 0x3b
 2457 0026 0B       		.uleb128 0xb
 2458 0027 49       		.uleb128 0x49
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 76


 2459 0028 13       		.uleb128 0x13
 2460 0029 00       		.byte	0
 2461 002a 00       		.byte	0
 2462 002b 04       		.uleb128 0x4
 2463 002c 24       		.uleb128 0x24
 2464 002d 00       		.byte	0
 2465 002e 0B       		.uleb128 0xb
 2466 002f 0B       		.uleb128 0xb
 2467 0030 3E       		.uleb128 0x3e
 2468 0031 0B       		.uleb128 0xb
 2469 0032 03       		.uleb128 0x3
 2470 0033 08       		.uleb128 0x8
 2471 0034 00       		.byte	0
 2472 0035 00       		.byte	0
 2473 0036 05       		.uleb128 0x5
 2474 0037 16       		.uleb128 0x16
 2475 0038 00       		.byte	0
 2476 0039 03       		.uleb128 0x3
 2477 003a 0E       		.uleb128 0xe
 2478 003b 3A       		.uleb128 0x3a
 2479 003c 0B       		.uleb128 0xb
 2480 003d 3B       		.uleb128 0x3b
 2481 003e 05       		.uleb128 0x5
 2482 003f 49       		.uleb128 0x49
 2483 0040 13       		.uleb128 0x13
 2484 0041 00       		.byte	0
 2485 0042 00       		.byte	0
 2486 0043 06       		.uleb128 0x6
 2487 0044 04       		.uleb128 0x4
 2488 0045 01       		.byte	0x1
 2489 0046 0B       		.uleb128 0xb
 2490 0047 0B       		.uleb128 0xb
 2491 0048 49       		.uleb128 0x49
 2492 0049 13       		.uleb128 0x13
 2493 004a 3A       		.uleb128 0x3a
 2494 004b 0B       		.uleb128 0xb
 2495 004c 3B       		.uleb128 0x3b
 2496 004d 0B       		.uleb128 0xb
 2497 004e 01       		.uleb128 0x1
 2498 004f 13       		.uleb128 0x13
 2499 0050 00       		.byte	0
 2500 0051 00       		.byte	0
 2501 0052 07       		.uleb128 0x7
 2502 0053 28       		.uleb128 0x28
 2503 0054 00       		.byte	0
 2504 0055 03       		.uleb128 0x3
 2505 0056 0E       		.uleb128 0xe
 2506 0057 1C       		.uleb128 0x1c
 2507 0058 0B       		.uleb128 0xb
 2508 0059 00       		.byte	0
 2509 005a 00       		.byte	0
 2510 005b 08       		.uleb128 0x8
 2511 005c 28       		.uleb128 0x28
 2512 005d 00       		.byte	0
 2513 005e 03       		.uleb128 0x3
 2514 005f 0E       		.uleb128 0xe
 2515 0060 1C       		.uleb128 0x1c
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 77


 2516 0061 0D       		.uleb128 0xd
 2517 0062 00       		.byte	0
 2518 0063 00       		.byte	0
 2519 0064 09       		.uleb128 0x9
 2520 0065 01       		.uleb128 0x1
 2521 0066 01       		.byte	0x1
 2522 0067 49       		.uleb128 0x49
 2523 0068 13       		.uleb128 0x13
 2524 0069 01       		.uleb128 0x1
 2525 006a 13       		.uleb128 0x13
 2526 006b 00       		.byte	0
 2527 006c 00       		.byte	0
 2528 006d 0A       		.uleb128 0xa
 2529 006e 21       		.uleb128 0x21
 2530 006f 00       		.byte	0
 2531 0070 00       		.byte	0
 2532 0071 00       		.byte	0
 2533 0072 0B       		.uleb128 0xb
 2534 0073 13       		.uleb128 0x13
 2535 0074 01       		.byte	0x1
 2536 0075 0B       		.uleb128 0xb
 2537 0076 0B       		.uleb128 0xb
 2538 0077 3A       		.uleb128 0x3a
 2539 0078 0B       		.uleb128 0xb
 2540 0079 3B       		.uleb128 0x3b
 2541 007a 0B       		.uleb128 0xb
 2542 007b 01       		.uleb128 0x1
 2543 007c 13       		.uleb128 0x13
 2544 007d 00       		.byte	0
 2545 007e 00       		.byte	0
 2546 007f 0C       		.uleb128 0xc
 2547 0080 0D       		.uleb128 0xd
 2548 0081 00       		.byte	0
 2549 0082 03       		.uleb128 0x3
 2550 0083 0E       		.uleb128 0xe
 2551 0084 3A       		.uleb128 0x3a
 2552 0085 0B       		.uleb128 0xb
 2553 0086 3B       		.uleb128 0x3b
 2554 0087 0B       		.uleb128 0xb
 2555 0088 49       		.uleb128 0x49
 2556 0089 13       		.uleb128 0x13
 2557 008a 38       		.uleb128 0x38
 2558 008b 0B       		.uleb128 0xb
 2559 008c 00       		.byte	0
 2560 008d 00       		.byte	0
 2561 008e 0D       		.uleb128 0xd
 2562 008f 0F       		.uleb128 0xf
 2563 0090 00       		.byte	0
 2564 0091 0B       		.uleb128 0xb
 2565 0092 0B       		.uleb128 0xb
 2566 0093 49       		.uleb128 0x49
 2567 0094 13       		.uleb128 0x13
 2568 0095 00       		.byte	0
 2569 0096 00       		.byte	0
 2570 0097 0E       		.uleb128 0xe
 2571 0098 15       		.uleb128 0x15
 2572 0099 01       		.byte	0x1
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 78


 2573 009a 27       		.uleb128 0x27
 2574 009b 19       		.uleb128 0x19
 2575 009c 49       		.uleb128 0x49
 2576 009d 13       		.uleb128 0x13
 2577 009e 01       		.uleb128 0x1
 2578 009f 13       		.uleb128 0x13
 2579 00a0 00       		.byte	0
 2580 00a1 00       		.byte	0
 2581 00a2 0F       		.uleb128 0xf
 2582 00a3 05       		.uleb128 0x5
 2583 00a4 00       		.byte	0
 2584 00a5 49       		.uleb128 0x49
 2585 00a6 13       		.uleb128 0x13
 2586 00a7 00       		.byte	0
 2587 00a8 00       		.byte	0
 2588 00a9 10       		.uleb128 0x10
 2589 00aa 26       		.uleb128 0x26
 2590 00ab 00       		.byte	0
 2591 00ac 49       		.uleb128 0x49
 2592 00ad 13       		.uleb128 0x13
 2593 00ae 00       		.byte	0
 2594 00af 00       		.byte	0
 2595 00b0 11       		.uleb128 0x11
 2596 00b1 13       		.uleb128 0x13
 2597 00b2 01       		.byte	0x1
 2598 00b3 03       		.uleb128 0x3
 2599 00b4 0E       		.uleb128 0xe
 2600 00b5 0B       		.uleb128 0xb
 2601 00b6 0B       		.uleb128 0xb
 2602 00b7 3A       		.uleb128 0x3a
 2603 00b8 0B       		.uleb128 0xb
 2604 00b9 3B       		.uleb128 0x3b
 2605 00ba 0B       		.uleb128 0xb
 2606 00bb 01       		.uleb128 0x1
 2607 00bc 13       		.uleb128 0x13
 2608 00bd 00       		.byte	0
 2609 00be 00       		.byte	0
 2610 00bf 12       		.uleb128 0x12
 2611 00c0 0D       		.uleb128 0xd
 2612 00c1 00       		.byte	0
 2613 00c2 03       		.uleb128 0x3
 2614 00c3 08       		.uleb128 0x8
 2615 00c4 3A       		.uleb128 0x3a
 2616 00c5 0B       		.uleb128 0xb
 2617 00c6 3B       		.uleb128 0x3b
 2618 00c7 0B       		.uleb128 0xb
 2619 00c8 49       		.uleb128 0x49
 2620 00c9 13       		.uleb128 0x13
 2621 00ca 38       		.uleb128 0x38
 2622 00cb 0B       		.uleb128 0xb
 2623 00cc 00       		.byte	0
 2624 00cd 00       		.byte	0
 2625 00ce 13       		.uleb128 0x13
 2626 00cf 2E       		.uleb128 0x2e
 2627 00d0 01       		.byte	0x1
 2628 00d1 3F       		.uleb128 0x3f
 2629 00d2 19       		.uleb128 0x19
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 79


 2630 00d3 03       		.uleb128 0x3
 2631 00d4 0E       		.uleb128 0xe
 2632 00d5 3A       		.uleb128 0x3a
 2633 00d6 0B       		.uleb128 0xb
 2634 00d7 3B       		.uleb128 0x3b
 2635 00d8 0B       		.uleb128 0xb
 2636 00d9 27       		.uleb128 0x27
 2637 00da 19       		.uleb128 0x19
 2638 00db 20       		.uleb128 0x20
 2639 00dc 0B       		.uleb128 0xb
 2640 00dd 01       		.uleb128 0x1
 2641 00de 13       		.uleb128 0x13
 2642 00df 00       		.byte	0
 2643 00e0 00       		.byte	0
 2644 00e1 14       		.uleb128 0x14
 2645 00e2 05       		.uleb128 0x5
 2646 00e3 00       		.byte	0
 2647 00e4 03       		.uleb128 0x3
 2648 00e5 0E       		.uleb128 0xe
 2649 00e6 3A       		.uleb128 0x3a
 2650 00e7 0B       		.uleb128 0xb
 2651 00e8 3B       		.uleb128 0x3b
 2652 00e9 0B       		.uleb128 0xb
 2653 00ea 49       		.uleb128 0x49
 2654 00eb 13       		.uleb128 0x13
 2655 00ec 00       		.byte	0
 2656 00ed 00       		.byte	0
 2657 00ee 15       		.uleb128 0x15
 2658 00ef 2E       		.uleb128 0x2e
 2659 00f0 01       		.byte	0x1
 2660 00f1 3F       		.uleb128 0x3f
 2661 00f2 19       		.uleb128 0x19
 2662 00f3 03       		.uleb128 0x3
 2663 00f4 0E       		.uleb128 0xe
 2664 00f5 3A       		.uleb128 0x3a
 2665 00f6 0B       		.uleb128 0xb
 2666 00f7 3B       		.uleb128 0x3b
 2667 00f8 0B       		.uleb128 0xb
 2668 00f9 27       		.uleb128 0x27
 2669 00fa 19       		.uleb128 0x19
 2670 00fb 49       		.uleb128 0x49
 2671 00fc 13       		.uleb128 0x13
 2672 00fd 20       		.uleb128 0x20
 2673 00fe 0B       		.uleb128 0xb
 2674 00ff 01       		.uleb128 0x1
 2675 0100 13       		.uleb128 0x13
 2676 0101 00       		.byte	0
 2677 0102 00       		.byte	0
 2678 0103 16       		.uleb128 0x16
 2679 0104 34       		.uleb128 0x34
 2680 0105 00       		.byte	0
 2681 0106 03       		.uleb128 0x3
 2682 0107 08       		.uleb128 0x8
 2683 0108 3A       		.uleb128 0x3a
 2684 0109 0B       		.uleb128 0xb
 2685 010a 3B       		.uleb128 0x3b
 2686 010b 0B       		.uleb128 0xb
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 80


 2687 010c 49       		.uleb128 0x49
 2688 010d 13       		.uleb128 0x13
 2689 010e 00       		.byte	0
 2690 010f 00       		.byte	0
 2691 0110 17       		.uleb128 0x17
 2692 0111 2E       		.uleb128 0x2e
 2693 0112 01       		.byte	0x1
 2694 0113 3F       		.uleb128 0x3f
 2695 0114 19       		.uleb128 0x19
 2696 0115 03       		.uleb128 0x3
 2697 0116 0E       		.uleb128 0xe
 2698 0117 3A       		.uleb128 0x3a
 2699 0118 0B       		.uleb128 0xb
 2700 0119 3B       		.uleb128 0x3b
 2701 011a 05       		.uleb128 0x5
 2702 011b 27       		.uleb128 0x27
 2703 011c 19       		.uleb128 0x19
 2704 011d 11       		.uleb128 0x11
 2705 011e 01       		.uleb128 0x1
 2706 011f 12       		.uleb128 0x12
 2707 0120 06       		.uleb128 0x6
 2708 0121 40       		.uleb128 0x40
 2709 0122 18       		.uleb128 0x18
 2710 0123 9742     		.uleb128 0x2117
 2711 0125 19       		.uleb128 0x19
 2712 0126 01       		.uleb128 0x1
 2713 0127 13       		.uleb128 0x13
 2714 0128 00       		.byte	0
 2715 0129 00       		.byte	0
 2716 012a 18       		.uleb128 0x18
 2717 012b 05       		.uleb128 0x5
 2718 012c 00       		.byte	0
 2719 012d 03       		.uleb128 0x3
 2720 012e 0E       		.uleb128 0xe
 2721 012f 3A       		.uleb128 0x3a
 2722 0130 0B       		.uleb128 0xb
 2723 0131 3B       		.uleb128 0x3b
 2724 0132 05       		.uleb128 0x5
 2725 0133 49       		.uleb128 0x49
 2726 0134 13       		.uleb128 0x13
 2727 0135 02       		.uleb128 0x2
 2728 0136 17       		.uleb128 0x17
 2729 0137 00       		.byte	0
 2730 0138 00       		.byte	0
 2731 0139 19       		.uleb128 0x19
 2732 013a 1D       		.uleb128 0x1d
 2733 013b 01       		.byte	0x1
 2734 013c 31       		.uleb128 0x31
 2735 013d 13       		.uleb128 0x13
 2736 013e 11       		.uleb128 0x11
 2737 013f 01       		.uleb128 0x1
 2738 0140 12       		.uleb128 0x12
 2739 0141 06       		.uleb128 0x6
 2740 0142 58       		.uleb128 0x58
 2741 0143 0B       		.uleb128 0xb
 2742 0144 59       		.uleb128 0x59
 2743 0145 05       		.uleb128 0x5
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 81


 2744 0146 01       		.uleb128 0x1
 2745 0147 13       		.uleb128 0x13
 2746 0148 00       		.byte	0
 2747 0149 00       		.byte	0
 2748 014a 1A       		.uleb128 0x1a
 2749 014b 05       		.uleb128 0x5
 2750 014c 00       		.byte	0
 2751 014d 31       		.uleb128 0x31
 2752 014e 13       		.uleb128 0x13
 2753 014f 02       		.uleb128 0x2
 2754 0150 17       		.uleb128 0x17
 2755 0151 00       		.byte	0
 2756 0152 00       		.byte	0
 2757 0153 1B       		.uleb128 0x1b
 2758 0154 1D       		.uleb128 0x1d
 2759 0155 01       		.byte	0x1
 2760 0156 31       		.uleb128 0x31
 2761 0157 13       		.uleb128 0x13
 2762 0158 11       		.uleb128 0x11
 2763 0159 01       		.uleb128 0x1
 2764 015a 12       		.uleb128 0x12
 2765 015b 06       		.uleb128 0x6
 2766 015c 58       		.uleb128 0x58
 2767 015d 0B       		.uleb128 0xb
 2768 015e 59       		.uleb128 0x59
 2769 015f 05       		.uleb128 0x5
 2770 0160 00       		.byte	0
 2771 0161 00       		.byte	0
 2772 0162 1C       		.uleb128 0x1c
 2773 0163 2E       		.uleb128 0x2e
 2774 0164 01       		.byte	0x1
 2775 0165 3F       		.uleb128 0x3f
 2776 0166 19       		.uleb128 0x19
 2777 0167 03       		.uleb128 0x3
 2778 0168 0E       		.uleb128 0xe
 2779 0169 3A       		.uleb128 0x3a
 2780 016a 0B       		.uleb128 0xb
 2781 016b 3B       		.uleb128 0x3b
 2782 016c 05       		.uleb128 0x5
 2783 016d 11       		.uleb128 0x11
 2784 016e 01       		.uleb128 0x1
 2785 016f 12       		.uleb128 0x12
 2786 0170 06       		.uleb128 0x6
 2787 0171 40       		.uleb128 0x40
 2788 0172 18       		.uleb128 0x18
 2789 0173 9742     		.uleb128 0x2117
 2790 0175 19       		.uleb128 0x19
 2791 0176 01       		.uleb128 0x1
 2792 0177 13       		.uleb128 0x13
 2793 0178 00       		.byte	0
 2794 0179 00       		.byte	0
 2795 017a 1D       		.uleb128 0x1d
 2796 017b 0B       		.uleb128 0xb
 2797 017c 01       		.byte	0x1
 2798 017d 11       		.uleb128 0x11
 2799 017e 01       		.uleb128 0x1
 2800 017f 12       		.uleb128 0x12
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 82


 2801 0180 06       		.uleb128 0x6
 2802 0181 00       		.byte	0
 2803 0182 00       		.byte	0
 2804 0183 1E       		.uleb128 0x1e
 2805 0184 34       		.uleb128 0x34
 2806 0185 00       		.byte	0
 2807 0186 31       		.uleb128 0x31
 2808 0187 13       		.uleb128 0x13
 2809 0188 1C       		.uleb128 0x1c
 2810 0189 0B       		.uleb128 0xb
 2811 018a 00       		.byte	0
 2812 018b 00       		.byte	0
 2813 018c 1F       		.uleb128 0x1f
 2814 018d 34       		.uleb128 0x34
 2815 018e 00       		.byte	0
 2816 018f 03       		.uleb128 0x3
 2817 0190 0E       		.uleb128 0xe
 2818 0191 3A       		.uleb128 0x3a
 2819 0192 0B       		.uleb128 0xb
 2820 0193 3B       		.uleb128 0x3b
 2821 0194 0B       		.uleb128 0xb
 2822 0195 49       		.uleb128 0x49
 2823 0196 13       		.uleb128 0x13
 2824 0197 02       		.uleb128 0x2
 2825 0198 18       		.uleb128 0x18
 2826 0199 00       		.byte	0
 2827 019a 00       		.byte	0
 2828 019b 20       		.uleb128 0x20
 2829 019c 34       		.uleb128 0x34
 2830 019d 00       		.byte	0
 2831 019e 03       		.uleb128 0x3
 2832 019f 0E       		.uleb128 0xe
 2833 01a0 3A       		.uleb128 0x3a
 2834 01a1 0B       		.uleb128 0xb
 2835 01a2 3B       		.uleb128 0x3b
 2836 01a3 05       		.uleb128 0x5
 2837 01a4 49       		.uleb128 0x49
 2838 01a5 13       		.uleb128 0x13
 2839 01a6 02       		.uleb128 0x2
 2840 01a7 18       		.uleb128 0x18
 2841 01a8 00       		.byte	0
 2842 01a9 00       		.byte	0
 2843 01aa 21       		.uleb128 0x21
 2844 01ab 34       		.uleb128 0x34
 2845 01ac 00       		.byte	0
 2846 01ad 03       		.uleb128 0x3
 2847 01ae 0E       		.uleb128 0xe
 2848 01af 3A       		.uleb128 0x3a
 2849 01b0 0B       		.uleb128 0xb
 2850 01b1 3B       		.uleb128 0x3b
 2851 01b2 0B       		.uleb128 0xb
 2852 01b3 49       		.uleb128 0x49
 2853 01b4 13       		.uleb128 0x13
 2854 01b5 3F       		.uleb128 0x3f
 2855 01b6 19       		.uleb128 0x19
 2856 01b7 3C       		.uleb128 0x3c
 2857 01b8 19       		.uleb128 0x19
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 83


 2858 01b9 00       		.byte	0
 2859 01ba 00       		.byte	0
 2860 01bb 22       		.uleb128 0x22
 2861 01bc 34       		.uleb128 0x34
 2862 01bd 00       		.byte	0
 2863 01be 03       		.uleb128 0x3
 2864 01bf 0E       		.uleb128 0xe
 2865 01c0 3A       		.uleb128 0x3a
 2866 01c1 0B       		.uleb128 0xb
 2867 01c2 3B       		.uleb128 0x3b
 2868 01c3 05       		.uleb128 0x5
 2869 01c4 49       		.uleb128 0x49
 2870 01c5 13       		.uleb128 0x13
 2871 01c6 3F       		.uleb128 0x3f
 2872 01c7 19       		.uleb128 0x19
 2873 01c8 3C       		.uleb128 0x3c
 2874 01c9 19       		.uleb128 0x19
 2875 01ca 00       		.byte	0
 2876 01cb 00       		.byte	0
 2877 01cc 23       		.uleb128 0x23
 2878 01cd 35       		.uleb128 0x35
 2879 01ce 00       		.byte	0
 2880 01cf 49       		.uleb128 0x49
 2881 01d0 13       		.uleb128 0x13
 2882 01d1 00       		.byte	0
 2883 01d2 00       		.byte	0
 2884 01d3 24       		.uleb128 0x24
 2885 01d4 34       		.uleb128 0x34
 2886 01d5 00       		.byte	0
 2887 01d6 03       		.uleb128 0x3
 2888 01d7 0E       		.uleb128 0xe
 2889 01d8 3A       		.uleb128 0x3a
 2890 01d9 0B       		.uleb128 0xb
 2891 01da 3B       		.uleb128 0x3b
 2892 01db 0B       		.uleb128 0xb
 2893 01dc 49       		.uleb128 0x49
 2894 01dd 13       		.uleb128 0x13
 2895 01de 3F       		.uleb128 0x3f
 2896 01df 19       		.uleb128 0x19
 2897 01e0 02       		.uleb128 0x2
 2898 01e1 18       		.uleb128 0x18
 2899 01e2 00       		.byte	0
 2900 01e3 00       		.byte	0
 2901 01e4 25       		.uleb128 0x25
 2902 01e5 34       		.uleb128 0x34
 2903 01e6 00       		.byte	0
 2904 01e7 03       		.uleb128 0x3
 2905 01e8 0E       		.uleb128 0xe
 2906 01e9 3A       		.uleb128 0x3a
 2907 01ea 0B       		.uleb128 0xb
 2908 01eb 3B       		.uleb128 0x3b
 2909 01ec 05       		.uleb128 0x5
 2910 01ed 49       		.uleb128 0x49
 2911 01ee 13       		.uleb128 0x13
 2912 01ef 3F       		.uleb128 0x3f
 2913 01f0 19       		.uleb128 0x19
 2914 01f1 02       		.uleb128 0x2
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 84


 2915 01f2 18       		.uleb128 0x18
 2916 01f3 00       		.byte	0
 2917 01f4 00       		.byte	0
 2918 01f5 26       		.uleb128 0x26
 2919 01f6 21       		.uleb128 0x21
 2920 01f7 00       		.byte	0
 2921 01f8 49       		.uleb128 0x49
 2922 01f9 13       		.uleb128 0x13
 2923 01fa 2F       		.uleb128 0x2f
 2924 01fb 0B       		.uleb128 0xb
 2925 01fc 00       		.byte	0
 2926 01fd 00       		.byte	0
 2927 01fe 00       		.byte	0
 2928              		.section	.debug_loc,"",%progbits
 2929              	.Ldebug_loc0:
 2930              	.LLST0:
 2931 0000 00000000 		.4byte	.LVL0
 2932 0004 56000000 		.4byte	.LVL6
 2933 0008 0100     		.2byte	0x1
 2934 000a 50       		.byte	0x50
 2935 000b 56000000 		.4byte	.LVL6
 2936 000f 68000000 		.4byte	.LFE180
 2937 0013 0400     		.2byte	0x4
 2938 0015 F3       		.byte	0xf3
 2939 0016 01       		.uleb128 0x1
 2940 0017 50       		.byte	0x50
 2941 0018 9F       		.byte	0x9f
 2942 0019 00000000 		.4byte	0
 2943 001d 00000000 		.4byte	0
 2944              	.LLST1:
 2945 0021 00000000 		.4byte	.LVL0
 2946 0025 10000000 		.4byte	.LVL1
 2947 0029 0100     		.2byte	0x1
 2948 002b 50       		.byte	0x50
 2949 002c 00000000 		.4byte	0
 2950 0030 00000000 		.4byte	0
 2951              	.LLST2:
 2952 0034 00000000 		.4byte	.LVL0
 2953 0038 10000000 		.4byte	.LVL1
 2954 003c 0600     		.2byte	0x6
 2955 003e 03       		.byte	0x3
 2956 003f 00000000 		.4byte	SO_JOYSTICK_signal
 2957 0043 9F       		.byte	0x9f
 2958 0044 00000000 		.4byte	0
 2959 0048 00000000 		.4byte	0
 2960              	.LLST3:
 2961 004c 10000000 		.4byte	.LVL1
 2962 0050 20000000 		.4byte	.LVL2
 2963 0054 0100     		.2byte	0x1
 2964 0056 50       		.byte	0x50
 2965 0057 00000000 		.4byte	0
 2966 005b 00000000 		.4byte	0
 2967              	.LLST4:
 2968 005f 10000000 		.4byte	.LVL1
 2969 0063 20000000 		.4byte	.LVL2
 2970 0067 0600     		.2byte	0x6
 2971 0069 03       		.byte	0x3
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 85


 2972 006a 00000000 		.4byte	SO_SPEED_signal
 2973 006e 9F       		.byte	0x9f
 2974 006f 00000000 		.4byte	0
 2975 0073 00000000 		.4byte	0
 2976              	.LLST5:
 2977 0077 20000000 		.4byte	.LVL2
 2978 007b 30000000 		.4byte	.LVL3
 2979 007f 0100     		.2byte	0x1
 2980 0081 50       		.byte	0x50
 2981 0082 00000000 		.4byte	0
 2982 0086 00000000 		.4byte	0
 2983              	.LLST6:
 2984 008a 20000000 		.4byte	.LVL2
 2985 008e 30000000 		.4byte	.LVL3
 2986 0092 0600     		.2byte	0x6
 2987 0094 03       		.byte	0x3
 2988 0095 00000000 		.4byte	SO_ENGINE_signal
 2989 0099 9F       		.byte	0x9f
 2990 009a 00000000 		.4byte	0
 2991 009e 00000000 		.4byte	0
 2992              	.LLST7:
 2993 00a2 30000000 		.4byte	.LVL3
 2994 00a6 40000000 		.4byte	.LVL4
 2995 00aa 0100     		.2byte	0x1
 2996 00ac 50       		.byte	0x50
 2997 00ad 00000000 		.4byte	0
 2998 00b1 00000000 		.4byte	0
 2999              	.LLST8:
 3000 00b5 30000000 		.4byte	.LVL3
 3001 00b9 40000000 		.4byte	.LVL4
 3002 00bd 0600     		.2byte	0x6
 3003 00bf 03       		.byte	0x3
 3004 00c0 00000000 		.4byte	SO_BREAKPEDAL_signal
 3005 00c4 9F       		.byte	0x9f
 3006 00c5 00000000 		.4byte	0
 3007 00c9 00000000 		.4byte	0
 3008              	.LLST9:
 3009 00cd 40000000 		.4byte	.LVL4
 3010 00d1 50000000 		.4byte	.LVL5
 3011 00d5 0100     		.2byte	0x1
 3012 00d7 50       		.byte	0x50
 3013 00d8 00000000 		.4byte	0
 3014 00dc 00000000 		.4byte	0
 3015              	.LLST10:
 3016 00e0 40000000 		.4byte	.LVL4
 3017 00e4 50000000 		.4byte	.LVL5
 3018 00e8 0600     		.2byte	0x6
 3019 00ea 03       		.byte	0x3
 3020 00eb 00000000 		.4byte	SO_BREAKLIGHT_signal
 3021 00ef 9F       		.byte	0x9f
 3022 00f0 00000000 		.4byte	0
 3023 00f4 00000000 		.4byte	0
 3024              	.LLST11:
 3025 00f8 50000000 		.4byte	.LVL5
 3026 00fc 56000000 		.4byte	.LVL6
 3027 0100 0100     		.2byte	0x1
 3028 0102 50       		.byte	0x50
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 86


 3029 0103 56000000 		.4byte	.LVL6
 3030 0107 60000000 		.4byte	.LVL7
 3031 010b 0400     		.2byte	0x4
 3032 010d F3       		.byte	0xf3
 3033 010e 01       		.uleb128 0x1
 3034 010f 50       		.byte	0x50
 3035 0110 9F       		.byte	0x9f
 3036 0111 00000000 		.4byte	0
 3037 0115 00000000 		.4byte	0
 3038              	.LLST12:
 3039 0119 50000000 		.4byte	.LVL5
 3040 011d 60000000 		.4byte	.LVL7
 3041 0121 0600     		.2byte	0x6
 3042 0123 03       		.byte	0x3
 3043 0124 00000000 		.4byte	SO_SCREEN_signal
 3044 0128 9F       		.byte	0x9f
 3045 0129 00000000 		.4byte	0
 3046 012d 00000000 		.4byte	0
 3047              	.LLST13:
 3048 0131 00000000 		.4byte	.LVL8
 3049 0135 0E000000 		.4byte	.LVL9
 3050 0139 0600     		.2byte	0x6
 3051 013b 03       		.byte	0x3
 3052 013c 00000000 		.4byte	SO_JOYSTICK_signal
 3053 0140 9F       		.byte	0x9f
 3054 0141 00000000 		.4byte	0
 3055 0145 00000000 		.4byte	0
 3056              	.LLST14:
 3057 0149 0E000000 		.4byte	.LVL9
 3058 014d 14000000 		.4byte	.LVL10
 3059 0151 0600     		.2byte	0x6
 3060 0153 03       		.byte	0x3
 3061 0154 00000000 		.4byte	SO_SPEED_signal
 3062 0158 9F       		.byte	0x9f
 3063 0159 00000000 		.4byte	0
 3064 015d 00000000 		.4byte	0
 3065              	.LLST15:
 3066 0161 14000000 		.4byte	.LVL10
 3067 0165 1A000000 		.4byte	.LVL11
 3068 0169 0600     		.2byte	0x6
 3069 016b 03       		.byte	0x3
 3070 016c 00000000 		.4byte	SO_ENGINE_signal
 3071 0170 9F       		.byte	0x9f
 3072 0171 00000000 		.4byte	0
 3073 0175 00000000 		.4byte	0
 3074              	.LLST16:
 3075 0179 1A000000 		.4byte	.LVL11
 3076 017d 24000000 		.4byte	.LVL12
 3077 0181 0600     		.2byte	0x6
 3078 0183 03       		.byte	0x3
 3079 0184 00000000 		.4byte	SO_BREAKPEDAL_signal
 3080 0188 9F       		.byte	0x9f
 3081 0189 00000000 		.4byte	0
 3082 018d 00000000 		.4byte	0
 3083              	.LLST17:
 3084 0191 24000000 		.4byte	.LVL12
 3085 0195 2E000000 		.4byte	.LVL13
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 87


 3086 0199 0600     		.2byte	0x6
 3087 019b 03       		.byte	0x3
 3088 019c 00000000 		.4byte	SO_BREAKLIGHT_signal
 3089 01a0 9F       		.byte	0x9f
 3090 01a1 00000000 		.4byte	0
 3091 01a5 00000000 		.4byte	0
 3092              	.LLST18:
 3093 01a9 2E000000 		.4byte	.LVL13
 3094 01ad 38000000 		.4byte	.LVL14
 3095 01b1 0600     		.2byte	0x6
 3096 01b3 03       		.byte	0x3
 3097 01b4 00000000 		.4byte	SO_SCREEN_signal
 3098 01b8 9F       		.byte	0x9f
 3099 01b9 00000000 		.4byte	0
 3100 01bd 00000000 		.4byte	0
 3101              		.section	.debug_aranges,"",%progbits
 3102 0000 24000000 		.4byte	0x24
 3103 0004 0200     		.2byte	0x2
 3104 0006 00000000 		.4byte	.Ldebug_info0
 3105 000a 04       		.byte	0x4
 3106 000b 00       		.byte	0
 3107 000c 0000     		.2byte	0
 3108 000e 0000     		.2byte	0
 3109 0010 00000000 		.4byte	.LFB180
 3110 0014 68000000 		.4byte	.LFE180-.LFB180
 3111 0018 00000000 		.4byte	.LFB181
 3112 001c 40000000 		.4byte	.LFE181-.LFB181
 3113 0020 00000000 		.4byte	0
 3114 0024 00000000 		.4byte	0
 3115              		.section	.debug_ranges,"",%progbits
 3116              	.Ldebug_ranges0:
 3117 0000 00000000 		.4byte	.LFB180
 3118 0004 68000000 		.4byte	.LFE180
 3119 0008 00000000 		.4byte	.LFB181
 3120 000c 40000000 		.4byte	.LFE181
 3121 0010 00000000 		.4byte	0
 3122 0014 00000000 		.4byte	0
 3123              		.section	.debug_line,"",%progbits
 3124              	.Ldebug_line0:
 3125 0000 0A040000 		.section	.debug_str,"MS",%progbits,1
 3125      0200A803 
 3125      00000201 
 3125      FB0E0D00 
 3125      01010101 
 3126              	.LASF127:
 3127 0000 696E6372 		.ascii	"increment\000"
 3127      656D656E 
 3127      7400
 3128              	.LASF94:
 3129 000a 656E6769 		.ascii	"engineValue\000"
 3129      6E655661 
 3129      6C756500 
 3130              	.LASF138:
 3131 0016 5254455F 		.ascii	"RTE_SC_SPEED_init\000"
 3131      53435F53 
 3131      50454544 
 3131      5F696E69 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 88


 3131      7400
 3132              	.LASF78:
 3133 0028 7265736F 		.ascii	"resource\000"
 3133      75726365 
 3133      00
 3134              	.LASF157:
 3135 0031 534F5F53 		.ascii	"SO_SCREEN_signal\000"
 3135      43524545 
 3135      4E5F7369 
 3135      676E616C 
 3135      00
 3136              	.LASF114:
 3137 0042 53435F42 		.ascii	"SC_BREAKLIGHT_cfg_s\000"
 3137      5245414B 
 3137      4C494748 
 3137      545F6366 
 3137      675F7300 
 3138              	.LASF115:
 3139 0056 53435F42 		.ascii	"SC_BREAKLIGHT_cfg_t\000"
 3139      5245414B 
 3139      4C494748 
 3139      545F6366 
 3139      675F7400 
 3140              	.LASF18:
 3141 006a 73697A65 		.ascii	"size_t\000"
 3141      5F7400
 3142              	.LASF98:
 3143 0071 53435F45 		.ascii	"SC_ENGINE_cfg_s\000"
 3143      4E47494E 
 3143      455F6366 
 3143      675F7300 
 3144              	.LASF99:
 3145 0081 53435F45 		.ascii	"SC_ENGINE_cfg_t\000"
 3145      4E47494E 
 3145      455F6366 
 3145      675F7400 
 3146              	.LASF145:
 3147 0091 534F5F53 		.ascii	"SO_SCREEN_cfg\000"
 3147      43524545 
 3147      4E5F6366 
 3147      6700
 3148              	.LASF58:
 3149 009f 5265736F 		.ascii	"ResourceType\000"
 3149      75726365 
 3149      54797065 
 3149      00
 3150              	.LASF137:
 3151 00ac 5254455F 		.ascii	"RTE_SC_ENGINE_init\000"
 3151      53435F45 
 3151      4E47494E 
 3151      455F696E 
 3151      697400
 3152              	.LASF4:
 3153 00bf 5F5F7569 		.ascii	"__uint8_t\000"
 3153      6E74385F 
 3153      7400
 3154              	.LASF56:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 89


 3155 00c9 52435F74 		.ascii	"RC_t\000"
 3155      00
 3156              	.LASF143:
 3157 00ce 534F5F42 		.ascii	"SO_BREAKPEDAL_cfg\000"
 3157      5245414B 
 3157      50454441 
 3157      4C5F6366 
 3157      6700
 3158              	.LASF10:
 3159 00e0 6C6F6E67 		.ascii	"long long unsigned int\000"
 3159      206C6F6E 
 3159      6720756E 
 3159      7369676E 
 3159      65642069 
 3160              	.LASF51:
 3161 00f7 52435F45 		.ascii	"RC_ERROR_BAD_DATA\000"
 3161      52524F52 
 3161      5F424144 
 3161      5F444154 
 3161      4100
 3162              	.LASF96:
 3163 0109 53435F45 		.ascii	"SC_ENGINE_driverIn_t\000"
 3163      4E47494E 
 3163      455F6472 
 3163      69766572 
 3163      496E5F74 
 3164              	.LASF41:
 3165 011e 52435F45 		.ascii	"RC_ERROR_TIME_OUT\000"
 3165      52524F52 
 3165      5F54494D 
 3165      455F4F55 
 3165      5400
 3166              	.LASF154:
 3167 0130 534F5F45 		.ascii	"SO_ENGINE_signal\000"
 3167      4E47494E 
 3167      455F7369 
 3167      676E616C 
 3167      00
 3168              	.LASF151:
 3169 0141 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3169      52784275 
 3169      66666572 
 3169      00
 3170              	.LASF158:
 3171 014e 736F5F6A 		.ascii	"so_joystick_updTasks\000"
 3171      6F797374 
 3171      69636B5F 
 3171      75706454 
 3171      61736B73 
 3172              	.LASF90:
 3173 0163 53435F53 		.ascii	"SC_SPEED_cfg_s\000"
 3173      50454544 
 3173      5F636667 
 3173      5F7300
 3174              	.LASF91:
 3175 0172 53435F53 		.ascii	"SC_SPEED_cfg_t\000"
 3175      50454544 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 90


 3175      5F636667 
 3175      5F7400
 3176              	.LASF130:
 3177 0181 5254455F 		.ascii	"RTE_SC_BREAKPEDAL_incAge\000"
 3177      53435F42 
 3177      5245414B 
 3177      50454441 
 3177      4C5F696E 
 3178              	.LASF9:
 3179 019a 6C6F6E67 		.ascii	"long long int\000"
 3179      206C6F6E 
 3179      6720696E 
 3179      7400
 3180              	.LASF0:
 3181 01a8 7369676E 		.ascii	"signed char\000"
 3181      65642063 
 3181      68617200 
 3182              	.LASF26:
 3183 01b4 4576656E 		.ascii	"EventMaskType\000"
 3183      744D6173 
 3183      6B547970 
 3183      6500
 3184              	.LASF139:
 3185 01c2 5254455F 		.ascii	"RTE_SC_JOYSTICK_init\000"
 3185      53435F4A 
 3185      4F595354 
 3185      49434B5F 
 3185      696E6974 
 3186              	.LASF71:
 3187 01d7 65764F6E 		.ascii	"evOnUpdate\000"
 3187      55706461 
 3187      746500
 3188              	.LASF102:
 3189 01e2 62726561 		.ascii	"breakPedalPressed\000"
 3189      6B506564 
 3189      616C5072 
 3189      65737365 
 3189      6400
 3190              	.LASF110:
 3191 01f4 62726561 		.ascii	"breakLightStatus\000"
 3191      6B4C6967 
 3191      68745374 
 3191      61747573 
 3191      00
 3192              	.LASF39:
 3193 0205 52435F45 		.ascii	"RC_ERROR_BUFFER_EMTPY\000"
 3193      52524F52 
 3193      5F425546 
 3193      4645525F 
 3193      454D5450 
 3194              	.LASF104:
 3195 021b 53435F42 		.ascii	"SC_BREAKPEDAL_driverIn_t\000"
 3195      5245414B 
 3195      50454441 
 3195      4C5F6472 
 3195      69766572 
 3196              	.LASF6:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 91


 3197 0234 6C6F6E67 		.ascii	"long int\000"
 3197      20696E74 
 3197      00
 3198              	.LASF156:
 3199 023d 534F5F42 		.ascii	"SO_BREAKLIGHT_signal\000"
 3199      5245414B 
 3199      4C494748 
 3199      545F7369 
 3199      676E616C 
 3200              	.LASF59:
 3201 0252 5254455F 		.ascii	"RTE_SIGNALSTATUS_STARTUP\000"
 3201      5349474E 
 3201      414C5354 
 3201      41545553 
 3201      5F535441 
 3202              	.LASF42:
 3203 026b 52435F45 		.ascii	"RC_ERROR_OPEN\000"
 3203      52524F52 
 3203      5F4F5045 
 3203      4E00
 3204              	.LASF16:
 3205 0279 646F7562 		.ascii	"double\000"
 3205      6C6500
 3206              	.LASF135:
 3207 0280 5254455F 		.ascii	"RTE_SC_BREAKLIGHT_init\000"
 3207      53435F42 
 3207      5245414B 
 3207      4C494748 
 3207      545F696E 
 3208              	.LASF64:
 3209 0297 78506F73 		.ascii	"xPos\000"
 3209      00
 3210              	.LASF163:
 3211 029c 6273775C 		.ascii	"bsw\\rte\\sp_common.c\000"
 3211      7274655C 
 3211      73705F63 
 3211      6F6D6D6F 
 3211      6E2E6300 
 3212              	.LASF61:
 3213 02b0 5254455F 		.ascii	"RTE_SIGNALSTATUS_VALID\000"
 3213      5349474E 
 3213      414C5354 
 3213      41545553 
 3213      5F56414C 
 3214              	.LASF166:
 3215 02c7 7469636B 		.ascii	"tick\000"
 3215      00
 3216              	.LASF73:
 3217 02cc 6F6E5570 		.ascii	"onUpdateTaskCount\000"
 3217      64617465 
 3217      5461736B 
 3217      436F756E 
 3217      7400
 3218              	.LASF149:
 3219 02de 45455F73 		.ascii	"EE_std_endcycle_next_tid\000"
 3219      74645F65 
 3219      6E646379 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 92


 3219      636C655F 
 3219      6E657874 
 3220              	.LASF7:
 3221 02f7 5F5F7569 		.ascii	"__uint32_t\000"
 3221      6E743332 
 3221      5F7400
 3222              	.LASF144:
 3223 0302 534F5F42 		.ascii	"SO_BREAKLIGHT_cfg\000"
 3223      5245414B 
 3223      4C494748 
 3223      545F6366 
 3223      6700
 3224              	.LASF24:
 3225 0314 45455F54 		.ascii	"EE_TID\000"
 3225      494400
 3226              	.LASF82:
 3227 031b 76616C75 		.ascii	"value\000"
 3227      6500
 3228              	.LASF120:
 3229 0321 53435F53 		.ascii	"SC_SCREEN_driverIn_t\000"
 3229      43524545 
 3229      4E5F6472 
 3229      69766572 
 3229      496E5F74 
 3230              	.LASF92:
 3231 0336 53435F53 		.ascii	"SC_SPEED_s\000"
 3231      50454544 
 3231      5F7300
 3232              	.LASF93:
 3233 0341 53435F53 		.ascii	"SC_SPEED_t\000"
 3233      50454544 
 3233      5F7400
 3234              	.LASF155:
 3235 034c 534F5F42 		.ascii	"SO_BREAKPEDAL_signal\000"
 3235      5245414B 
 3235      50454441 
 3235      4C5F7369 
 3235      676E616C 
 3236              	.LASF11:
 3237 0361 756E7369 		.ascii	"unsigned int\000"
 3237      676E6564 
 3237      20696E74 
 3237      00
 3238              	.LASF152:
 3239 036e 534F5F4A 		.ascii	"SO_JOYSTICK_signal\000"
 3239      4F595354 
 3239      49434B5F 
 3239      7369676E 
 3239      616C00
 3240              	.LASF80:
 3241 0381 53435F4A 		.ascii	"SC_JOYSTICK_cfg_s\000"
 3241      4F595354 
 3241      49434B5F 
 3241      6366675F 
 3241      7300
 3242              	.LASF79:
 3243 0393 53435F4A 		.ascii	"SC_JOYSTICK_cfg_t\000"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 93


 3243      4F595354 
 3243      49434B5F 
 3243      6366675F 
 3243      7400
 3244              	.LASF54:
 3245 03a5 52435F45 		.ascii	"RC_ERROR_UNKNOWN\000"
 3245      52524F52 
 3245      5F554E4B 
 3245      4E4F574E 
 3245      00
 3246              	.LASF22:
 3247 03b6 45455F55 		.ascii	"EE_UREG\000"
 3247      52454700 
 3248              	.LASF70:
 3249 03be 6F757444 		.ascii	"outDriver\000"
 3249      72697665 
 3249      7200
 3250              	.LASF105:
 3251 03c8 53435F42 		.ascii	"SC_BREAKPEDAL_driverOut_t\000"
 3251      5245414B 
 3251      50454441 
 3251      4C5F6472 
 3251      69766572 
 3252              	.LASF43:
 3253 03e2 52435F45 		.ascii	"RC_ERROR_CHECKSUM\000"
 3253      52524F52 
 3253      5F434845 
 3253      434B5355 
 3253      4D00
 3254              	.LASF8:
 3255 03f4 6C6F6E67 		.ascii	"long unsigned int\000"
 3255      20756E73 
 3255      69676E65 
 3255      6420696E 
 3255      7400
 3256              	.LASF106:
 3257 0406 53435F42 		.ascii	"SC_BREAKPEDAL_cfg_s\000"
 3257      5245414B 
 3257      50454441 
 3257      4C5F6366 
 3257      675F7300 
 3258              	.LASF107:
 3259 041a 53435F42 		.ascii	"SC_BREAKPEDAL_cfg_t\000"
 3259      5245414B 
 3259      50454441 
 3259      4C5F6366 
 3259      675F7400 
 3260              	.LASF142:
 3261 042e 534F5F45 		.ascii	"SO_ENGINE_cfg\000"
 3261      4E47494E 
 3261      455F6366 
 3261      6700
 3262              	.LASF30:
 3263 043c 52435F53 		.ascii	"RC_SUCCESS\000"
 3263      55434345 
 3263      535300
 3264              	.LASF153:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 94


 3265 0447 534F5F53 		.ascii	"SO_SPEED_signal\000"
 3265      50454544 
 3265      5F736967 
 3265      6E616C00 
 3266              	.LASF25:
 3267 0457 5461736B 		.ascii	"TaskType\000"
 3267      54797065 
 3267      00
 3268              	.LASF146:
 3269 0460 45455F6F 		.ascii	"EE_oo_IRQ_disable_count\000"
 3269      6F5F4952 
 3269      515F6469 
 3269      7361626C 
 3269      655F636F 
 3270              	.LASF38:
 3271 0478 52435F45 		.ascii	"RC_ERROR_BUFFER_FULL\000"
 3271      52524F52 
 3271      5F425546 
 3271      4645525F 
 3271      46554C4C 
 3272              	.LASF48:
 3273 048d 52435F45 		.ascii	"RC_ERROR_WRITE_FAILS\000"
 3273      52524F52 
 3273      5F575249 
 3273      54455F46 
 3273      41494C53 
 3274              	.LASF121:
 3275 04a2 53435F53 		.ascii	"SC_SCREEN_driverOut_t\000"
 3275      43524545 
 3275      4E5F6472 
 3275      69766572 
 3275      4F75745F 
 3276              	.LASF50:
 3277 04b8 52435F45 		.ascii	"RC_ERROR_BAD_PARAM\000"
 3277      52524F52 
 3277      5F424144 
 3277      5F504152 
 3277      414D00
 3278              	.LASF49:
 3279 04cb 52435F45 		.ascii	"RC_ERROR_NOT_MATCH\000"
 3279      52524F52 
 3279      5F4E4F54 
 3279      5F4D4154 
 3279      434800
 3280              	.LASF129:
 3281 04de 5254455F 		.ascii	"RTE_SC_BREAKLIGHT_incAge\000"
 3281      53435F42 
 3281      5245414B 
 3281      4C494748 
 3281      545F696E 
 3282              	.LASF97:
 3283 04f7 53435F45 		.ascii	"SC_ENGINE_driverOut_t\000"
 3283      4E47494E 
 3283      455F6472 
 3283      69766572 
 3283      4F75745F 
 3284              	.LASF161:
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 95


 3285 050d 736F5F73 		.ascii	"so_screen_updTasks\000"
 3285      63726565 
 3285      6E5F7570 
 3285      64546173 
 3285      6B7300
 3286              	.LASF89:
 3287 0520 53435F53 		.ascii	"SC_SPEED_driverOut_t\000"
 3287      50454544 
 3287      5F647269 
 3287      7665724F 
 3287      75745F74 
 3288              	.LASF88:
 3289 0535 53435F53 		.ascii	"SC_SPEED_driverIn_t\000"
 3289      50454544 
 3289      5F647269 
 3289      76657249 
 3289      6E5F7400 
 3290              	.LASF112:
 3291 0549 53435F42 		.ascii	"SC_BREAKLIGHT_driverIn_t\000"
 3291      5245414B 
 3291      4C494748 
 3291      545F6472 
 3291      69766572 
 3292              	.LASF67:
 3293 0562 53435F4A 		.ascii	"SC_JOYSTICK_driverIn_t\000"
 3293      4F595354 
 3293      49434B5F 
 3293      64726976 
 3293      6572496E 
 3294              	.LASF66:
 3295 0579 53435F4A 		.ascii	"SC_JOYSTICK_data_t\000"
 3295      4F595354 
 3295      49434B5F 
 3295      64617461 
 3295      5F7400
 3296              	.LASF27:
 3297 058c 73697A65 		.ascii	"sizetype\000"
 3297      74797065 
 3297      00
 3298              	.LASF62:
 3299 0595 5254455F 		.ascii	"RTE_SIGNALSTATUS_INVALID\000"
 3299      5349474E 
 3299      414C5354 
 3299      41545553 
 3299      5F494E56 
 3300              	.LASF29:
 3301 05ae 626F6F6C 		.ascii	"boolean_t\000"
 3301      65616E5F 
 3301      7400
 3302              	.LASF136:
 3303 05b8 5254455F 		.ascii	"RTE_SC_BREAKPEDAL_init\000"
 3303      53435F42 
 3303      5245414B 
 3303      50454441 
 3303      4C5F696E 
 3304              	.LASF147:
 3305 05cf 45455F6F 		.ascii	"EE_oo_IRQ_suspend_status\000"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 96


 3305      6F5F4952 
 3305      515F7375 
 3305      7370656E 
 3305      645F7374 
 3306              	.LASF46:
 3307 05e8 52435F45 		.ascii	"RC_ERROR_INVALID\000"
 3307      52524F52 
 3307      5F494E56 
 3307      414C4944 
 3307      00
 3308              	.LASF140:
 3309 05f9 534F5F4A 		.ascii	"SO_JOYSTICK_cfg\000"
 3309      4F595354 
 3309      49434B5F 
 3309      63666700 
 3310              	.LASF148:
 3311 0609 45455F41 		.ascii	"EE_ApplicationMode\000"
 3311      70706C69 
 3311      63617469 
 3311      6F6E4D6F 
 3311      646500
 3312              	.LASF125:
 3313 061c 53435F53 		.ascii	"SC_SCREEN_t\000"
 3313      43524545 
 3313      4E5F7400 
 3314              	.LASF32:
 3315 0628 52435F45 		.ascii	"RC_ERROR_NULL\000"
 3315      52524F52 
 3315      5F4E554C 
 3315      4C00
 3316              	.LASF52:
 3317 0636 52435F45 		.ascii	"RC_ERROR_CANCELED\000"
 3317      52524F52 
 3317      5F43414E 
 3317      43454C45 
 3317      4400
 3318              	.LASF37:
 3319 0648 52435F45 		.ascii	"RC_ERROR_UNDERRUN\000"
 3319      52524F52 
 3319      5F554E44 
 3319      45525255 
 3319      4E00
 3320              	.LASF47:
 3321 065a 52435F45 		.ascii	"RC_ERROR_READ_FAILS\000"
 3321      52524F52 
 3321      5F524541 
 3321      445F4641 
 3321      494C5300 
 3322              	.LASF113:
 3323 066e 53435F42 		.ascii	"SC_BREAKLIGHT_driverOut_t\000"
 3323      5245414B 
 3323      4C494748 
 3323      545F6472 
 3323      69766572 
 3324              	.LASF3:
 3325 0688 73686F72 		.ascii	"short unsigned int\000"
 3325      7420756E 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 97


 3325      7369676E 
 3325      65642069 
 3325      6E7400
 3326              	.LASF164:
 3327 069b 433A5C55 		.ascii	"C:\\Users\\vboxuser\\Documents\\GitHub\\EAA_GasPeda"
 3327      73657273 
 3327      5C76626F 
 3327      78757365 
 3327      725C446F 
 3328 06c9 6C5C4C61 		.ascii	"l\\Lab 1\\GasPedal.cydsn\000"
 3328      6220315C 
 3328      47617350 
 3328      6564616C 
 3328      2E637964 
 3329              	.LASF109:
 3330 06e0 53435F42 		.ascii	"SC_BREAKPEDAL_t\000"
 3330      5245414B 
 3330      50454441 
 3330      4C5F7400 
 3331              	.LASF69:
 3332 06f0 696E4472 		.ascii	"inDriver\000"
 3332      69766572 
 3332      00
 3333              	.LASF31:
 3334 06f9 52435F45 		.ascii	"RC_ERROR\000"
 3334      52524F52 
 3334      00
 3335              	.LASF15:
 3336 0702 666C6F61 		.ascii	"float\000"
 3336      7400
 3337              	.LASF40:
 3338 0708 52435F45 		.ascii	"RC_ERROR_BUSY\000"
 3338      52524F52 
 3338      5F425553 
 3338      5900
 3339              	.LASF75:
 3340 0716 6F6E4572 		.ascii	"onErrorTaskCount\000"
 3340      726F7254 
 3340      61736B43 
 3340      6F756E74 
 3340      00
 3341              	.LASF45:
 3342 0727 52435F45 		.ascii	"RC_ERROR_WRITE_ONLY\000"
 3342      52524F52 
 3342      5F575249 
 3342      54455F4F 
 3342      4E4C5900 
 3343              	.LASF13:
 3344 073b 696E7433 		.ascii	"int32_t\000"
 3344      325F7400 
 3345              	.LASF1:
 3346 0743 756E7369 		.ascii	"unsigned char\000"
 3346      676E6564 
 3346      20636861 
 3346      7200
 3347              	.LASF108:
 3348 0751 53435F42 		.ascii	"SC_BREAKPEDAL_s\000"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 98


 3348      5245414B 
 3348      50454441 
 3348      4C5F7300 
 3349              	.LASF2:
 3350 0761 73686F72 		.ascii	"short int\000"
 3350      7420696E 
 3350      7400
 3351              	.LASF68:
 3352 076b 53435F4A 		.ascii	"SC_JOYSTICK_driverOut_t\000"
 3352      4F595354 
 3352      49434B5F 
 3352      64726976 
 3352      65724F75 
 3353              	.LASF165:
 3354 0783 5254455F 		.ascii	"RTE_timertick_sp_common_tick\000"
 3354      74696D65 
 3354      72746963 
 3354      6B5F7370 
 3354      5F636F6D 
 3355              	.LASF74:
 3356 07a0 6F6E5570 		.ascii	"onUpdateTasks\000"
 3356      64617465 
 3356      5461736B 
 3356      7300
 3357              	.LASF33:
 3358 07ae 52435F45 		.ascii	"RC_ERROR_ZERO\000"
 3358      52524F52 
 3358      5F5A4552 
 3358      4F00
 3359              	.LASF132:
 3360 07bc 5254455F 		.ascii	"RTE_SC_SPEED_incAge\000"
 3360      53435F53 
 3360      50454544 
 3360      5F696E63 
 3360      41676500 
 3361              	.LASF162:
 3362 07d0 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3362      43313120 
 3362      352E342E 
 3362      31203230 
 3362      31363036 
 3363 0803 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3363      20726576 
 3363      6973696F 
 3363      6E203233 
 3363      37373135 
 3364 0836 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 3364      66756E63 
 3364      74696F6E 
 3364      2D736563 
 3364      74696F6E 
 3365              	.LASF72:
 3366 085e 65764F6E 		.ascii	"evOnError\000"
 3366      4572726F 
 3366      7200
 3367              	.LASF134:
 3368 0868 5254455F 		.ascii	"RTE_SC_SCREEN_init\000"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 99


 3368      53435F53 
 3368      43524545 
 3368      4E5F696E 
 3368      697400
 3369              	.LASF84:
 3370 087b 70536967 		.ascii	"pSigCfg\000"
 3370      43666700 
 3371              	.LASF141:
 3372 0883 534F5F53 		.ascii	"SO_SPEED_cfg\000"
 3372      50454544 
 3372      5F636667 
 3372      00
 3373              	.LASF81:
 3374 0890 53435F4A 		.ascii	"SC_JOYSTICK_s\000"
 3374      4F595354 
 3374      49434B5F 
 3374      7300
 3375              	.LASF85:
 3376 089e 53435F4A 		.ascii	"SC_JOYSTICK_t\000"
 3376      4F595354 
 3376      49434B5F 
 3376      7400
 3377              	.LASF14:
 3378 08ac 75696E74 		.ascii	"uint32_t\000"
 3378      33325F74 
 3378      00
 3379              	.LASF126:
 3380 08b5 7369676E 		.ascii	"signal\000"
 3380      616C00
 3381              	.LASF53:
 3382 08bc 52435F45 		.ascii	"RC_ERROR_INVALID_STATE\000"
 3382      52524F52 
 3382      5F494E56 
 3382      414C4944 
 3382      5F535441 
 3383              	.LASF87:
 3384 08d3 53435F53 		.ascii	"SC_SPEED_data_t\000"
 3384      50454544 
 3384      5F646174 
 3384      615F7400 
 3385              	.LASF44:
 3386 08e3 52435F45 		.ascii	"RC_ERROR_READ_ONLY\000"
 3386      52524F52 
 3386      5F524541 
 3386      445F4F4E 
 3386      4C5900
 3387              	.LASF19:
 3388 08f6 6C6F6E67 		.ascii	"long double\000"
 3388      20646F75 
 3388      626C6500 
 3389              	.LASF17:
 3390 0902 63686172 		.ascii	"char\000"
 3390      00
 3391              	.LASF60:
 3392 0907 5254455F 		.ascii	"RTE_SIGNALSTATUS_INITIALIZED\000"
 3392      5349474E 
 3392      414C5354 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 100


 3392      41545553 
 3392      5F494E49 
 3393              	.LASF77:
 3394 0924 7265736F 		.ascii	"resourceActive\000"
 3394      75726365 
 3394      41637469 
 3394      766500
 3395              	.LASF167:
 3396 0933 5254455F 		.ascii	"RTE_reset_sp_common\000"
 3396      72657365 
 3396      745F7370 
 3396      5F636F6D 
 3396      6D6F6E00 
 3397              	.LASF111:
 3398 0947 53435F42 		.ascii	"SC_BREAKLIGHT_data_t\000"
 3398      5245414B 
 3398      4C494748 
 3398      545F6461 
 3398      74615F74 
 3399              	.LASF5:
 3400 095c 5F5F696E 		.ascii	"__int32_t\000"
 3400      7433325F 
 3400      7400
 3401              	.LASF124:
 3402 0966 53435F53 		.ascii	"SC_SCREEN_s\000"
 3402      43524545 
 3402      4E5F7300 
 3403              	.LASF55:
 3404 0972 52435F45 		.ascii	"RC_ERROR_NOT_IMPLEMENTED\000"
 3404      52524F52 
 3404      5F4E4F54 
 3404      5F494D50 
 3404      4C454D45 
 3405              	.LASF86:
 3406 098b 73706565 		.ascii	"speedValue\000"
 3406      6456616C 
 3406      756500
 3407              	.LASF36:
 3408 0996 52435F45 		.ascii	"RC_ERROR_OVERRUN\000"
 3408      52524F52 
 3408      5F4F5645 
 3408      5252554E 
 3408      00
 3409              	.LASF160:
 3410 09a7 736F5F62 		.ascii	"so_breakPedal_updTasks\000"
 3410      7265616B 
 3410      50656461 
 3410      6C5F7570 
 3410      64546173 
 3411              	.LASF63:
 3412 09be 5254455F 		.ascii	"RTE_signalStatus_t\000"
 3412      7369676E 
 3412      616C5374 
 3412      61747573 
 3412      5F7400
 3413              	.LASF34:
 3414 09d1 52435F45 		.ascii	"RC_ERROR_MEMORY\000"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 101


 3414      52524F52 
 3414      5F4D454D 
 3414      4F525900 
 3415              	.LASF65:
 3416 09e1 79506F73 		.ascii	"yPos\000"
 3416      00
 3417              	.LASF159:
 3418 09e6 736F5F73 		.ascii	"so_speed_updTasks\000"
 3418      70656564 
 3418      5F757064 
 3418      5461736B 
 3418      7300
 3419              	.LASF57:
 3420 09f8 5461736B 		.ascii	"TaskTypeArray\000"
 3420      54797065 
 3420      41727261 
 3420      7900
 3421              	.LASF119:
 3422 0a06 53435F53 		.ascii	"SC_SCREEN_data_t\000"
 3422      43524545 
 3422      4E5F6461 
 3422      74615F74 
 3422      00
 3423              	.LASF118:
 3424 0a17 64756D6D 		.ascii	"dummy_screen\000"
 3424      795F7363 
 3424      7265656E 
 3424      00
 3425              	.LASF28:
 3426 0a24 73696E74 		.ascii	"sint8_t\000"
 3426      385F7400 
 3427              	.LASF83:
 3428 0a2c 73746174 		.ascii	"status\000"
 3428      757300
 3429              	.LASF150:
 3430 0a33 45455F49 		.ascii	"EE_IRQ_nesting_level\000"
 3430      52515F6E 
 3430      65737469 
 3430      6E675F6C 
 3430      6576656C 
 3431              	.LASF21:
 3432 0a48 45455F55 		.ascii	"EE_UINT32\000"
 3432      494E5433 
 3432      3200
 3433              	.LASF35:
 3434 0a52 52435F45 		.ascii	"RC_ERROR_RANGE\000"
 3434      52524F52 
 3434      5F52414E 
 3434      474500
 3435              	.LASF128:
 3436 0a61 5254455F 		.ascii	"RTE_SC_SCREEN_incAge\000"
 3436      53435F53 
 3436      43524545 
 3436      4E5F696E 
 3436      63416765 
 3437              	.LASF20:
 3438 0a76 45455F49 		.ascii	"EE_INT32\000"
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 102


 3438      4E543332 
 3438      00
 3439              	.LASF12:
 3440 0a7f 75696E74 		.ascii	"uint8_t\000"
 3440      385F7400 
 3441              	.LASF122:
 3442 0a87 53435F53 		.ascii	"SC_SCREEN_cfg_s\000"
 3442      43524545 
 3442      4E5F6366 
 3442      675F7300 
 3443              	.LASF123:
 3444 0a97 53435F53 		.ascii	"SC_SCREEN_cfg_t\000"
 3444      43524545 
 3444      4E5F6366 
 3444      675F7400 
 3445              	.LASF103:
 3446 0aa7 53435F42 		.ascii	"SC_BREAKPEDAL_data_t\000"
 3446      5245414B 
 3446      50454441 
 3446      4C5F6461 
 3446      74615F74 
 3447              	.LASF95:
 3448 0abc 53435F45 		.ascii	"SC_ENGINE_data_t\000"
 3448      4E47494E 
 3448      455F6461 
 3448      74615F74 
 3448      00
 3449              	.LASF133:
 3450 0acd 5254455F 		.ascii	"RTE_SC_JOYSTICK_incAge\000"
 3450      53435F4A 
 3450      4F595354 
 3450      49434B5F 
 3450      696E6341 
 3451              	.LASF131:
 3452 0ae4 5254455F 		.ascii	"RTE_SC_ENGINE_incAge\000"
 3452      53435F45 
 3452      4E47494E 
 3452      455F696E 
 3452      63416765 
 3453              	.LASF116:
 3454 0af9 53435F42 		.ascii	"SC_BREAKLIGHT_s\000"
 3454      5245414B 
 3454      4C494748 
 3454      545F7300 
 3455              	.LASF117:
 3456 0b09 53435F42 		.ascii	"SC_BREAKLIGHT_t\000"
 3456      5245414B 
 3456      4C494748 
 3456      545F7400 
 3457              	.LASF76:
 3458 0b19 6F6E4572 		.ascii	"onErrorTasks\000"
 3458      726F7254 
 3458      61736B73 
 3458      00
 3459              	.LASF23:
 3460 0b26 45455F46 		.ascii	"EE_FREG\000"
 3460      52454700 
ARM GAS  C:\Users\vboxuser\AppData\Local\Temp\ccK598wU.s 			page 103


 3461              	.LASF100:
 3462 0b2e 53435F45 		.ascii	"SC_ENGINE_s\000"
 3462      4E47494E 
 3462      455F7300 
 3463              	.LASF101:
 3464 0b3a 53435F45 		.ascii	"SC_ENGINE_t\000"
 3464      4E47494E 
 3464      455F7400 
 3465              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
