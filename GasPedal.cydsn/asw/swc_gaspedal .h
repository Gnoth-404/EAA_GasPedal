
/*
 * Filename: swc_gaspedal.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 *
 * Description: Gas Pedal Software Component
 */

#ifndef _H_DEFINE_SWC_GASPEDAL
#define _H_DEFINE_SWC_GASPEDAL

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SWC_GASPEDAL_INCLUDES */

/* USER CODE END SWC_GASPEDAL_INCLUDES */



/* USER CODE START SWC_GASPEDAL_USERDEFINITIONS */

/* USER CODE END SWC_GASPEDAL_USERDEFINITIONS */


/*
 * component: swc_GasPedal
 * cycletime: 10
 * description: Runnable that reads joystick data value x and y every 10ms and update joystick signal
 * events: 
 * name: GASPEDAL_readJoystick_run
 * shortname: readJoystick
 * signalIN: 
 * signalOUT: so_joystick
 * task: tsk_io
 */
void GASPEDAL_readJoystick_run(RTE_event ev);

/*
 * component: swc_GasPedal
 * cycletime: 0
 * description: Runnable that check the joystick signal and update speed signal value
 * events: ev_joystick_onData|ev_breakpedal_onData|ev_screen_onData
 * name: GASPEDAL_calcControl_run
 * shortname: calcControl
 * signalIN: so_joystick|so_breakPedal
 * signalOUT: so_speed
 * task: tsk_control
 */
void GASPEDAL_calcControl_run(RTE_event ev);

/*
 * component: swc_GasPedal
 * cycletime: 100
 * description: Runnable that take the input speed signal value and write it to engine(Green LED)
 * events: 
 * name: GASPEDAL_setEngine_run
 * shortname: setEngine
 * signalIN: so_speed
 * signalOUT: 
 * task: tsk_io
 */
void GASPEDAL_setEngine_run(RTE_event ev);

/*
 * component: swc_GasPedal
 * cycletime: 100
 * description: Runnable
 * events: ev_speed_onData
 * name: GASPEDAL_setBrakeLight_run
 * shortname: setBrakeLight
 * signalIN: so_speed
 * signalOUT: so_breakLight
 * task: tsk_io
 */
void GASPEDAL_setBrakeLight_run(RTE_event ev);

/*
 * component: swc_GasPedal
 * cycletime: 100
 * description: Runnable
 * events: ev_screen_onData
 * name: GASPEDAL_HMI_run
 * shortname: HMI
 * signalIN: so_screen
 * signalOUT: 
 * task: tsk_tft
 */
void GASPEDAL_HMI_run(RTE_event ev);


#endif